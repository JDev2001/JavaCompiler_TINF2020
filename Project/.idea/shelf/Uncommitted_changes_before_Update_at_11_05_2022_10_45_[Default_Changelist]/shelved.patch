Index: Parser/src/grammar/antlrGrammar.g4
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>grammar antlrGrammar;\r\n\r\nprogramm: jClass+;\r\njClass: 'class' Identifier classBody;\r\nconstructor: AccessModifier? Identifier LBracket nMethodParameters RBracket block;\r\nclassBody: CurlyLBracket (methodDeclaration|fieldDeclaration|constructor)* CurlyRBracket;\r\nmethodDeclaration: AccessModifier? (objectType|Void) Identifier LBracket nMethodParameters RBracket block;\r\nfieldDeclaration: AccessModifier?  objectType Identifier (Comma Identifier)* (Equal expression)? Semicolon;\r\nmethodParameter: objectType Identifier;\r\nnMethodParameters: (methodParameter)? | methodParameter (Comma methodParameter)+;\r\n\r\nnArguments: expression? | expression (Comma expression)* | instVar;\r\nexpression:  basicexpressions | binary;\r\nbasicexpressions:  baseType | instVar | Identifier | statementExpressions | unary | LBracket expression RBracket ;\r\ninstVar:  This Dot Identifier|(This Dot)? (Identifier Dot)+ Identifier;\r\nstatementExpressions: assign | jNew | methodCall;\r\nassign: (instVar | Identifier) (Equal|PlusEqual|MinusEqual) expression;\r\nlocalVarDeclaration: objectType Identifier (Comma Identifier)* ((Equal|PlusEqual|MinusEqual) expression)?;\r\njNew: 'new' Identifier LBracket nArguments RBracket;\r\nmethodCall: methodCallPrefix? (Identifier LBracket nArguments RBracket Dot)*\r\n(Identifier LBracket nArguments RBracket);\r\nmethodCallPrefix: (instVar|Identifier Dot);\r\nstatement: ifelse | localVarDeclaration Semicolon | jReturn Semicolon | jWhile | block\r\n    | statementExpressions Semicolon;\r\nblock: CurlyLBracket (statement)* CurlyRBracket;\r\nifelse: jIf jElseIf* jElse?;\r\njIf: If LBracket expression RBracket block;\r\njElseIf: Else If LBracket expression RBracket block;\r\njElse: Else block;\r\njWhile: 'while' LBracket expression RBracket block;\r\njReturn: 'return' expression;\r\nunary:  NotOperator expression;\r\nbinary: basicexpressions (operators basicexpressions)+;\r\nbaseType: JBoolean | JNull | This | JString | JCharacter | JInteger | Super; //implicit definition of token JString in parser TODO: Warum? ErÃ¤nzen??\r\nobjectType: 'int'|'char'|'boolean'|Identifier;\r\noperators: LogicalOperator|Comperator|AddSubOperator|PointOperator;\r\n\r\nAccessModifier: 'public' | 'protected' | 'private';\r\nJBoolean: 'true'|'false';\r\nJNull: 'null';\r\nVoid: 'void';\r\nSuper: 'super';\r\nThis: 'this';\r\nIf: 'if';\r\nElse: 'else';\r\nEqual: '=';\r\nPlusEqual: '+=';\r\nMinusEqual: '-=';\r\nComperator: '=='|'!='|'>='|'<='|'>'|'<';\r\nNotOperator: '!';\r\nOpBeforeOrAfterIdentifier: '++'|'--';\r\nPointOperator: '*'|'/';\r\nAddSubOperator: '+'|'-'|'%';\r\nLogicalOperator: '&&'|'||';\r\nLBracket:'(';\r\nRBracket:')';\r\nCurlyLBracket:'{';\r\nCurlyRBracket:'}';\r\nDot: '.';\r\nComma: ',';\r\nSemicolon: ';';\r\nIdentifier: [A-Za-z][A-Za-z0-9]*;\r\nJCharacter: '\\'' [A-Za-z]'\\'';\r\nJInteger: [0-9]+;\r\n\r\nWS: ([ \\t\\r\\n]+) -> skip;\r\nComment: '/*' .*? '*/' -> skip;\r\nLineComment: '//' ~[\\r\\n]* -> skip;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/grammar/antlrGrammar.g4 b/Parser/src/grammar/antlrGrammar.g4
--- a/Parser/src/grammar/antlrGrammar.g4	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/grammar/antlrGrammar.g4	(date 1652265651418)
@@ -1,6 +1,6 @@
 grammar antlrGrammar;
 
-programm: jClass+;
+programm: Identifier? jClass+;
 jClass: 'class' Identifier classBody;
 constructor: AccessModifier? Identifier LBracket nMethodParameters RBracket block;
 classBody: CurlyLBracket (methodDeclaration|fieldDeclaration|constructor)* CurlyRBracket;
Index: Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package SyntaxTreeGenerator;\r\n\r\n\r\n\r\nimport java.io.IOException;\r\nimport java.io.InputStream;\r\n\r\nimport Common.Program;\r\nimport adapter.ProgramAdapter;\r\nimport generated.antlrGrammarLexer;\r\nimport generated.antlrGrammarParser;\r\nimport org.antlr.v4.runtime.CommonTokenStream;\r\nimport org.antlr.v4.runtime.TokenSource;\r\nimport org.antlr.v4.runtime.CharStream;\r\nimport org.antlr.v4.runtime.CharStreams;\r\nimport org.antlr.v4.runtime.TokenStream;\r\n\r\npublic class SyntaxTreeGenerator implements ISyntaxTreeGenerator\r\n{\r\n\r\n    /**\r\n     * Methode to generate a new syntax tree using antlr (Lexer->Tokens->Parser)\r\n     *\r\n     * @param inputstream input Filestream\r\n     * @return new Program\r\n     * @throws IOException Exception for the IOStream\r\n     */\r\n    @Override\r\n    public Program getSyntaxTree(CharStream inputstream) throws IOException {\r\n\r\n        //Call the generated Components from the antlr file (lexer->tokens->parser)\r\n        antlrGrammarLexer lexer = new antlrGrammarLexer(inputstream);\r\n        CommonTokenStream tokens = new CommonTokenStream(lexer);\r\n        antlrGrammarParser parser = new antlrGrammarParser(tokens);\r\n\r\n        return  new ProgramAdapter().generate(parser.programm());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java b/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java
--- a/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java	(date 1652265417588)
@@ -3,17 +3,13 @@
 
 
 import java.io.IOException;
-import java.io.InputStream;
 
 import Common.Program;
 import adapter.ProgramAdapter;
 import generated.antlrGrammarLexer;
 import generated.antlrGrammarParser;
 import org.antlr.v4.runtime.CommonTokenStream;
-import org.antlr.v4.runtime.TokenSource;
 import org.antlr.v4.runtime.CharStream;
-import org.antlr.v4.runtime.CharStreams;
-import org.antlr.v4.runtime.TokenStream;
 
 public class SyntaxTreeGenerator implements ISyntaxTreeGenerator
 {
Index: Tests/src/ParserTests/EmptyClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package ParserTests;\r\nimport Common.Program;\r\n\r\nimport SyntaxTreeGenerator.SyntaxTreeGenerator;\r\nimport org.antlr.runtime.ANTLRInputStream;\r\nimport org.antlr.v4.runtime.CharStream;\r\nimport org.antlr.v4.runtime.CharStreams;\r\nimport org.junit.jupiter.api.Assertions;\r\nimport org.junit.jupiter.api.Test;\r\n\r\nimport java.io.IOException;\r\n\r\npublic class EmptyClass {\r\n    @Test\r\n    public void Test() throws IOException {\r\n        String src = \"class Empty {}\";\r\n        Program syntaxTree = new SyntaxTreeGenerator().getSyntaxTree(CharStreams.fromString(src));\r\n        var emptyClass = syntaxTree.getClasses().get(0);\r\n        Assertions.assertSame(\"Empty\", emptyClass.getIdentifier());\r\n    }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Tests/src/ParserTests/EmptyClass.java b/Tests/src/ParserTests/EmptyClass.java
--- a/Tests/src/ParserTests/EmptyClass.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Tests/src/ParserTests/EmptyClass.java	(date 1652265477469)
@@ -16,6 +16,6 @@
         String src = "class Empty {}";
         Program syntaxTree = new SyntaxTreeGenerator().getSyntaxTree(CharStreams.fromString(src));
         var emptyClass = syntaxTree.getClasses().get(0);
-        Assertions.assertSame("Empty", emptyClass.getIdentifier());
+        Assertions.assertEquals("Empty", emptyClass.getIdentifier());
     }
 }
Index: Parser/src/adapter/ClassAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package adapter;\r\n\r\nimport Common.Class;\r\nimport generated.antlrGrammarParser;\r\n\r\npublic class ClassAdapter {\r\n\r\n\r\n    /**\r\n     *  generates a new Object of the fitting class\r\n     *\r\n     * @param ctx Antlr context\r\n     * @return new Object\r\n     */\r\n    public static Class generate(antlrGrammarParser.JClassContext ctx) {\r\n\r\n        //TODO: Hier gehts weiter runter ... WUUUHOOO\r\n        return null;\r\n    }\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/adapter/ClassAdapter.java b/Parser/src/adapter/ClassAdapter.java
--- a/Parser/src/adapter/ClassAdapter.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/adapter/ClassAdapter.java	(date 1652265417595)
@@ -1,8 +1,13 @@
 package adapter;
 
 import Common.Class;
+import Field.Field;
+import Method.Method;
 import generated.antlrGrammarParser;
 
+import java.util.ArrayList;
+import java.util.List;
+
 public class ClassAdapter {
 
 
@@ -14,9 +19,15 @@
      */
     public static Class generate(antlrGrammarParser.JClassContext ctx) {
 
-        //TODO: Hier gehts weiter runter ... WUUUHOOO
-        return null;
+        List<Method> methods = new ArrayList<Method>();
+        List<Field> fields = new ArrayList<Field>();
+
+        ctx.classBody().methodDeclaration().forEach(methodDeclarationContext -> methods.add(MethodeAdapter.generate(methodDeclarationContext)));
+        ctx.classBody().fieldDeclaration().forEach(fieldDeclarationContext -> fields.add(FieldAdapter.generate(fieldDeclarationContext)));
+
+        return new Class(ctx.Identifier().getText(), methods, fields);
     }
+
 
 
 
Index: out/production/Parser/generated/antlrGrammar.interp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>token literal names:\r\nnull\r\n'class'\r\n'new'\r\n'while'\r\n'return'\r\n'int'\r\n'char'\r\n'boolean'\r\nnull\r\nnull\r\n'null'\r\n'void'\r\n'super'\r\n'this'\r\n'if'\r\n'else'\r\n'='\r\n'+='\r\n'-='\r\nnull\r\n'!'\r\nnull\r\nnull\r\nnull\r\nnull\r\n'('\r\n')'\r\n'{'\r\n'}'\r\n'.'\r\n','\r\n';'\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\n\r\ntoken symbolic names:\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nAccessModifier\r\nJBoolean\r\nJNull\r\nVoid\r\nSuper\r\nThis\r\nIf\r\nElse\r\nEqual\r\nPlusEqual\r\nMinusEqual\r\nComperator\r\nNotOperator\r\nOpBeforeOrAfterIdentifier\r\nPointOperator\r\nAddSubOperator\r\nLogicalOperator\r\nLBracket\r\nRBracket\r\nCurlyLBracket\r\nCurlyRBracket\r\nDot\r\nComma\r\nSemicolon\r\nIdentifier\r\nJCharacter\r\nJInteger\r\nWS\r\nComment\r\nLineComment\r\nJString\r\n\r\nrule names:\r\nprogramm\r\njClass\r\nconstructor\r\nclassBody\r\nmethodDeclaration\r\nfieldDeclaration\r\nmethodParameter\r\nnMethodParameters\r\nnArguments\r\nexpression\r\nbasicexpressions\r\ninstVar\r\nstatementExpressions\r\nassign\r\nlocalVarDeclaration\r\njNew\r\nmethodCall\r\nmethodCallPrefix\r\nstatement\r\nblock\r\nifelse\r\njIf\r\njElseIf\r\njElse\r\njWhile\r\njReturn\r\nunary\r\nbinary\r\nbaseType\r\nobjectType\r\noperators\r\n\r\n\r\natn:\r\n[4, 1, 38, 313, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1, 0, 4, 0, 64, 8, 0, 11, 0, 12, 0, 65, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 73, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 85, 8, 3, 10, 3, 12, 3, 88, 9, 3, 1, 3, 1, 3, 1, 4, 3, 4, 93, 8, 4, 1, 4, 1, 4, 3, 4, 97, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 3, 5, 106, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 112, 8, 5, 10, 5, 12, 5, 115, 9, 5, 1, 5, 1, 5, 3, 5, 119, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 3, 7, 127, 8, 7, 1, 7, 1, 7, 1, 7, 4, 7, 132, 8, 7, 11, 7, 12, 7, 133, 3, 7, 136, 8, 7, 1, 8, 3, 8, 139, 8, 8, 1, 8, 1, 8, 1, 8, 5, 8, 144, 8, 8, 10, 8, 12, 8, 147, 9, 8, 1, 8, 3, 8, 150, 8, 8, 1, 9, 1, 9, 3, 9, 154, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 165, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 172, 8, 11, 1, 11, 1, 11, 4, 11, 176, 8, 11, 11, 11, 12, 11, 177, 1, 11, 3, 11, 181, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 186, 8, 12, 1, 13, 1, 13, 3, 13, 190, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 199, 8, 14, 10, 14, 12, 14, 202, 9, 14, 1, 14, 1, 14, 3, 14, 206, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 3, 16, 215, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 223, 8, 16, 10, 16, 12, 16, 226, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 236, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 250, 8, 18, 1, 19, 1, 19, 5, 19, 254, 8, 19, 10, 19, 12, 19, 257, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 263, 8, 20, 10, 20, 12, 20, 266, 9, 20, 1, 20, 3, 20, 269, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 303, 8, 27, 11, 27, 12, 27, 304, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 0, 0, 31, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 4, 1, 0, 16, 18, 4, 0, 9, 10, 12, 13, 33, 34, 38, 38, 2, 0, 5, 7, 32, 32, 2, 0, 19, 19, 22, 24, 324, 0, 63, 1, 0, 0, 0, 2, 67, 1, 0, 0, 0, 4, 72, 1, 0, 0, 0, 6, 80, 1, 0, 0, 0, 8, 92, 1, 0, 0, 0, 10, 105, 1, 0, 0, 0, 12, 122, 1, 0, 0, 0, 14, 135, 1, 0, 0, 0, 16, 149, 1, 0, 0, 0, 18, 153, 1, 0, 0, 0, 20, 164, 1, 0, 0, 0, 22, 180, 1, 0, 0, 0, 24, 185, 1, 0, 0, 0, 26, 189, 1, 0, 0, 0, 28, 194, 1, 0, 0, 0, 30, 207, 1, 0, 0, 0, 32, 214, 1, 0, 0, 0, 34, 235, 1, 0, 0, 0, 36, 249, 1, 0, 0, 0, 38, 251, 1, 0, 0, 0, 40, 260, 1, 0, 0, 0, 42, 270, 1, 0, 0, 0, 44, 276, 1, 0, 0, 0, 46, 283, 1, 0, 0, 0, 48, 286, 1, 0, 0, 0, 50, 292, 1, 0, 0, 0, 52, 295, 1, 0, 0, 0, 54, 298, 1, 0, 0, 0, 56, 306, 1, 0, 0, 0, 58, 308, 1, 0, 0, 0, 60, 310, 1, 0, 0, 0, 62, 64, 3, 2, 1, 0, 63, 62, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 1, 1, 0, 0, 0, 67, 68, 5, 1, 0, 0, 68, 69, 5, 32, 0, 0, 69, 70, 3, 6, 3, 0, 70, 3, 1, 0, 0, 0, 71, 73, 5, 8, 0, 0, 72, 71, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 74, 1, 0, 0, 0, 74, 75, 5, 32, 0, 0, 75, 76, 5, 25, 0, 0, 76, 77, 3, 14, 7, 0, 77, 78, 5, 26, 0, 0, 78, 79, 3, 38, 19, 0, 79, 5, 1, 0, 0, 0, 80, 86, 5, 27, 0, 0, 81, 85, 3, 8, 4, 0, 82, 85, 3, 10, 5, 0, 83, 85, 3, 4, 2, 0, 84, 81, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 84, 83, 1, 0, 0, 0, 85, 88, 1, 0, 0, 0, 86, 84, 1, 0, 0, 0, 86, 87, 1, 0, 0, 0, 87, 89, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0, 89, 90, 5, 28, 0, 0, 90, 7, 1, 0, 0, 0, 91, 93, 5, 8, 0, 0, 92, 91, 1, 0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 96, 1, 0, 0, 0, 94, 97, 3, 58, 29, 0, 95, 97, 5, 11, 0, 0, 96, 94, 1, 0, 0, 0, 96, 95, 1, 0, 0, 0, 97, 98, 1, 0, 0, 0, 98, 99, 5, 32, 0, 0, 99, 100, 5, 25, 0, 0, 100, 101, 3, 14, 7, 0, 101, 102, 5, 26, 0, 0, 102, 103, 3, 38, 19, 0, 103, 9, 1, 0, 0, 0, 104, 106, 5, 8, 0, 0, 105, 104, 1, 0, 0, 0, 105, 106, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 108, 3, 58, 29, 0, 108, 113, 5, 32, 0, 0, 109, 110, 5, 30, 0, 0, 110, 112, 5, 32, 0, 0, 111, 109, 1, 0, 0, 0, 112, 115, 1, 0, 0, 0, 113, 111, 1, 0, 0, 0, 113, 114, 1, 0, 0, 0, 114, 118, 1, 0, 0, 0, 115, 113, 1, 0, 0, 0, 116, 117, 5, 16, 0, 0, 117, 119, 3, 18, 9, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 120, 1, 0, 0, 0, 120, 121, 5, 31, 0, 0, 121, 11, 1, 0, 0, 0, 122, 123, 3, 58, 29, 0, 123, 124, 5, 32, 0, 0, 124, 13, 1, 0, 0, 0, 125, 127, 3, 12, 6, 0, 126, 125, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 136, 1, 0, 0, 0, 128, 131, 3, 12, 6, 0, 129, 130, 5, 30, 0, 0, 130, 132, 3, 12, 6, 0, 131, 129, 1, 0, 0, 0, 132, 133, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 133, 134, 1, 0, 0, 0, 134, 136, 1, 0, 0, 0, 135, 126, 1, 0, 0, 0, 135, 128, 1, 0, 0, 0, 136, 15, 1, 0, 0, 0, 137, 139, 3, 18, 9, 0, 138, 137, 1, 0, 0, 0, 138, 139, 1, 0, 0, 0, 139, 150, 1, 0, 0, 0, 140, 145, 3, 18, 9, 0, 141, 142, 5, 30, 0, 0, 142, 144, 3, 18, 9, 0, 143, 141, 1, 0, 0, 0, 144, 147, 1, 0, 0, 0, 145, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 150, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 148, 150, 3, 22, 11, 0, 149, 138, 1, 0, 0, 0, 149, 140, 1, 0, 0, 0, 149, 148, 1, 0, 0, 0, 150, 17, 1, 0, 0, 0, 151, 154, 3, 20, 10, 0, 152, 154, 3, 54, 27, 0, 153, 151, 1, 0, 0, 0, 153, 152, 1, 0, 0, 0, 154, 19, 1, 0, 0, 0, 155, 165, 3, 56, 28, 0, 156, 165, 3, 22, 11, 0, 157, 165, 5, 32, 0, 0, 158, 165, 3, 24, 12, 0, 159, 165, 3, 52, 26, 0, 160, 161, 5, 25, 0, 0, 161, 162, 3, 18, 9, 0, 162, 163, 5, 26, 0, 0, 163, 165, 1, 0, 0, 0, 164, 155, 1, 0, 0, 0, 164, 156, 1, 0, 0, 0, 164, 157, 1, 0, 0, 0, 164, 158, 1, 0, 0, 0, 164, 159, 1, 0, 0, 0, 164, 160, 1, 0, 0, 0, 165, 21, 1, 0, 0, 0, 166, 167, 5, 13, 0, 0, 167, 168, 5, 29, 0, 0, 168, 181, 5, 32, 0, 0, 169, 170, 5, 13, 0, 0, 170, 172, 5, 29, 0, 0, 171, 169, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 175, 1, 0, 0, 0, 173, 174, 5, 32, 0, 0, 174, 176, 5, 29, 0, 0, 175, 173, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 1, 0, 0, 0, 179, 181, 5, 32, 0, 0, 180, 166, 1, 0, 0, 0, 180, 171, 1, 0, 0, 0, 181, 23, 1, 0, 0, 0, 182, 186, 3, 26, 13, 0, 183, 186, 3, 30, 15, 0, 184, 186, 3, 32, 16, 0, 185, 182, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 184, 1, 0, 0, 0, 186, 25, 1, 0, 0, 0, 187, 190, 3, 22, 11, 0, 188, 190, 5, 32, 0, 0, 189, 187, 1, 0, 0, 0, 189, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191, 192, 7, 0, 0, 0, 192, 193, 3, 18, 9, 0, 193, 27, 1, 0, 0, 0, 194, 195, 3, 58, 29, 0, 195, 200, 5, 32, 0, 0, 196, 197, 5, 30, 0, 0, 197, 199, 5, 32, 0, 0, 198, 196, 1, 0, 0, 0, 199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 205, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 203, 204, 7, 0, 0, 0, 204, 206, 3, 18, 9, 0, 205, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 29, 1, 0, 0, 0, 207, 208, 5, 2, 0, 0, 208, 209, 5, 32, 0, 0, 209, 210, 5, 25, 0, 0, 210, 211, 3, 16, 8, 0, 211, 212, 5, 26, 0, 0, 212, 31, 1, 0, 0, 0, 213, 215, 3, 34, 17, 0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 224, 1, 0, 0, 0, 216, 217, 5, 32, 0, 0, 217, 218, 5, 25, 0, 0, 218, 219, 3, 16, 8, 0, 219, 220, 5, 26, 0, 0, 220, 221, 5, 29, 0, 0, 221, 223, 1, 0, 0, 0, 222, 216, 1, 0, 0, 0, 223, 226, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 227, 228, 5, 32, 0, 0, 228, 229, 5, 25, 0, 0, 229, 230, 3, 16, 8, 0, 230, 231, 5, 26, 0, 0, 231, 33, 1, 0, 0, 0, 232, 236, 3, 22, 11, 0, 233, 234, 5, 32, 0, 0, 234, 236, 5, 29, 0, 0, 235, 232, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 236, 35, 1, 0, 0, 0, 237, 250, 3, 40, 20, 0, 238, 239, 3, 28, 14, 0, 239, 240, 5, 31, 0, 0, 240, 250, 1, 0, 0, 0, 241, 242, 3, 50, 25, 0, 242, 243, 5, 31, 0, 0, 243, 250, 1, 0, 0, 0, 244, 250, 3, 48, 24, 0, 245, 250, 3, 38, 19, 0, 246, 247, 3, 24, 12, 0, 247, 248, 5, 31, 0, 0, 248, 250, 1, 0, 0, 0, 249, 237, 1, 0, 0, 0, 249, 238, 1, 0, 0, 0, 249, 241, 1, 0, 0, 0, 249, 244, 1, 0, 0, 0, 249, 245, 1, 0, 0, 0, 249, 246, 1, 0, 0, 0, 250, 37, 1, 0, 0, 0, 251, 255, 5, 27, 0, 0, 252, 254, 3, 36, 18, 0, 253, 252, 1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 258, 259, 5, 28, 0, 0, 259, 39, 1, 0, 0, 0, 260, 264, 3, 42, 21, 0, 261, 263, 3, 44, 22, 0, 262, 261, 1, 0, 0, 0, 263, 266, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 267, 269, 3, 46, 23, 0, 268, 267, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 41, 1, 0, 0, 0, 270, 271, 5, 14, 0, 0, 271, 272, 5, 25, 0, 0, 272, 273, 3, 18, 9, 0, 273, 274, 5, 26, 0, 0, 274, 275, 3, 38, 19, 0, 275, 43, 1, 0, 0, 0, 276, 277, 5, 15, 0, 0, 277, 278, 5, 14, 0, 0, 278, 279, 5, 25, 0, 0, 279, 280, 3, 18, 9, 0, 280, 281, 5, 26, 0, 0, 281, 282, 3, 38, 19, 0, 282, 45, 1, 0, 0, 0, 283, 284, 5, 15, 0, 0, 284, 285, 3, 38, 19, 0, 285, 47, 1, 0, 0, 0, 286, 287, 5, 3, 0, 0, 287, 288, 5, 25, 0, 0, 288, 289, 3, 18, 9, 0, 289, 290, 5, 26, 0, 0, 290, 291, 3, 38, 19, 0, 291, 49, 1, 0, 0, 0, 292, 293, 5, 4, 0, 0, 293, 294, 3, 18, 9, 0, 294, 51, 1, 0, 0, 0, 295, 296, 5, 20, 0, 0, 296, 297, 3, 18, 9, 0, 297, 53, 1, 0, 0, 0, 298, 302, 3, 20, 10, 0, 299, 300, 3, 60, 30, 0, 300, 301, 3, 20, 10, 0, 301, 303, 1, 0, 0, 0, 302, 299, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 55, 1, 0, 0, 0, 306, 307, 7, 1, 0, 0, 307, 57, 1, 0, 0, 0, 308, 309, 7, 2, 0, 0, 309, 59, 1, 0, 0, 0, 310, 311, 7, 3, 0, 0, 311, 61, 1, 0, 0, 0, 32, 65, 72, 84, 86, 92, 96, 105, 113, 118, 126, 133, 135, 138, 145, 149, 153, 164, 171, 177, 180, 185, 189, 200, 205, 214, 224, 235, 249, 255, 264, 268, 304]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Parser/generated/antlrGrammar.interp b/out/production/Parser/generated/antlrGrammar.interp
--- a/out/production/Parser/generated/antlrGrammar.interp	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/out/production/Parser/generated/antlrGrammar.interp	(date 1652265657879)
@@ -115,4 +115,4 @@
 
 
 atn:
-[4, 1, 38, 313, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1, 0, 4, 0, 64, 8, 0, 11, 0, 12, 0, 65, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 73, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 85, 8, 3, 10, 3, 12, 3, 88, 9, 3, 1, 3, 1, 3, 1, 4, 3, 4, 93, 8, 4, 1, 4, 1, 4, 3, 4, 97, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 3, 5, 106, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 112, 8, 5, 10, 5, 12, 5, 115, 9, 5, 1, 5, 1, 5, 3, 5, 119, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 3, 7, 127, 8, 7, 1, 7, 1, 7, 1, 7, 4, 7, 132, 8, 7, 11, 7, 12, 7, 133, 3, 7, 136, 8, 7, 1, 8, 3, 8, 139, 8, 8, 1, 8, 1, 8, 1, 8, 5, 8, 144, 8, 8, 10, 8, 12, 8, 147, 9, 8, 1, 8, 3, 8, 150, 8, 8, 1, 9, 1, 9, 3, 9, 154, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 165, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 172, 8, 11, 1, 11, 1, 11, 4, 11, 176, 8, 11, 11, 11, 12, 11, 177, 1, 11, 3, 11, 181, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 186, 8, 12, 1, 13, 1, 13, 3, 13, 190, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 199, 8, 14, 10, 14, 12, 14, 202, 9, 14, 1, 14, 1, 14, 3, 14, 206, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 3, 16, 215, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 223, 8, 16, 10, 16, 12, 16, 226, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 236, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 250, 8, 18, 1, 19, 1, 19, 5, 19, 254, 8, 19, 10, 19, 12, 19, 257, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 263, 8, 20, 10, 20, 12, 20, 266, 9, 20, 1, 20, 3, 20, 269, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 303, 8, 27, 11, 27, 12, 27, 304, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 0, 0, 31, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 4, 1, 0, 16, 18, 4, 0, 9, 10, 12, 13, 33, 34, 38, 38, 2, 0, 5, 7, 32, 32, 2, 0, 19, 19, 22, 24, 324, 0, 63, 1, 0, 0, 0, 2, 67, 1, 0, 0, 0, 4, 72, 1, 0, 0, 0, 6, 80, 1, 0, 0, 0, 8, 92, 1, 0, 0, 0, 10, 105, 1, 0, 0, 0, 12, 122, 1, 0, 0, 0, 14, 135, 1, 0, 0, 0, 16, 149, 1, 0, 0, 0, 18, 153, 1, 0, 0, 0, 20, 164, 1, 0, 0, 0, 22, 180, 1, 0, 0, 0, 24, 185, 1, 0, 0, 0, 26, 189, 1, 0, 0, 0, 28, 194, 1, 0, 0, 0, 30, 207, 1, 0, 0, 0, 32, 214, 1, 0, 0, 0, 34, 235, 1, 0, 0, 0, 36, 249, 1, 0, 0, 0, 38, 251, 1, 0, 0, 0, 40, 260, 1, 0, 0, 0, 42, 270, 1, 0, 0, 0, 44, 276, 1, 0, 0, 0, 46, 283, 1, 0, 0, 0, 48, 286, 1, 0, 0, 0, 50, 292, 1, 0, 0, 0, 52, 295, 1, 0, 0, 0, 54, 298, 1, 0, 0, 0, 56, 306, 1, 0, 0, 0, 58, 308, 1, 0, 0, 0, 60, 310, 1, 0, 0, 0, 62, 64, 3, 2, 1, 0, 63, 62, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 1, 1, 0, 0, 0, 67, 68, 5, 1, 0, 0, 68, 69, 5, 32, 0, 0, 69, 70, 3, 6, 3, 0, 70, 3, 1, 0, 0, 0, 71, 73, 5, 8, 0, 0, 72, 71, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 74, 1, 0, 0, 0, 74, 75, 5, 32, 0, 0, 75, 76, 5, 25, 0, 0, 76, 77, 3, 14, 7, 0, 77, 78, 5, 26, 0, 0, 78, 79, 3, 38, 19, 0, 79, 5, 1, 0, 0, 0, 80, 86, 5, 27, 0, 0, 81, 85, 3, 8, 4, 0, 82, 85, 3, 10, 5, 0, 83, 85, 3, 4, 2, 0, 84, 81, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 84, 83, 1, 0, 0, 0, 85, 88, 1, 0, 0, 0, 86, 84, 1, 0, 0, 0, 86, 87, 1, 0, 0, 0, 87, 89, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0, 89, 90, 5, 28, 0, 0, 90, 7, 1, 0, 0, 0, 91, 93, 5, 8, 0, 0, 92, 91, 1, 0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 96, 1, 0, 0, 0, 94, 97, 3, 58, 29, 0, 95, 97, 5, 11, 0, 0, 96, 94, 1, 0, 0, 0, 96, 95, 1, 0, 0, 0, 97, 98, 1, 0, 0, 0, 98, 99, 5, 32, 0, 0, 99, 100, 5, 25, 0, 0, 100, 101, 3, 14, 7, 0, 101, 102, 5, 26, 0, 0, 102, 103, 3, 38, 19, 0, 103, 9, 1, 0, 0, 0, 104, 106, 5, 8, 0, 0, 105, 104, 1, 0, 0, 0, 105, 106, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 108, 3, 58, 29, 0, 108, 113, 5, 32, 0, 0, 109, 110, 5, 30, 0, 0, 110, 112, 5, 32, 0, 0, 111, 109, 1, 0, 0, 0, 112, 115, 1, 0, 0, 0, 113, 111, 1, 0, 0, 0, 113, 114, 1, 0, 0, 0, 114, 118, 1, 0, 0, 0, 115, 113, 1, 0, 0, 0, 116, 117, 5, 16, 0, 0, 117, 119, 3, 18, 9, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 120, 1, 0, 0, 0, 120, 121, 5, 31, 0, 0, 121, 11, 1, 0, 0, 0, 122, 123, 3, 58, 29, 0, 123, 124, 5, 32, 0, 0, 124, 13, 1, 0, 0, 0, 125, 127, 3, 12, 6, 0, 126, 125, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 136, 1, 0, 0, 0, 128, 131, 3, 12, 6, 0, 129, 130, 5, 30, 0, 0, 130, 132, 3, 12, 6, 0, 131, 129, 1, 0, 0, 0, 132, 133, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 133, 134, 1, 0, 0, 0, 134, 136, 1, 0, 0, 0, 135, 126, 1, 0, 0, 0, 135, 128, 1, 0, 0, 0, 136, 15, 1, 0, 0, 0, 137, 139, 3, 18, 9, 0, 138, 137, 1, 0, 0, 0, 138, 139, 1, 0, 0, 0, 139, 150, 1, 0, 0, 0, 140, 145, 3, 18, 9, 0, 141, 142, 5, 30, 0, 0, 142, 144, 3, 18, 9, 0, 143, 141, 1, 0, 0, 0, 144, 147, 1, 0, 0, 0, 145, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 150, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 148, 150, 3, 22, 11, 0, 149, 138, 1, 0, 0, 0, 149, 140, 1, 0, 0, 0, 149, 148, 1, 0, 0, 0, 150, 17, 1, 0, 0, 0, 151, 154, 3, 20, 10, 0, 152, 154, 3, 54, 27, 0, 153, 151, 1, 0, 0, 0, 153, 152, 1, 0, 0, 0, 154, 19, 1, 0, 0, 0, 155, 165, 3, 56, 28, 0, 156, 165, 3, 22, 11, 0, 157, 165, 5, 32, 0, 0, 158, 165, 3, 24, 12, 0, 159, 165, 3, 52, 26, 0, 160, 161, 5, 25, 0, 0, 161, 162, 3, 18, 9, 0, 162, 163, 5, 26, 0, 0, 163, 165, 1, 0, 0, 0, 164, 155, 1, 0, 0, 0, 164, 156, 1, 0, 0, 0, 164, 157, 1, 0, 0, 0, 164, 158, 1, 0, 0, 0, 164, 159, 1, 0, 0, 0, 164, 160, 1, 0, 0, 0, 165, 21, 1, 0, 0, 0, 166, 167, 5, 13, 0, 0, 167, 168, 5, 29, 0, 0, 168, 181, 5, 32, 0, 0, 169, 170, 5, 13, 0, 0, 170, 172, 5, 29, 0, 0, 171, 169, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 175, 1, 0, 0, 0, 173, 174, 5, 32, 0, 0, 174, 176, 5, 29, 0, 0, 175, 173, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 1, 0, 0, 0, 179, 181, 5, 32, 0, 0, 180, 166, 1, 0, 0, 0, 180, 171, 1, 0, 0, 0, 181, 23, 1, 0, 0, 0, 182, 186, 3, 26, 13, 0, 183, 186, 3, 30, 15, 0, 184, 186, 3, 32, 16, 0, 185, 182, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 184, 1, 0, 0, 0, 186, 25, 1, 0, 0, 0, 187, 190, 3, 22, 11, 0, 188, 190, 5, 32, 0, 0, 189, 187, 1, 0, 0, 0, 189, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191, 192, 7, 0, 0, 0, 192, 193, 3, 18, 9, 0, 193, 27, 1, 0, 0, 0, 194, 195, 3, 58, 29, 0, 195, 200, 5, 32, 0, 0, 196, 197, 5, 30, 0, 0, 197, 199, 5, 32, 0, 0, 198, 196, 1, 0, 0, 0, 199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 205, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 203, 204, 7, 0, 0, 0, 204, 206, 3, 18, 9, 0, 205, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 29, 1, 0, 0, 0, 207, 208, 5, 2, 0, 0, 208, 209, 5, 32, 0, 0, 209, 210, 5, 25, 0, 0, 210, 211, 3, 16, 8, 0, 211, 212, 5, 26, 0, 0, 212, 31, 1, 0, 0, 0, 213, 215, 3, 34, 17, 0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 224, 1, 0, 0, 0, 216, 217, 5, 32, 0, 0, 217, 218, 5, 25, 0, 0, 218, 219, 3, 16, 8, 0, 219, 220, 5, 26, 0, 0, 220, 221, 5, 29, 0, 0, 221, 223, 1, 0, 0, 0, 222, 216, 1, 0, 0, 0, 223, 226, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 227, 228, 5, 32, 0, 0, 228, 229, 5, 25, 0, 0, 229, 230, 3, 16, 8, 0, 230, 231, 5, 26, 0, 0, 231, 33, 1, 0, 0, 0, 232, 236, 3, 22, 11, 0, 233, 234, 5, 32, 0, 0, 234, 236, 5, 29, 0, 0, 235, 232, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 236, 35, 1, 0, 0, 0, 237, 250, 3, 40, 20, 0, 238, 239, 3, 28, 14, 0, 239, 240, 5, 31, 0, 0, 240, 250, 1, 0, 0, 0, 241, 242, 3, 50, 25, 0, 242, 243, 5, 31, 0, 0, 243, 250, 1, 0, 0, 0, 244, 250, 3, 48, 24, 0, 245, 250, 3, 38, 19, 0, 246, 247, 3, 24, 12, 0, 247, 248, 5, 31, 0, 0, 248, 250, 1, 0, 0, 0, 249, 237, 1, 0, 0, 0, 249, 238, 1, 0, 0, 0, 249, 241, 1, 0, 0, 0, 249, 244, 1, 0, 0, 0, 249, 245, 1, 0, 0, 0, 249, 246, 1, 0, 0, 0, 250, 37, 1, 0, 0, 0, 251, 255, 5, 27, 0, 0, 252, 254, 3, 36, 18, 0, 253, 252, 1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 258, 259, 5, 28, 0, 0, 259, 39, 1, 0, 0, 0, 260, 264, 3, 42, 21, 0, 261, 263, 3, 44, 22, 0, 262, 261, 1, 0, 0, 0, 263, 266, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 267, 269, 3, 46, 23, 0, 268, 267, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 41, 1, 0, 0, 0, 270, 271, 5, 14, 0, 0, 271, 272, 5, 25, 0, 0, 272, 273, 3, 18, 9, 0, 273, 274, 5, 26, 0, 0, 274, 275, 3, 38, 19, 0, 275, 43, 1, 0, 0, 0, 276, 277, 5, 15, 0, 0, 277, 278, 5, 14, 0, 0, 278, 279, 5, 25, 0, 0, 279, 280, 3, 18, 9, 0, 280, 281, 5, 26, 0, 0, 281, 282, 3, 38, 19, 0, 282, 45, 1, 0, 0, 0, 283, 284, 5, 15, 0, 0, 284, 285, 3, 38, 19, 0, 285, 47, 1, 0, 0, 0, 286, 287, 5, 3, 0, 0, 287, 288, 5, 25, 0, 0, 288, 289, 3, 18, 9, 0, 289, 290, 5, 26, 0, 0, 290, 291, 3, 38, 19, 0, 291, 49, 1, 0, 0, 0, 292, 293, 5, 4, 0, 0, 293, 294, 3, 18, 9, 0, 294, 51, 1, 0, 0, 0, 295, 296, 5, 20, 0, 0, 296, 297, 3, 18, 9, 0, 297, 53, 1, 0, 0, 0, 298, 302, 3, 20, 10, 0, 299, 300, 3, 60, 30, 0, 300, 301, 3, 20, 10, 0, 301, 303, 1, 0, 0, 0, 302, 299, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 55, 1, 0, 0, 0, 306, 307, 7, 1, 0, 0, 307, 57, 1, 0, 0, 0, 308, 309, 7, 2, 0, 0, 309, 59, 1, 0, 0, 0, 310, 311, 7, 3, 0, 0, 311, 61, 1, 0, 0, 0, 32, 65, 72, 84, 86, 92, 96, 105, 113, 118, 126, 133, 135, 138, 145, 149, 153, 164, 171, 177, 180, 185, 189, 200, 205, 214, 224, 235, 249, 255, 264, 268, 304]
\ No newline at end of file
+[4, 1, 38, 316, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1, 0, 3, 0, 64, 8, 0, 1, 0, 4, 0, 67, 8, 0, 11, 0, 12, 0, 68, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 76, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 88, 8, 3, 10, 3, 12, 3, 91, 9, 3, 1, 3, 1, 3, 1, 4, 3, 4, 96, 8, 4, 1, 4, 1, 4, 3, 4, 100, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 3, 5, 109, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 115, 8, 5, 10, 5, 12, 5, 118, 9, 5, 1, 5, 1, 5, 3, 5, 122, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 3, 7, 130, 8, 7, 1, 7, 1, 7, 1, 7, 4, 7, 135, 8, 7, 11, 7, 12, 7, 136, 3, 7, 139, 8, 7, 1, 8, 3, 8, 142, 8, 8, 1, 8, 1, 8, 1, 8, 5, 8, 147, 8, 8, 10, 8, 12, 8, 150, 9, 8, 1, 8, 3, 8, 153, 8, 8, 1, 9, 1, 9, 3, 9, 157, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 168, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 175, 8, 11, 1, 11, 1, 11, 4, 11, 179, 8, 11, 11, 11, 12, 11, 180, 1, 11, 3, 11, 184, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 189, 8, 12, 1, 13, 1, 13, 3, 13, 193, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 202, 8, 14, 10, 14, 12, 14, 205, 9, 14, 1, 14, 1, 14, 3, 14, 209, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 3, 16, 218, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 226, 8, 16, 10, 16, 12, 16, 229, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 239, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 253, 8, 18, 1, 19, 1, 19, 5, 19, 257, 8, 19, 10, 19, 12, 19, 260, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 266, 8, 20, 10, 20, 12, 20, 269, 9, 20, 1, 20, 3, 20, 272, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 306, 8, 27, 11, 27, 12, 27, 307, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 0, 0, 31, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 4, 1, 0, 16, 18, 4, 0, 9, 10, 12, 13, 33, 34, 38, 38, 2, 0, 5, 7, 32, 32, 2, 0, 19, 19, 22, 24, 328, 0, 63, 1, 0, 0, 0, 2, 70, 1, 0, 0, 0, 4, 75, 1, 0, 0, 0, 6, 83, 1, 0, 0, 0, 8, 95, 1, 0, 0, 0, 10, 108, 1, 0, 0, 0, 12, 125, 1, 0, 0, 0, 14, 138, 1, 0, 0, 0, 16, 152, 1, 0, 0, 0, 18, 156, 1, 0, 0, 0, 20, 167, 1, 0, 0, 0, 22, 183, 1, 0, 0, 0, 24, 188, 1, 0, 0, 0, 26, 192, 1, 0, 0, 0, 28, 197, 1, 0, 0, 0, 30, 210, 1, 0, 0, 0, 32, 217, 1, 0, 0, 0, 34, 238, 1, 0, 0, 0, 36, 252, 1, 0, 0, 0, 38, 254, 1, 0, 0, 0, 40, 263, 1, 0, 0, 0, 42, 273, 1, 0, 0, 0, 44, 279, 1, 0, 0, 0, 46, 286, 1, 0, 0, 0, 48, 289, 1, 0, 0, 0, 50, 295, 1, 0, 0, 0, 52, 298, 1, 0, 0, 0, 54, 301, 1, 0, 0, 0, 56, 309, 1, 0, 0, 0, 58, 311, 1, 0, 0, 0, 60, 313, 1, 0, 0, 0, 62, 64, 5, 32, 0, 0, 63, 62, 1, 0, 0, 0, 63, 64, 1, 0, 0, 0, 64, 66, 1, 0, 0, 0, 65, 67, 3, 2, 1, 0, 66, 65, 1, 0, 0, 0, 67, 68, 1, 0, 0, 0, 68, 66, 1, 0, 0, 0, 68, 69, 1, 0, 0, 0, 69, 1, 1, 0, 0, 0, 70, 71, 5, 1, 0, 0, 71, 72, 5, 32, 0, 0, 72, 73, 3, 6, 3, 0, 73, 3, 1, 0, 0, 0, 74, 76, 5, 8, 0, 0, 75, 74, 1, 0, 0, 0, 75, 76, 1, 0, 0, 0, 76, 77, 1, 0, 0, 0, 77, 78, 5, 32, 0, 0, 78, 79, 5, 25, 0, 0, 79, 80, 3, 14, 7, 0, 80, 81, 5, 26, 0, 0, 81, 82, 3, 38, 19, 0, 82, 5, 1, 0, 0, 0, 83, 89, 5, 27, 0, 0, 84, 88, 3, 8, 4, 0, 85, 88, 3, 10, 5, 0, 86, 88, 3, 4, 2, 0, 87, 84, 1, 0, 0, 0, 87, 85, 1, 0, 0, 0, 87, 86, 1, 0, 0, 0, 88, 91, 1, 0, 0, 0, 89, 87, 1, 0, 0, 0, 89, 90, 1, 0, 0, 0, 90, 92, 1, 0, 0, 0, 91, 89, 1, 0, 0, 0, 92, 93, 5, 28, 0, 0, 93, 7, 1, 0, 0, 0, 94, 96, 5, 8, 0, 0, 95, 94, 1, 0, 0, 0, 95, 96, 1, 0, 0, 0, 96, 99, 1, 0, 0, 0, 97, 100, 3, 58, 29, 0, 98, 100, 5, 11, 0, 0, 99, 97, 1, 0, 0, 0, 99, 98, 1, 0, 0, 0, 100, 101, 1, 0, 0, 0, 101, 102, 5, 32, 0, 0, 102, 103, 5, 25, 0, 0, 103, 104, 3, 14, 7, 0, 104, 105, 5, 26, 0, 0, 105, 106, 3, 38, 19, 0, 106, 9, 1, 0, 0, 0, 107, 109, 5, 8, 0, 0, 108, 107, 1, 0, 0, 0, 108, 109, 1, 0, 0, 0, 109, 110, 1, 0, 0, 0, 110, 111, 3, 58, 29, 0, 111, 116, 5, 32, 0, 0, 112, 113, 5, 30, 0, 0, 113, 115, 5, 32, 0, 0, 114, 112, 1, 0, 0, 0, 115, 118, 1, 0, 0, 0, 116, 114, 1, 0, 0, 0, 116, 117, 1, 0, 0, 0, 117, 121, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 119, 120, 5, 16, 0, 0, 120, 122, 3, 18, 9, 0, 121, 119, 1, 0, 0, 0, 121, 122, 1, 0, 0, 0, 122, 123, 1, 0, 0, 0, 123, 124, 5, 31, 0, 0, 124, 11, 1, 0, 0, 0, 125, 126, 3, 58, 29, 0, 126, 127, 5, 32, 0, 0, 127, 13, 1, 0, 0, 0, 128, 130, 3, 12, 6, 0, 129, 128, 1, 0, 0, 0, 129, 130, 1, 0, 0, 0, 130, 139, 1, 0, 0, 0, 131, 134, 3, 12, 6, 0, 132, 133, 5, 30, 0, 0, 133, 135, 3, 12, 6, 0, 134, 132, 1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 134, 1, 0, 0, 0, 136, 137, 1, 0, 0, 0, 137, 139, 1, 0, 0, 0, 138, 129, 1, 0, 0, 0, 138, 131, 1, 0, 0, 0, 139, 15, 1, 0, 0, 0, 140, 142, 3, 18, 9, 0, 141, 140, 1, 0, 0, 0, 141, 142, 1, 0, 0, 0, 142, 153, 1, 0, 0, 0, 143, 148, 3, 18, 9, 0, 144, 145, 5, 30, 0, 0, 145, 147, 3, 18, 9, 0, 146, 144, 1, 0, 0, 0, 147, 150, 1, 0, 0, 0, 148, 146, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149, 153, 1, 0, 0, 0, 150, 148, 1, 0, 0, 0, 151, 153, 3, 22, 11, 0, 152, 141, 1, 0, 0, 0, 152, 143, 1, 0, 0, 0, 152, 151, 1, 0, 0, 0, 153, 17, 1, 0, 0, 0, 154, 157, 3, 20, 10, 0, 155, 157, 3, 54, 27, 0, 156, 154, 1, 0, 0, 0, 156, 155, 1, 0, 0, 0, 157, 19, 1, 0, 0, 0, 158, 168, 3, 56, 28, 0, 159, 168, 3, 22, 11, 0, 160, 168, 5, 32, 0, 0, 161, 168, 3, 24, 12, 0, 162, 168, 3, 52, 26, 0, 163, 164, 5, 25, 0, 0, 164, 165, 3, 18, 9, 0, 165, 166, 5, 26, 0, 0, 166, 168, 1, 0, 0, 0, 167, 158, 1, 0, 0, 0, 167, 159, 1, 0, 0, 0, 167, 160, 1, 0, 0, 0, 167, 161, 1, 0, 0, 0, 167, 162, 1, 0, 0, 0, 167, 163, 1, 0, 0, 0, 168, 21, 1, 0, 0, 0, 169, 170, 5, 13, 0, 0, 170, 171, 5, 29, 0, 0, 171, 184, 5, 32, 0, 0, 172, 173, 5, 13, 0, 0, 173, 175, 5, 29, 0, 0, 174, 172, 1, 0, 0, 0, 174, 175, 1, 0, 0, 0, 175, 178, 1, 0, 0, 0, 176, 177, 5, 32, 0, 0, 177, 179, 5, 29, 0, 0, 178, 176, 1, 0, 0, 0, 179, 180, 1, 0, 0, 0, 180, 178, 1, 0, 0, 0, 180, 181, 1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 184, 5, 32, 0, 0, 183, 169, 1, 0, 0, 0, 183, 174, 1, 0, 0, 0, 184, 23, 1, 0, 0, 0, 185, 189, 3, 26, 13, 0, 186, 189, 3, 30, 15, 0, 187, 189, 3, 32, 16, 0, 188, 185, 1, 0, 0, 0, 188, 186, 1, 0, 0, 0, 188, 187, 1, 0, 0, 0, 189, 25, 1, 0, 0, 0, 190, 193, 3, 22, 11, 0, 191, 193, 5, 32, 0, 0, 192, 190, 1, 0, 0, 0, 192, 191, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 195, 7, 0, 0, 0, 195, 196, 3, 18, 9, 0, 196, 27, 1, 0, 0, 0, 197, 198, 3, 58, 29, 0, 198, 203, 5, 32, 0, 0, 199, 200, 5, 30, 0, 0, 200, 202, 5, 32, 0, 0, 201, 199, 1, 0, 0, 0, 202, 205, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 208, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 207, 7, 0, 0, 0, 207, 209, 3, 18, 9, 0, 208, 206, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209, 29, 1, 0, 0, 0, 210, 211, 5, 2, 0, 0, 211, 212, 5, 32, 0, 0, 212, 213, 5, 25, 0, 0, 213, 214, 3, 16, 8, 0, 214, 215, 5, 26, 0, 0, 215, 31, 1, 0, 0, 0, 216, 218, 3, 34, 17, 0, 217, 216, 1, 0, 0, 0, 217, 218, 1, 0, 0, 0, 218, 227, 1, 0, 0, 0, 219, 220, 5, 32, 0, 0, 220, 221, 5, 25, 0, 0, 221, 222, 3, 16, 8, 0, 222, 223, 5, 26, 0, 0, 223, 224, 5, 29, 0, 0, 224, 226, 1, 0, 0, 0, 225, 219, 1, 0, 0, 0, 226, 229, 1, 0, 0, 0, 227, 225, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 230, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 230, 231, 5, 32, 0, 0, 231, 232, 5, 25, 0, 0, 232, 233, 3, 16, 8, 0, 233, 234, 5, 26, 0, 0, 234, 33, 1, 0, 0, 0, 235, 239, 3, 22, 11, 0, 236, 237, 5, 32, 0, 0, 237, 239, 5, 29, 0, 0, 238, 235, 1, 0, 0, 0, 238, 236, 1, 0, 0, 0, 239, 35, 1, 0, 0, 0, 240, 253, 3, 40, 20, 0, 241, 242, 3, 28, 14, 0, 242, 243, 5, 31, 0, 0, 243, 253, 1, 0, 0, 0, 244, 245, 3, 50, 25, 0, 245, 246, 5, 31, 0, 0, 246, 253, 1, 0, 0, 0, 247, 253, 3, 48, 24, 0, 248, 253, 3, 38, 19, 0, 249, 250, 3, 24, 12, 0, 250, 251, 5, 31, 0, 0, 251, 253, 1, 0, 0, 0, 252, 240, 1, 0, 0, 0, 252, 241, 1, 0, 0, 0, 252, 244, 1, 0, 0, 0, 252, 247, 1, 0, 0, 0, 252, 248, 1, 0, 0, 0, 252, 249, 1, 0, 0, 0, 253, 37, 1, 0, 0, 0, 254, 258, 5, 27, 0, 0, 255, 257, 3, 36, 18, 0, 256, 255, 1, 0, 0, 0, 257, 260, 1, 0, 0, 0, 258, 256, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259, 261, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 261, 262, 5, 28, 0, 0, 262, 39, 1, 0, 0, 0, 263, 267, 3, 42, 21, 0, 264, 266, 3, 44, 22, 0, 265, 264, 1, 0, 0, 0, 266, 269, 1, 0, 0, 0, 267, 265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 271, 1, 0, 0, 0, 269, 267, 1, 0, 0, 0, 270, 272, 3, 46, 23, 0, 271, 270, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272, 41, 1, 0, 0, 0, 273, 274, 5, 14, 0, 0, 274, 275, 5, 25, 0, 0, 275, 276, 3, 18, 9, 0, 276, 277, 5, 26, 0, 0, 277, 278, 3, 38, 19, 0, 278, 43, 1, 0, 0, 0, 279, 280, 5, 15, 0, 0, 280, 281, 5, 14, 0, 0, 281, 282, 5, 25, 0, 0, 282, 283, 3, 18, 9, 0, 283, 284, 5, 26, 0, 0, 284, 285, 3, 38, 19, 0, 285, 45, 1, 0, 0, 0, 286, 287, 5, 15, 0, 0, 287, 288, 3, 38, 19, 0, 288, 47, 1, 0, 0, 0, 289, 290, 5, 3, 0, 0, 290, 291, 5, 25, 0, 0, 291, 292, 3, 18, 9, 0, 292, 293, 5, 26, 0, 0, 293, 294, 3, 38, 19, 0, 294, 49, 1, 0, 0, 0, 295, 296, 5, 4, 0, 0, 296, 297, 3, 18, 9, 0, 297, 51, 1, 0, 0, 0, 298, 299, 5, 20, 0, 0, 299, 300, 3, 18, 9, 0, 300, 53, 1, 0, 0, 0, 301, 305, 3, 20, 10, 0, 302, 303, 3, 60, 30, 0, 303, 304, 3, 20, 10, 0, 304, 306, 1, 0, 0, 0, 305, 302, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307, 305, 1, 0, 0, 0, 307, 308, 1, 0, 0, 0, 308, 55, 1, 0, 0, 0, 309, 310, 7, 1, 0, 0, 310, 57, 1, 0, 0, 0, 311, 312, 7, 2, 0, 0, 312, 59, 1, 0, 0, 0, 313, 314, 7, 3, 0, 0, 314, 61, 1, 0, 0, 0, 33, 63, 68, 75, 87, 89, 95, 99, 108, 116, 121, 129, 136, 138, 141, 148, 152, 156, 167, 174, 180, 183, 188, 192, 203, 208, 217, 227, 238, 252, 258, 267, 271, 307]
\ No newline at end of file
Index: .idea/workspace.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ChangeListManager\">\r\n    <list default=\"true\" id=\"ffcb8091-eb45-4ad6-9380-debf4ae64294\" name=\"Default Changelist\" comment=\"Main class edited\">\r\n      <change beforePath=\"$PROJECT_DIR$/../.idea/misc.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../.idea/misc.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/.idea/workspace.xml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/.idea/workspace.xml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Parser/src/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Parser/src/module-info.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Ressources/EmptyClass.java\" beforeDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Tests/Tests.iml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Tests/Tests.iml\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Tests/src/ParserTests/EmptyClass.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Tests/src/ParserTests/EmptyClass.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/Tests/src/module-info.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Tests/src/module-info.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/out/production/Project/com/company/Main.class\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/out/production/Project/com/company/Main.class\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/company/common/Factory/Factory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/company/common/Factory/Factory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/company/common/Factory/IFactory.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/src/com/company/common/Factory/IFactory.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/company/common/SyntaxTreeGenerator/ISyntaxTreeGenerator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Parser/src/SyntaxTreeGenerator/ISyntaxTreeGenerator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/src/com/company/common/SyntaxTreeGenerator/SyntaxTreeGenerator.java\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java\" afterDir=\"false\" />\r\n      <change beforePath=\"$PROJECT_DIR$/../out/production/DataClasses/diagram.uml\" beforeDir=\"false\" afterPath=\"$PROJECT_DIR$/../out/production/DataClasses/diagram.uml\" afterDir=\"false\" />\r\n    </list>\r\n    <option name=\"SHOW_DIALOG\" value=\"false\" />\r\n    <option name=\"HIGHLIGHT_CONFLICTS\" value=\"true\" />\r\n    <option name=\"HIGHLIGHT_NON_ACTIVE_CHANGELIST\" value=\"false\" />\r\n    <option name=\"LAST_RESOLUTION\" value=\"IGNORE\" />\r\n  </component>\r\n  <component name=\"FileTemplateManagerImpl\">\r\n    <option name=\"RECENT_TEMPLATES\">\r\n      <list>\r\n        <option value=\"module-info\" />\r\n        <option value=\"Class\" />\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"Git.Settings\">\r\n    <option name=\"RECENT_GIT_ROOT_PATH\" value=\"$PROJECT_DIR$/..\" />\r\n  </component>\r\n  <component name=\"MarkdownSettingsMigration\">\r\n    <option name=\"stateVersion\" value=\"1\" />\r\n  </component>\r\n  <component name=\"ProjectId\" id=\"28vsGKvKvucAAL3geNhZ8gNIrng\" />\r\n  <component name=\"ProjectLevelVcsManager\" settingsEditedManually=\"true\">\r\n    <ConfirmationsSetting value=\"2\" id=\"Add\" />\r\n  </component>\r\n  <component name=\"ProjectViewState\">\r\n    <option name=\"hideEmptyMiddlePackages\" value=\"true\" />\r\n    <option name=\"showLibraryContents\" value=\"true\" />\r\n  </component>\r\n  <component name=\"PropertiesComponent\">\r\n    <property name=\"ASKED_ADD_EXTERNAL_FILES\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.OpenProjectViewOnStart\" value=\"true\" />\r\n    <property name=\"RunOnceActivity.ShowReadmeOnStart\" value=\"true\" />\r\n    <property name=\"SHARE_PROJECT_CONFIGURATION_FILES\" value=\"true\" />\r\n    <property name=\"last_opened_file_path\" value=\"$PROJECT_DIR$\" />\r\n    <property name=\"project.structure.last.edited\" value=\"Modules\" />\r\n    <property name=\"project.structure.proportion\" value=\"0.19934641\" />\r\n    <property name=\"project.structure.side.proportion\" value=\"0.2\" />\r\n    <property name=\"settings.editor.selected.configurable\" value=\"preferences.lookFeel\" />\r\n  </component>\r\n  <component name=\"RecentsManager\">\r\n    <key name=\"CopyFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Administrator\\Desktop\\JavaCompiler_TINF2020\\Project\\Ressources\" />\r\n      <recent name=\"F:\\User Folder\\Desktop\\JavaCompiler_TINF2020\\Project\\src\\com\\company\" />\r\n    </key>\r\n    <key name=\"MoveFile.RECENT_KEYS\">\r\n      <recent name=\"C:\\Users\\Jona\\IdeaProjects\\JavaCompiler_TINF2020\\Project\\Parser\\src\" />\r\n      <recent name=\"C:\\Users\\Jona\\IdeaProjects\\JavaCompiler_TINF2020\\Project\\Parser\" />\r\n      <recent name=\"C:\\Users\\Administrator\\Desktop\\JavaCompiler_TINF2020\\Project\\Ressources\" />\r\n      <recent name=\"F:\\User Folder\\Desktop\\JavaCompiler_TINF2020\\Project\" />\r\n    </key>\r\n  </component>\r\n  <component name=\"RunManager\" selected=\"JUnit.EmptyClass\">\r\n    <configuration name=\"Main\" type=\"Application\" factoryName=\"Application\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"com.company.Main\" />\r\n      <module name=\"Project\" />\r\n      <option name=\"PROGRAM_PARAMETERS\" value=\"Ressources/EmptyClass.java\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"com.company.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EmptyClass\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Tests\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"ParserTests.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"ParserTests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ParserTests.EmptyClass\" />\r\n      <option name=\"TEST_OBJECT\" value=\"class\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <configuration name=\"EmptyClass.Test\" type=\"JUnit\" factoryName=\"JUnit\" temporary=\"true\" nameIsGenerated=\"true\">\r\n      <module name=\"Tests\" />\r\n      <extension name=\"coverage\">\r\n        <pattern>\r\n          <option name=\"PATTERN\" value=\"ParserTests.*\" />\r\n          <option name=\"ENABLED\" value=\"true\" />\r\n        </pattern>\r\n      </extension>\r\n      <option name=\"PACKAGE_NAME\" value=\"ParserTests\" />\r\n      <option name=\"MAIN_CLASS_NAME\" value=\"ParserTests.EmptyClass\" />\r\n      <option name=\"METHOD_NAME\" value=\"Test\" />\r\n      <option name=\"TEST_OBJECT\" value=\"method\" />\r\n      <method v=\"2\">\r\n        <option name=\"Make\" enabled=\"true\" />\r\n      </method>\r\n    </configuration>\r\n    <recent_temporary>\r\n      <list>\r\n        <item itemvalue=\"JUnit.EmptyClass\" />\r\n        <item itemvalue=\"JUnit.EmptyClass.Test\" />\r\n        <item itemvalue=\"Application.Main\" />\r\n      </list>\r\n    </recent_temporary>\r\n  </component>\r\n  <component name=\"SpellCheckerSettings\" RuntimeDictionaries=\"0\" Folders=\"0\" CustomDictionaries=\"0\" DefaultDictionary=\"application-level\" UseSingleDictionary=\"true\" transferred=\"true\" />\r\n  <component name=\"TaskManager\">\r\n    <task active=\"true\" id=\"Default\" summary=\"Default task\">\r\n      <changelist id=\"ffcb8091-eb45-4ad6-9380-debf4ae64294\" name=\"Default Changelist\" comment=\"\" />\r\n      <created>1652108297266</created>\r\n      <option name=\"number\" value=\"Default\" />\r\n      <option name=\"presentableId\" value=\"Default\" />\r\n      <updated>1652108297266</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00001\" summary=\"Setup parser folder structure and main methode\">\r\n      <created>1652109126816</created>\r\n      <option name=\"number\" value=\"00001\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00001\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652109126816</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00002\" summary=\"Antlr Configuration\">\r\n      <created>1652112691052</created>\r\n      <option name=\"number\" value=\"00002\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00002\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652112691052</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00003\" summary=\"Main class + Base for the Parser/Lexer (Added Program/Class Adapter)\">\r\n      <created>1652118331666</created>\r\n      <option name=\"number\" value=\"00003\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00003\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652118331666</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00004\" summary=\"EmptyClass.java added\">\r\n      <created>1652259310567</created>\r\n      <option name=\"number\" value=\"00004\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00004\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652259310567</updated>\r\n    </task>\r\n    <task id=\"LOCAL-00005\" summary=\"Main class edited\">\r\n      <created>1652259765716</created>\r\n      <option name=\"number\" value=\"00005\" />\r\n      <option name=\"presentableId\" value=\"LOCAL-00005\" />\r\n      <option name=\"project\" value=\"LOCAL\" />\r\n      <updated>1652259765716</updated>\r\n    </task>\r\n    <option name=\"localTasksCounter\" value=\"6\" />\r\n    <servers />\r\n  </component>\r\n  <component name=\"Vcs.Log.Tabs.Properties\">\r\n    <option name=\"TAB_STATES\">\r\n      <map>\r\n        <entry key=\"MAIN\">\r\n          <value>\r\n            <State />\r\n          </value>\r\n        </entry>\r\n      </map>\r\n    </option>\r\n  </component>\r\n  <component name=\"VcsManagerConfiguration\">\r\n    <option name=\"ADD_EXTERNAL_FILES_SILENTLY\" value=\"true\" />\r\n    <MESSAGE value=\"Setup parser folder structure and main methode\" />\r\n    <MESSAGE value=\"Antlr Configuration\" />\r\n    <MESSAGE value=\"Base for the Parser/Lexer (Added Program/Class Adapter)\" />\r\n    <MESSAGE value=\"Main class + Base for the Parser/Lexer (Added Program/Class Adapter)\" />\r\n    <MESSAGE value=\"EmptyClass.java added\" />\r\n    <MESSAGE value=\"Main class edited\" />\r\n    <option name=\"LAST_COMMIT_MESSAGE\" value=\"Main class edited\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/workspace.xml b/.idea/workspace.xml
--- a/.idea/workspace.xml	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/.idea/workspace.xml	(date 1652265651604)
@@ -2,20 +2,60 @@
 <project version="4">
   <component name="ChangeListManager">
     <list default="true" id="ffcb8091-eb45-4ad6-9380-debf4ae64294" name="Default Changelist" comment="Main class edited">
-      <change beforePath="$PROJECT_DIR$/../.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/misc.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/../.idea/workspace.xml" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Parser/src/adapter/FieldAdapter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Parser/src/adapter/MethodeAdapter.java" afterDir="false" />
+      <change afterPath="$PROJECT_DIR$/Ressources/EmptyClass.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/.idea/misc.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/misc.xml" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/.idea/workspace.xml" beforeDir="false" afterPath="$PROJECT_DIR$/.idea/workspace.xml" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Parser/src/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/module-info.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Ressources/EmptyClass.java" beforeDir="false" />
-      <change beforePath="$PROJECT_DIR$/Tests/Tests.iml" beforeDir="false" afterPath="$PROJECT_DIR$/Tests/Tests.iml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/adapter/ClassAdapter.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/adapter/ClassAdapter.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammar.interp" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammar.interp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarBaseListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarBaseListener.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarBaseVisitor.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarBaseVisitor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarLexer.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarLexer.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarListener.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarListener.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarParser.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarParser.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarVisitor.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/generated/antlrGrammarVisitor.java" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/Parser/src/grammar/antlrGrammar.g4" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/grammar/antlrGrammar.g4" afterDir="false" />
       <change beforePath="$PROJECT_DIR$/Tests/src/ParserTests/EmptyClass.java" beforeDir="false" afterPath="$PROJECT_DIR$/Tests/src/ParserTests/EmptyClass.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/Tests/src/module-info.java" beforeDir="false" afterPath="$PROJECT_DIR$/Tests/src/module-info.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/out/production/Project/com/company/Main.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Project/com/company/Main.class" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/company/common/Factory/Factory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/company/common/Factory/Factory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/company/common/Factory/IFactory.java" beforeDir="false" afterPath="$PROJECT_DIR$/src/com/company/common/Factory/IFactory.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/company/common/SyntaxTreeGenerator/ISyntaxTreeGenerator.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/SyntaxTreeGenerator/ISyntaxTreeGenerator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/src/com/company/common/SyntaxTreeGenerator/SyntaxTreeGenerator.java" beforeDir="false" afterPath="$PROJECT_DIR$/Parser/src/SyntaxTreeGenerator/SyntaxTreeGenerator.java" afterDir="false" />
-      <change beforePath="$PROJECT_DIR$/../out/production/DataClasses/diagram.uml" beforeDir="false" afterPath="$PROJECT_DIR$/../out/production/DataClasses/diagram.uml" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/SyntaxTreeGenerator/SyntaxTreeGenerator.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/SyntaxTreeGenerator/SyntaxTreeGenerator.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/adapter/ClassAdapter.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/adapter/ClassAdapter.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammar.interp" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammar.interp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarLexer.interp" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarLexer.interp" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$AssignContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$AssignContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BaseTypeContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BaseTypeContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BasicexpressionsContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BasicexpressionsContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BinaryContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BinaryContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BlockContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$BlockContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ClassBodyContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ClassBodyContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ConstructorContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ConstructorContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ExpressionContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ExpressionContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$FieldDeclarationContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$FieldDeclarationContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$IfelseContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$IfelseContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$InstVarContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$InstVarContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JClassContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JClassContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JElseContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JElseContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JElseIfContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JElseIfContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JIfContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JIfContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JNewContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JNewContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JReturnContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JReturnContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JWhileContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$JWhileContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$LocalVarDeclarationContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$LocalVarDeclarationContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodCallContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodCallContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodCallPrefixContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodCallPrefixContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodDeclarationContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodDeclarationContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodParameterContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$MethodParameterContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$NArgumentsContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$NArgumentsContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$NMethodParametersContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$NMethodParametersContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ObjectTypeContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ObjectTypeContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$OperatorsContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$OperatorsContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ProgrammContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$ProgrammContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$StatementContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$StatementContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$StatementExpressionsContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$StatementExpressionsContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$UnaryContext.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser$UnaryContext.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/generated/antlrGrammarParser.class" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/production/Parser/grammar/antlrGrammar.g4" beforeDir="false" afterPath="$PROJECT_DIR$/out/production/Parser/grammar/antlrGrammar.g4" afterDir="false" />
+      <change beforePath="$PROJECT_DIR$/out/test/Tests/ParserTests/EmptyClass.class" beforeDir="false" afterPath="$PROJECT_DIR$/out/test/Tests/ParserTests/EmptyClass.class" afterDir="false" />
     </list>
     <option name="SHOW_DIALOG" value="false" />
     <option name="HIGHLIGHT_CONFLICTS" value="true" />
@@ -53,7 +93,7 @@
     <property name="project.structure.last.edited" value="Modules" />
     <property name="project.structure.proportion" value="0.19934641" />
     <property name="project.structure.side.proportion" value="0.2" />
-    <property name="settings.editor.selected.configurable" value="preferences.lookFeel" />
+    <property name="settings.editor.selected.configurable" value="preferences.pluginManager" />
   </component>
   <component name="RecentsManager">
     <key name="CopyFile.RECENT_KEYS">
@@ -116,8 +156,8 @@
     <recent_temporary>
       <list>
         <item itemvalue="JUnit.EmptyClass" />
-        <item itemvalue="JUnit.EmptyClass.Test" />
         <item itemvalue="Application.Main" />
+        <item itemvalue="JUnit.EmptyClass.Test" />
       </list>
     </recent_temporary>
   </component>
Index: Parser/src/adapter/MethodeAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/adapter/MethodeAdapter.java b/Parser/src/adapter/MethodeAdapter.java
new file mode 100644
--- /dev/null	(date 1652265417579)
+++ b/Parser/src/adapter/MethodeAdapter.java	(date 1652265417579)
@@ -0,0 +1,21 @@
+package adapter;
+
+import Method.Method;
+import generated.antlrGrammarParser;
+
+public class MethodeAdapter {
+
+    /**
+     *  generates a new Object of the fitting class
+     *
+     * @param ctx Antlr context
+     * @return new Object
+     */
+    public static Method generate(antlrGrammarParser.MethodDeclarationContext ctx) {
+
+
+        return null;
+    }
+
+
+}
Index: Ressources/EmptyClass.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Ressources/EmptyClass.java b/Ressources/EmptyClass.java
new file mode 100644
--- /dev/null	(date 1652264279950)
+++ b/Ressources/EmptyClass.java	(date 1652264279950)
@@ -0,0 +1,2 @@
+class EmptyClass {
+}
Index: Parser/src/adapter/FieldAdapter.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/adapter/FieldAdapter.java b/Parser/src/adapter/FieldAdapter.java
new file mode 100644
--- /dev/null	(date 1652265390902)
+++ b/Parser/src/adapter/FieldAdapter.java	(date 1652265390902)
@@ -0,0 +1,22 @@
+package adapter;
+
+import Field.Field;
+import generated.antlrGrammarParser;
+
+public class FieldAdapter {
+
+    /**
+     *  generates a new Object of the fitting class
+     *
+     * @param ctx Antlr context
+     * @return new Object
+     */
+    public static Field generate(antlrGrammarParser.FieldDeclarationContext ctx) {
+
+
+        return null;
+    }
+
+
+
+}
Index: Parser/src/generated/antlrGrammarParser.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\\antlrGrammar.g4 by ANTLR 4.10.1\r\npackage generated;\r\nimport org.antlr.v4.runtime.atn.*;\r\nimport org.antlr.v4.runtime.dfa.DFA;\r\nimport org.antlr.v4.runtime.*;\r\nimport org.antlr.v4.runtime.misc.*;\r\nimport org.antlr.v4.runtime.tree.*;\r\nimport java.util.List;\r\nimport java.util.Iterator;\r\nimport java.util.ArrayList;\r\n\r\n@SuppressWarnings({\"all\", \"warnings\", \"unchecked\", \"unused\", \"cast\"})\r\npublic class antlrGrammarParser extends Parser {\r\n\tstatic { RuntimeMetaData.checkVersion(\"4.10.1\", RuntimeMetaData.VERSION); }\r\n\r\n\tprotected static final DFA[] _decisionToDFA;\r\n\tprotected static final PredictionContextCache _sharedContextCache =\r\n\t\tnew PredictionContextCache();\r\n\tpublic static final int\r\n\t\tT__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, AccessModifier=8, \r\n\t\tJBoolean=9, JNull=10, Void=11, Super=12, This=13, If=14, Else=15, Equal=16, \r\n\t\tPlusEqual=17, MinusEqual=18, Comperator=19, NotOperator=20, OpBeforeOrAfterIdentifier=21, \r\n\t\tPointOperator=22, AddSubOperator=23, LogicalOperator=24, LBracket=25, \r\n\t\tRBracket=26, CurlyLBracket=27, CurlyRBracket=28, Dot=29, Comma=30, Semicolon=31, \r\n\t\tIdentifier=32, JCharacter=33, JInteger=34, WS=35, Comment=36, LineComment=37, \r\n\t\tJString=38;\r\n\tpublic static final int\r\n\t\tRULE_programm = 0, RULE_jClass = 1, RULE_constructor = 2, RULE_classBody = 3, \r\n\t\tRULE_methodDeclaration = 4, RULE_fieldDeclaration = 5, RULE_methodParameter = 6, \r\n\t\tRULE_nMethodParameters = 7, RULE_nArguments = 8, RULE_expression = 9, \r\n\t\tRULE_basicexpressions = 10, RULE_instVar = 11, RULE_statementExpressions = 12, \r\n\t\tRULE_assign = 13, RULE_localVarDeclaration = 14, RULE_jNew = 15, RULE_methodCall = 16, \r\n\t\tRULE_methodCallPrefix = 17, RULE_statement = 18, RULE_block = 19, RULE_ifelse = 20, \r\n\t\tRULE_jIf = 21, RULE_jElseIf = 22, RULE_jElse = 23, RULE_jWhile = 24, RULE_jReturn = 25, \r\n\t\tRULE_unary = 26, RULE_binary = 27, RULE_baseType = 28, RULE_objectType = 29, \r\n\t\tRULE_operators = 30;\r\n\tprivate static String[] makeRuleNames() {\r\n\t\treturn new String[] {\r\n\t\t\t\"programm\", \"jClass\", \"constructor\", \"classBody\", \"methodDeclaration\", \r\n\t\t\t\"fieldDeclaration\", \"methodParameter\", \"nMethodParameters\", \"nArguments\", \r\n\t\t\t\"expression\", \"basicexpressions\", \"instVar\", \"statementExpressions\", \r\n\t\t\t\"assign\", \"localVarDeclaration\", \"jNew\", \"methodCall\", \"methodCallPrefix\", \r\n\t\t\t\"statement\", \"block\", \"ifelse\", \"jIf\", \"jElseIf\", \"jElse\", \"jWhile\", \r\n\t\t\t\"jReturn\", \"unary\", \"binary\", \"baseType\", \"objectType\", \"operators\"\r\n\t\t};\r\n\t}\r\n\tpublic static final String[] ruleNames = makeRuleNames();\r\n\r\n\tprivate static String[] makeLiteralNames() {\r\n\t\treturn new String[] {\r\n\t\t\tnull, \"'class'\", \"'new'\", \"'while'\", \"'return'\", \"'int'\", \"'char'\", \"'boolean'\", \r\n\t\t\tnull, null, \"'null'\", \"'void'\", \"'super'\", \"'this'\", \"'if'\", \"'else'\", \r\n\t\t\t\"'='\", \"'+='\", \"'-='\", null, \"'!'\", null, null, null, null, \"'('\", \"')'\", \r\n\t\t\t\"'{'\", \"'}'\", \"'.'\", \"','\", \"';'\"\r\n\t\t};\r\n\t}\r\n\tprivate static final String[] _LITERAL_NAMES = makeLiteralNames();\r\n\tprivate static String[] makeSymbolicNames() {\r\n\t\treturn new String[] {\r\n\t\t\tnull, null, null, null, null, null, null, null, \"AccessModifier\", \"JBoolean\", \r\n\t\t\t\"JNull\", \"Void\", \"Super\", \"This\", \"If\", \"Else\", \"Equal\", \"PlusEqual\", \r\n\t\t\t\"MinusEqual\", \"Comperator\", \"NotOperator\", \"OpBeforeOrAfterIdentifier\", \r\n\t\t\t\"PointOperator\", \"AddSubOperator\", \"LogicalOperator\", \"LBracket\", \"RBracket\", \r\n\t\t\t\"CurlyLBracket\", \"CurlyRBracket\", \"Dot\", \"Comma\", \"Semicolon\", \"Identifier\", \r\n\t\t\t\"JCharacter\", \"JInteger\", \"WS\", \"Comment\", \"LineComment\", \"JString\"\r\n\t\t};\r\n\t}\r\n\tprivate static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();\r\n\tpublic static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);\r\n\r\n\t/**\r\n\t * @deprecated Use {@link #VOCABULARY} instead.\r\n\t */\r\n\t@Deprecated\r\n\tpublic static final String[] tokenNames;\r\n\tstatic {\r\n\t\ttokenNames = new String[_SYMBOLIC_NAMES.length];\r\n\t\tfor (int i = 0; i < tokenNames.length; i++) {\r\n\t\t\ttokenNames[i] = VOCABULARY.getLiteralName(i);\r\n\t\t\tif (tokenNames[i] == null) {\r\n\t\t\t\ttokenNames[i] = VOCABULARY.getSymbolicName(i);\r\n\t\t\t}\r\n\r\n\t\t\tif (tokenNames[i] == null) {\r\n\t\t\t\ttokenNames[i] = \"<INVALID>\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\t@Deprecated\r\n\tpublic String[] getTokenNames() {\r\n\t\treturn tokenNames;\r\n\t}\r\n\r\n\t@Override\r\n\r\n\tpublic Vocabulary getVocabulary() {\r\n\t\treturn VOCABULARY;\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String getGrammarFileName() { return \"antlrGrammar.g4\"; }\r\n\r\n\t@Override\r\n\tpublic String[] getRuleNames() { return ruleNames; }\r\n\r\n\t@Override\r\n\tpublic String getSerializedATN() { return _serializedATN; }\r\n\r\n\t@Override\r\n\tpublic ATN getATN() { return _ATN; }\r\n\r\n\tpublic antlrGrammarParser(TokenStream input) {\r\n\t\tsuper(input);\r\n\t\t_interp = new ParserATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);\r\n\t}\r\n\r\n\tpublic static class ProgrammContext extends ParserRuleContext {\r\n\t\tpublic List<JClassContext> jClass() {\r\n\t\t\treturn getRuleContexts(JClassContext.class);\r\n\t\t}\r\n\t\tpublic JClassContext jClass(int i) {\r\n\t\t\treturn getRuleContext(JClassContext.class,i);\r\n\t\t}\r\n\t\tpublic ProgrammContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_programm; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterProgramm(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitProgramm(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitProgramm(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final ProgrammContext programm() throws RecognitionException {\r\n\t\tProgrammContext _localctx = new ProgrammContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 0, RULE_programm);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(63); \r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tdo {\r\n\t\t\t\t{\r\n\t\t\t\t{\r\n\t\t\t\tsetState(62);\r\n\t\t\t\tjClass();\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetState(65); \r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t} while ( _la==T__0 );\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JClassContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic ClassBodyContext classBody() {\r\n\t\t\treturn getRuleContext(ClassBodyContext.class,0);\r\n\t\t}\r\n\t\tpublic JClassContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jClass; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJClass(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJClass(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJClass(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JClassContext jClass() throws RecognitionException {\r\n\t\tJClassContext _localctx = new JClassContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 2, RULE_jClass);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(67);\r\n\t\t\tmatch(T__0);\r\n\t\t\tsetState(68);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(69);\r\n\t\t\tclassBody();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class ConstructorContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic NMethodParametersContext nMethodParameters() {\r\n\t\t\treturn getRuleContext(NMethodParametersContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode AccessModifier() { return getToken(antlrGrammarParser.AccessModifier, 0); }\r\n\t\tpublic ConstructorContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_constructor; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterConstructor(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitConstructor(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitConstructor(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final ConstructorContext constructor() throws RecognitionException {\r\n\t\tConstructorContext _localctx = new ConstructorContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 4, RULE_constructor);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(72);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif (_la==AccessModifier) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(71);\r\n\t\t\t\tmatch(AccessModifier);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsetState(74);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(75);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(76);\r\n\t\t\tnMethodParameters();\r\n\t\t\tsetState(77);\r\n\t\t\tmatch(RBracket);\r\n\t\t\tsetState(78);\r\n\t\t\tblock();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class ClassBodyContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode CurlyLBracket() { return getToken(antlrGrammarParser.CurlyLBracket, 0); }\r\n\t\tpublic TerminalNode CurlyRBracket() { return getToken(antlrGrammarParser.CurlyRBracket, 0); }\r\n\t\tpublic List<MethodDeclarationContext> methodDeclaration() {\r\n\t\t\treturn getRuleContexts(MethodDeclarationContext.class);\r\n\t\t}\r\n\t\tpublic MethodDeclarationContext methodDeclaration(int i) {\r\n\t\t\treturn getRuleContext(MethodDeclarationContext.class,i);\r\n\t\t}\r\n\t\tpublic List<FieldDeclarationContext> fieldDeclaration() {\r\n\t\t\treturn getRuleContexts(FieldDeclarationContext.class);\r\n\t\t}\r\n\t\tpublic FieldDeclarationContext fieldDeclaration(int i) {\r\n\t\t\treturn getRuleContext(FieldDeclarationContext.class,i);\r\n\t\t}\r\n\t\tpublic List<ConstructorContext> constructor() {\r\n\t\t\treturn getRuleContexts(ConstructorContext.class);\r\n\t\t}\r\n\t\tpublic ConstructorContext constructor(int i) {\r\n\t\t\treturn getRuleContext(ConstructorContext.class,i);\r\n\t\t}\r\n\t\tpublic ClassBodyContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_classBody; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterClassBody(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitClassBody(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitClassBody(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final ClassBodyContext classBody() throws RecognitionException {\r\n\t\tClassBodyContext _localctx = new ClassBodyContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 6, RULE_classBody);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(80);\r\n\t\t\tmatch(CurlyLBracket);\r\n\t\t\tsetState(86);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\twhile ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << AccessModifier) | (1L << Void) | (1L << Identifier))) != 0)) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(84);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\tswitch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(81);\r\n\t\t\t\t\tmethodDeclaration();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(82);\r\n\t\t\t\t\tfieldDeclaration();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(83);\r\n\t\t\t\t\tconstructor();\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetState(88);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t}\r\n\t\t\tsetState(89);\r\n\t\t\tmatch(CurlyRBracket);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class MethodDeclarationContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic NMethodParametersContext nMethodParameters() {\r\n\t\t\treturn getRuleContext(NMethodParametersContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic ObjectTypeContext objectType() {\r\n\t\t\treturn getRuleContext(ObjectTypeContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Void() { return getToken(antlrGrammarParser.Void, 0); }\r\n\t\tpublic TerminalNode AccessModifier() { return getToken(antlrGrammarParser.AccessModifier, 0); }\r\n\t\tpublic MethodDeclarationContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_methodDeclaration; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterMethodDeclaration(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitMethodDeclaration(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitMethodDeclaration(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final MethodDeclarationContext methodDeclaration() throws RecognitionException {\r\n\t\tMethodDeclarationContext _localctx = new MethodDeclarationContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 8, RULE_methodDeclaration);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(92);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif (_la==AccessModifier) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(91);\r\n\t\t\t\tmatch(AccessModifier);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsetState(96);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch (_input.LA(1)) {\r\n\t\t\tcase T__4:\r\n\t\t\tcase T__5:\r\n\t\t\tcase T__6:\r\n\t\t\tcase Identifier:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(94);\r\n\t\t\t\tobjectType();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase Void:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(95);\r\n\t\t\t\tmatch(Void);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tdefault:\r\n\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t}\r\n\t\t\tsetState(98);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(99);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(100);\r\n\t\t\tnMethodParameters();\r\n\t\t\tsetState(101);\r\n\t\t\tmatch(RBracket);\r\n\t\t\tsetState(102);\r\n\t\t\tblock();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class FieldDeclarationContext extends ParserRuleContext {\r\n\t\tpublic ObjectTypeContext objectType() {\r\n\t\t\treturn getRuleContext(ObjectTypeContext.class,0);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Identifier() { return getTokens(antlrGrammarParser.Identifier); }\r\n\t\tpublic TerminalNode Identifier(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Identifier, i);\r\n\t\t}\r\n\t\tpublic TerminalNode Semicolon() { return getToken(antlrGrammarParser.Semicolon, 0); }\r\n\t\tpublic TerminalNode AccessModifier() { return getToken(antlrGrammarParser.AccessModifier, 0); }\r\n\t\tpublic List<TerminalNode> Comma() { return getTokens(antlrGrammarParser.Comma); }\r\n\t\tpublic TerminalNode Comma(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Comma, i);\r\n\t\t}\r\n\t\tpublic TerminalNode Equal() { return getToken(antlrGrammarParser.Equal, 0); }\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic FieldDeclarationContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_fieldDeclaration; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterFieldDeclaration(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitFieldDeclaration(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitFieldDeclaration(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final FieldDeclarationContext fieldDeclaration() throws RecognitionException {\r\n\t\tFieldDeclarationContext _localctx = new FieldDeclarationContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 10, RULE_fieldDeclaration);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(105);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif (_la==AccessModifier) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(104);\r\n\t\t\t\tmatch(AccessModifier);\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsetState(107);\r\n\t\t\tobjectType();\r\n\t\t\tsetState(108);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(113);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\twhile (_la==Comma) {\r\n\t\t\t\t{\r\n\t\t\t\t{\r\n\t\t\t\tsetState(109);\r\n\t\t\t\tmatch(Comma);\r\n\t\t\t\tsetState(110);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetState(115);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t}\r\n\t\t\tsetState(118);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif (_la==Equal) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(116);\r\n\t\t\t\tmatch(Equal);\r\n\t\t\t\tsetState(117);\r\n\t\t\t\texpression();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\tsetState(120);\r\n\t\t\tmatch(Semicolon);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class MethodParameterContext extends ParserRuleContext {\r\n\t\tpublic ObjectTypeContext objectType() {\r\n\t\t\treturn getRuleContext(ObjectTypeContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic MethodParameterContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_methodParameter; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterMethodParameter(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitMethodParameter(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitMethodParameter(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final MethodParameterContext methodParameter() throws RecognitionException {\r\n\t\tMethodParameterContext _localctx = new MethodParameterContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 12, RULE_methodParameter);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(122);\r\n\t\t\tobjectType();\r\n\t\t\tsetState(123);\r\n\t\t\tmatch(Identifier);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class NMethodParametersContext extends ParserRuleContext {\r\n\t\tpublic List<MethodParameterContext> methodParameter() {\r\n\t\t\treturn getRuleContexts(MethodParameterContext.class);\r\n\t\t}\r\n\t\tpublic MethodParameterContext methodParameter(int i) {\r\n\t\t\treturn getRuleContext(MethodParameterContext.class,i);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Comma() { return getTokens(antlrGrammarParser.Comma); }\r\n\t\tpublic TerminalNode Comma(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Comma, i);\r\n\t\t}\r\n\t\tpublic NMethodParametersContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_nMethodParameters; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterNMethodParameters(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitNMethodParameters(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitNMethodParameters(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final NMethodParametersContext nMethodParameters() throws RecognitionException {\r\n\t\tNMethodParametersContext _localctx = new NMethodParametersContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 14, RULE_nMethodParameters);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tsetState(135);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(126);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\tif ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Identifier))) != 0)) {\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(125);\r\n\t\t\t\t\tmethodParameter();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(128);\r\n\t\t\t\tmethodParameter();\r\n\t\t\t\tsetState(131); \r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\tdo {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(129);\r\n\t\t\t\t\tmatch(Comma);\r\n\t\t\t\t\tsetState(130);\r\n\t\t\t\t\tmethodParameter();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetState(133); \r\n\t\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\t} while ( _la==Comma );\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class NArgumentsContext extends ParserRuleContext {\r\n\t\tpublic List<ExpressionContext> expression() {\r\n\t\t\treturn getRuleContexts(ExpressionContext.class);\r\n\t\t}\r\n\t\tpublic ExpressionContext expression(int i) {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,i);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Comma() { return getTokens(antlrGrammarParser.Comma); }\r\n\t\tpublic TerminalNode Comma(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Comma, i);\r\n\t\t}\r\n\t\tpublic InstVarContext instVar() {\r\n\t\t\treturn getRuleContext(InstVarContext.class,0);\r\n\t\t}\r\n\t\tpublic NArgumentsContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_nArguments; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterNArguments(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitNArguments(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitNArguments(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final NArgumentsContext nArguments() throws RecognitionException {\r\n\t\tNArgumentsContext _localctx = new NArgumentsContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 16, RULE_nArguments);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tsetState(149);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(138);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\tif ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << JBoolean) | (1L << JNull) | (1L << Super) | (1L << This) | (1L << NotOperator) | (1L << LBracket) | (1L << Identifier) | (1L << JCharacter) | (1L << JInteger) | (1L << JString))) != 0)) {\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(137);\r\n\t\t\t\t\texpression();\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(140);\r\n\t\t\t\texpression();\r\n\t\t\t\tsetState(145);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\twhile (_la==Comma) {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(141);\r\n\t\t\t\t\tmatch(Comma);\r\n\t\t\t\t\tsetState(142);\r\n\t\t\t\t\texpression();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetState(147);\r\n\t\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tenterOuterAlt(_localctx, 3);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(148);\r\n\t\t\t\tinstVar();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class ExpressionContext extends ParserRuleContext {\r\n\t\tpublic BasicexpressionsContext basicexpressions() {\r\n\t\t\treturn getRuleContext(BasicexpressionsContext.class,0);\r\n\t\t}\r\n\t\tpublic BinaryContext binary() {\r\n\t\t\treturn getRuleContext(BinaryContext.class,0);\r\n\t\t}\r\n\t\tpublic ExpressionContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_expression; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterExpression(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitExpression(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitExpression(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final ExpressionContext expression() throws RecognitionException {\r\n\t\tExpressionContext _localctx = new ExpressionContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 18, RULE_expression);\r\n\t\ttry {\r\n\t\t\tsetState(153);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(151);\r\n\t\t\t\tbasicexpressions();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(152);\r\n\t\t\t\tbinary();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class BasicexpressionsContext extends ParserRuleContext {\r\n\t\tpublic BaseTypeContext baseType() {\r\n\t\t\treturn getRuleContext(BaseTypeContext.class,0);\r\n\t\t}\r\n\t\tpublic InstVarContext instVar() {\r\n\t\t\treturn getRuleContext(InstVarContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic StatementExpressionsContext statementExpressions() {\r\n\t\t\treturn getRuleContext(StatementExpressionsContext.class,0);\r\n\t\t}\r\n\t\tpublic UnaryContext unary() {\r\n\t\t\treturn getRuleContext(UnaryContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic BasicexpressionsContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_basicexpressions; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterBasicexpressions(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitBasicexpressions(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitBasicexpressions(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final BasicexpressionsContext basicexpressions() throws RecognitionException {\r\n\t\tBasicexpressionsContext _localctx = new BasicexpressionsContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 20, RULE_basicexpressions);\r\n\t\ttry {\r\n\t\t\tsetState(164);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(155);\r\n\t\t\t\tbaseType();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(156);\r\n\t\t\t\tinstVar();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tenterOuterAlt(_localctx, 3);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(157);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tenterOuterAlt(_localctx, 4);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(158);\r\n\t\t\t\tstatementExpressions();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tenterOuterAlt(_localctx, 5);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(159);\r\n\t\t\t\tunary();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tenterOuterAlt(_localctx, 6);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(160);\r\n\t\t\t\tmatch(LBracket);\r\n\t\t\t\tsetState(161);\r\n\t\t\t\texpression();\r\n\t\t\t\tsetState(162);\r\n\t\t\t\tmatch(RBracket);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class InstVarContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode This() { return getToken(antlrGrammarParser.This, 0); }\r\n\t\tpublic List<TerminalNode> Dot() { return getTokens(antlrGrammarParser.Dot); }\r\n\t\tpublic TerminalNode Dot(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Dot, i);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Identifier() { return getTokens(antlrGrammarParser.Identifier); }\r\n\t\tpublic TerminalNode Identifier(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Identifier, i);\r\n\t\t}\r\n\t\tpublic InstVarContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_instVar; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterInstVar(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitInstVar(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitInstVar(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final InstVarContext instVar() throws RecognitionException {\r\n\t\tInstVarContext _localctx = new InstVarContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 22, RULE_instVar);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tint _alt;\r\n\t\t\tsetState(180);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(166);\r\n\t\t\t\tmatch(This);\r\n\t\t\t\tsetState(167);\r\n\t\t\t\tmatch(Dot);\r\n\t\t\t\tsetState(168);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(171);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\tif (_la==This) {\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(169);\r\n\t\t\t\t\tmatch(This);\r\n\t\t\t\t\tsetState(170);\r\n\t\t\t\t\tmatch(Dot);\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\r\n\t\t\t\tsetState(175); \r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_alt = 1;\r\n\t\t\t\tdo {\r\n\t\t\t\t\tswitch (_alt) {\r\n\t\t\t\t\tcase 1:\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\t{\r\n\t\t\t\t\t\tsetState(173);\r\n\t\t\t\t\t\tmatch(Identifier);\r\n\t\t\t\t\t\tsetState(174);\r\n\t\t\t\t\t\tmatch(Dot);\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\t}\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t\t\t}\r\n\t\t\t\t\tsetState(177); \r\n\t\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,18,_ctx);\r\n\t\t\t\t} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\r\n\t\t\t\tsetState(179);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class StatementExpressionsContext extends ParserRuleContext {\r\n\t\tpublic AssignContext assign() {\r\n\t\t\treturn getRuleContext(AssignContext.class,0);\r\n\t\t}\r\n\t\tpublic JNewContext jNew() {\r\n\t\t\treturn getRuleContext(JNewContext.class,0);\r\n\t\t}\r\n\t\tpublic MethodCallContext methodCall() {\r\n\t\t\treturn getRuleContext(MethodCallContext.class,0);\r\n\t\t}\r\n\t\tpublic StatementExpressionsContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_statementExpressions; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterStatementExpressions(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitStatementExpressions(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitStatementExpressions(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final StatementExpressionsContext statementExpressions() throws RecognitionException {\r\n\t\tStatementExpressionsContext _localctx = new StatementExpressionsContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 24, RULE_statementExpressions);\r\n\t\ttry {\r\n\t\t\tsetState(185);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(182);\r\n\t\t\t\tassign();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(183);\r\n\t\t\t\tjNew();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tenterOuterAlt(_localctx, 3);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(184);\r\n\t\t\t\tmethodCall();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class AssignContext extends ParserRuleContext {\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Equal() { return getToken(antlrGrammarParser.Equal, 0); }\r\n\t\tpublic TerminalNode PlusEqual() { return getToken(antlrGrammarParser.PlusEqual, 0); }\r\n\t\tpublic TerminalNode MinusEqual() { return getToken(antlrGrammarParser.MinusEqual, 0); }\r\n\t\tpublic InstVarContext instVar() {\r\n\t\t\treturn getRuleContext(InstVarContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic AssignContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_assign; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterAssign(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitAssign(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitAssign(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final AssignContext assign() throws RecognitionException {\r\n\t\tAssignContext _localctx = new AssignContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 26, RULE_assign);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(189);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(187);\r\n\t\t\t\tinstVar();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(188);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tsetState(191);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << PlusEqual) | (1L << MinusEqual))) != 0)) ) {\r\n\t\t\t_errHandler.recoverInline(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ( _input.LA(1)==Token.EOF ) matchedEOF = true;\r\n\t\t\t\t_errHandler.reportMatch(this);\r\n\t\t\t\tconsume();\r\n\t\t\t}\r\n\t\t\tsetState(192);\r\n\t\t\texpression();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class LocalVarDeclarationContext extends ParserRuleContext {\r\n\t\tpublic ObjectTypeContext objectType() {\r\n\t\t\treturn getRuleContext(ObjectTypeContext.class,0);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Identifier() { return getTokens(antlrGrammarParser.Identifier); }\r\n\t\tpublic TerminalNode Identifier(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Identifier, i);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Comma() { return getTokens(antlrGrammarParser.Comma); }\r\n\t\tpublic TerminalNode Comma(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Comma, i);\r\n\t\t}\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Equal() { return getToken(antlrGrammarParser.Equal, 0); }\r\n\t\tpublic TerminalNode PlusEqual() { return getToken(antlrGrammarParser.PlusEqual, 0); }\r\n\t\tpublic TerminalNode MinusEqual() { return getToken(antlrGrammarParser.MinusEqual, 0); }\r\n\t\tpublic LocalVarDeclarationContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_localVarDeclaration; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterLocalVarDeclaration(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitLocalVarDeclaration(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitLocalVarDeclaration(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final LocalVarDeclarationContext localVarDeclaration() throws RecognitionException {\r\n\t\tLocalVarDeclarationContext _localctx = new LocalVarDeclarationContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 28, RULE_localVarDeclaration);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(194);\r\n\t\t\tobjectType();\r\n\t\t\tsetState(195);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(200);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\twhile (_la==Comma) {\r\n\t\t\t\t{\r\n\t\t\t\t{\r\n\t\t\t\tsetState(196);\r\n\t\t\t\tmatch(Comma);\r\n\t\t\t\tsetState(197);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetState(202);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t}\r\n\t\t\tsetState(205);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << PlusEqual) | (1L << MinusEqual))) != 0)) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(203);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t\tif ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << PlusEqual) | (1L << MinusEqual))) != 0)) ) {\r\n\t\t\t\t_errHandler.recoverInline(this);\r\n\t\t\t\t}\r\n\t\t\t\telse {\r\n\t\t\t\t\tif ( _input.LA(1)==Token.EOF ) matchedEOF = true;\r\n\t\t\t\t\t_errHandler.reportMatch(this);\r\n\t\t\t\t\tconsume();\r\n\t\t\t\t}\r\n\t\t\t\tsetState(204);\r\n\t\t\t\texpression();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JNewContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic NArgumentsContext nArguments() {\r\n\t\t\treturn getRuleContext(NArgumentsContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic JNewContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jNew; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJNew(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJNew(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJNew(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JNewContext jNew() throws RecognitionException {\r\n\t\tJNewContext _localctx = new JNewContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 30, RULE_jNew);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(207);\r\n\t\t\tmatch(T__1);\r\n\t\t\tsetState(208);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(209);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(210);\r\n\t\t\tnArguments();\r\n\t\t\tsetState(211);\r\n\t\t\tmatch(RBracket);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class MethodCallContext extends ParserRuleContext {\r\n\t\tpublic List<TerminalNode> Identifier() { return getTokens(antlrGrammarParser.Identifier); }\r\n\t\tpublic TerminalNode Identifier(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Identifier, i);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> LBracket() { return getTokens(antlrGrammarParser.LBracket); }\r\n\t\tpublic TerminalNode LBracket(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.LBracket, i);\r\n\t\t}\r\n\t\tpublic List<NArgumentsContext> nArguments() {\r\n\t\t\treturn getRuleContexts(NArgumentsContext.class);\r\n\t\t}\r\n\t\tpublic NArgumentsContext nArguments(int i) {\r\n\t\t\treturn getRuleContext(NArgumentsContext.class,i);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> RBracket() { return getTokens(antlrGrammarParser.RBracket); }\r\n\t\tpublic TerminalNode RBracket(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.RBracket, i);\r\n\t\t}\r\n\t\tpublic MethodCallPrefixContext methodCallPrefix() {\r\n\t\t\treturn getRuleContext(MethodCallPrefixContext.class,0);\r\n\t\t}\r\n\t\tpublic List<TerminalNode> Dot() { return getTokens(antlrGrammarParser.Dot); }\r\n\t\tpublic TerminalNode Dot(int i) {\r\n\t\t\treturn getToken(antlrGrammarParser.Dot, i);\r\n\t\t}\r\n\t\tpublic MethodCallContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_methodCall; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterMethodCall(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitMethodCall(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitMethodCall(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final MethodCallContext methodCall() throws RecognitionException {\r\n\t\tMethodCallContext _localctx = new MethodCallContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 32, RULE_methodCall);\r\n\t\ttry {\r\n\t\t\tint _alt;\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(214);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(213);\r\n\t\t\t\tmethodCallPrefix();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\tsetState(224);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,25,_ctx);\r\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\r\n\t\t\t\tif ( _alt==1 ) {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(216);\r\n\t\t\t\t\tmatch(Identifier);\r\n\t\t\t\t\tsetState(217);\r\n\t\t\t\t\tmatch(LBracket);\r\n\t\t\t\t\tsetState(218);\r\n\t\t\t\t\tnArguments();\r\n\t\t\t\t\tsetState(219);\r\n\t\t\t\t\tmatch(RBracket);\r\n\t\t\t\t\tsetState(220);\r\n\t\t\t\t\tmatch(Dot);\r\n\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tsetState(226);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,25,_ctx);\r\n\t\t\t}\r\n\t\t\t{\r\n\t\t\tsetState(227);\r\n\t\t\tmatch(Identifier);\r\n\t\t\tsetState(228);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(229);\r\n\t\t\tnArguments();\r\n\t\t\tsetState(230);\r\n\t\t\tmatch(RBracket);\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class MethodCallPrefixContext extends ParserRuleContext {\r\n\t\tpublic InstVarContext instVar() {\r\n\t\t\treturn getRuleContext(InstVarContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic TerminalNode Dot() { return getToken(antlrGrammarParser.Dot, 0); }\r\n\t\tpublic MethodCallPrefixContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_methodCallPrefix; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterMethodCallPrefix(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitMethodCallPrefix(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitMethodCallPrefix(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final MethodCallPrefixContext methodCallPrefix() throws RecognitionException {\r\n\t\tMethodCallPrefixContext _localctx = new MethodCallPrefixContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 34, RULE_methodCallPrefix);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(235);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(232);\r\n\t\t\t\tinstVar();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\t{\r\n\t\t\t\tsetState(233);\r\n\t\t\t\tmatch(Identifier);\r\n\t\t\t\tsetState(234);\r\n\t\t\t\tmatch(Dot);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class StatementContext extends ParserRuleContext {\r\n\t\tpublic IfelseContext ifelse() {\r\n\t\t\treturn getRuleContext(IfelseContext.class,0);\r\n\t\t}\r\n\t\tpublic LocalVarDeclarationContext localVarDeclaration() {\r\n\t\t\treturn getRuleContext(LocalVarDeclarationContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode Semicolon() { return getToken(antlrGrammarParser.Semicolon, 0); }\r\n\t\tpublic JReturnContext jReturn() {\r\n\t\t\treturn getRuleContext(JReturnContext.class,0);\r\n\t\t}\r\n\t\tpublic JWhileContext jWhile() {\r\n\t\t\treturn getRuleContext(JWhileContext.class,0);\r\n\t\t}\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic StatementExpressionsContext statementExpressions() {\r\n\t\t\treturn getRuleContext(StatementExpressionsContext.class,0);\r\n\t\t}\r\n\t\tpublic StatementContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_statement; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterStatement(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitStatement(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitStatement(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final StatementContext statement() throws RecognitionException {\r\n\t\tStatementContext _localctx = new StatementContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 36, RULE_statement);\r\n\t\ttry {\r\n\t\t\tsetState(249);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\tswitch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {\r\n\t\t\tcase 1:\r\n\t\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(237);\r\n\t\t\t\tifelse();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 2:\r\n\t\t\t\tenterOuterAlt(_localctx, 2);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(238);\r\n\t\t\t\tlocalVarDeclaration();\r\n\t\t\t\tsetState(239);\r\n\t\t\t\tmatch(Semicolon);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 3:\r\n\t\t\t\tenterOuterAlt(_localctx, 3);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(241);\r\n\t\t\t\tjReturn();\r\n\t\t\t\tsetState(242);\r\n\t\t\t\tmatch(Semicolon);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 4:\r\n\t\t\t\tenterOuterAlt(_localctx, 4);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(244);\r\n\t\t\t\tjWhile();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 5:\r\n\t\t\t\tenterOuterAlt(_localctx, 5);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(245);\r\n\t\t\t\tblock();\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\tcase 6:\r\n\t\t\t\tenterOuterAlt(_localctx, 6);\r\n\t\t\t\t{\r\n\t\t\t\tsetState(246);\r\n\t\t\t\tstatementExpressions();\r\n\t\t\t\tsetState(247);\r\n\t\t\t\tmatch(Semicolon);\r\n\t\t\t\t}\r\n\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class BlockContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode CurlyLBracket() { return getToken(antlrGrammarParser.CurlyLBracket, 0); }\r\n\t\tpublic TerminalNode CurlyRBracket() { return getToken(antlrGrammarParser.CurlyRBracket, 0); }\r\n\t\tpublic List<StatementContext> statement() {\r\n\t\t\treturn getRuleContexts(StatementContext.class);\r\n\t\t}\r\n\t\tpublic StatementContext statement(int i) {\r\n\t\t\treturn getRuleContext(StatementContext.class,i);\r\n\t\t}\r\n\t\tpublic BlockContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_block; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterBlock(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitBlock(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitBlock(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final BlockContext block() throws RecognitionException {\r\n\t\tBlockContext _localctx = new BlockContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 38, RULE_block);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(251);\r\n\t\t\tmatch(CurlyLBracket);\r\n\t\t\tsetState(255);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\twhile ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << This) | (1L << If) | (1L << CurlyLBracket) | (1L << Identifier))) != 0)) {\r\n\t\t\t\t{\r\n\t\t\t\t{\r\n\t\t\t\tsetState(252);\r\n\t\t\t\tstatement();\r\n\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t\tsetState(257);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_la = _input.LA(1);\r\n\t\t\t}\r\n\t\t\tsetState(258);\r\n\t\t\tmatch(CurlyRBracket);\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class IfelseContext extends ParserRuleContext {\r\n\t\tpublic JIfContext jIf() {\r\n\t\t\treturn getRuleContext(JIfContext.class,0);\r\n\t\t}\r\n\t\tpublic List<JElseIfContext> jElseIf() {\r\n\t\t\treturn getRuleContexts(JElseIfContext.class);\r\n\t\t}\r\n\t\tpublic JElseIfContext jElseIf(int i) {\r\n\t\t\treturn getRuleContext(JElseIfContext.class,i);\r\n\t\t}\r\n\t\tpublic JElseContext jElse() {\r\n\t\t\treturn getRuleContext(JElseContext.class,0);\r\n\t\t}\r\n\t\tpublic IfelseContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_ifelse; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterIfelse(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitIfelse(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitIfelse(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final IfelseContext ifelse() throws RecognitionException {\r\n\t\tIfelseContext _localctx = new IfelseContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 40, RULE_ifelse);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tint _alt;\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(260);\r\n\t\t\tjIf();\r\n\t\t\tsetState(264);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_alt = getInterpreter().adaptivePredict(_input,29,_ctx);\r\n\t\t\twhile ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {\r\n\t\t\t\tif ( _alt==1 ) {\r\n\t\t\t\t\t{\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(261);\r\n\t\t\t\t\tjElseIf();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t} \r\n\t\t\t\t}\r\n\t\t\t\tsetState(266);\r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,29,_ctx);\r\n\t\t\t}\r\n\t\t\tsetState(268);\r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif (_la==Else) {\r\n\t\t\t\t{\r\n\t\t\t\tsetState(267);\r\n\t\t\t\tjElse();\r\n\t\t\t\t}\r\n\t\t\t}\r\n\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JIfContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode If() { return getToken(antlrGrammarParser.If, 0); }\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic JIfContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jIf; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJIf(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJIf(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJIf(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JIfContext jIf() throws RecognitionException {\r\n\t\tJIfContext _localctx = new JIfContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 42, RULE_jIf);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(270);\r\n\t\t\tmatch(If);\r\n\t\t\tsetState(271);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(272);\r\n\t\t\texpression();\r\n\t\t\tsetState(273);\r\n\t\t\tmatch(RBracket);\r\n\t\t\tsetState(274);\r\n\t\t\tblock();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JElseIfContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Else() { return getToken(antlrGrammarParser.Else, 0); }\r\n\t\tpublic TerminalNode If() { return getToken(antlrGrammarParser.If, 0); }\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic JElseIfContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jElseIf; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJElseIf(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJElseIf(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJElseIf(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JElseIfContext jElseIf() throws RecognitionException {\r\n\t\tJElseIfContext _localctx = new JElseIfContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 44, RULE_jElseIf);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(276);\r\n\t\t\tmatch(Else);\r\n\t\t\tsetState(277);\r\n\t\t\tmatch(If);\r\n\t\t\tsetState(278);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(279);\r\n\t\t\texpression();\r\n\t\t\tsetState(280);\r\n\t\t\tmatch(RBracket);\r\n\t\t\tsetState(281);\r\n\t\t\tblock();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JElseContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Else() { return getToken(antlrGrammarParser.Else, 0); }\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic JElseContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jElse; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJElse(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJElse(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJElse(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JElseContext jElse() throws RecognitionException {\r\n\t\tJElseContext _localctx = new JElseContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 46, RULE_jElse);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(283);\r\n\t\t\tmatch(Else);\r\n\t\t\tsetState(284);\r\n\t\t\tblock();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JWhileContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode LBracket() { return getToken(antlrGrammarParser.LBracket, 0); }\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic TerminalNode RBracket() { return getToken(antlrGrammarParser.RBracket, 0); }\r\n\t\tpublic BlockContext block() {\r\n\t\t\treturn getRuleContext(BlockContext.class,0);\r\n\t\t}\r\n\t\tpublic JWhileContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jWhile; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJWhile(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJWhile(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJWhile(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JWhileContext jWhile() throws RecognitionException {\r\n\t\tJWhileContext _localctx = new JWhileContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 48, RULE_jWhile);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(286);\r\n\t\t\tmatch(T__2);\r\n\t\t\tsetState(287);\r\n\t\t\tmatch(LBracket);\r\n\t\t\tsetState(288);\r\n\t\t\texpression();\r\n\t\t\tsetState(289);\r\n\t\t\tmatch(RBracket);\r\n\t\t\tsetState(290);\r\n\t\t\tblock();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class JReturnContext extends ParserRuleContext {\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic JReturnContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_jReturn; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterJReturn(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitJReturn(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitJReturn(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final JReturnContext jReturn() throws RecognitionException {\r\n\t\tJReturnContext _localctx = new JReturnContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 50, RULE_jReturn);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(292);\r\n\t\t\tmatch(T__3);\r\n\t\t\tsetState(293);\r\n\t\t\texpression();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class UnaryContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode NotOperator() { return getToken(antlrGrammarParser.NotOperator, 0); }\r\n\t\tpublic ExpressionContext expression() {\r\n\t\t\treturn getRuleContext(ExpressionContext.class,0);\r\n\t\t}\r\n\t\tpublic UnaryContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_unary; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterUnary(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitUnary(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitUnary(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final UnaryContext unary() throws RecognitionException {\r\n\t\tUnaryContext _localctx = new UnaryContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 52, RULE_unary);\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(295);\r\n\t\t\tmatch(NotOperator);\r\n\t\t\tsetState(296);\r\n\t\t\texpression();\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class BinaryContext extends ParserRuleContext {\r\n\t\tpublic List<BasicexpressionsContext> basicexpressions() {\r\n\t\t\treturn getRuleContexts(BasicexpressionsContext.class);\r\n\t\t}\r\n\t\tpublic BasicexpressionsContext basicexpressions(int i) {\r\n\t\t\treturn getRuleContext(BasicexpressionsContext.class,i);\r\n\t\t}\r\n\t\tpublic List<OperatorsContext> operators() {\r\n\t\t\treturn getRuleContexts(OperatorsContext.class);\r\n\t\t}\r\n\t\tpublic OperatorsContext operators(int i) {\r\n\t\t\treturn getRuleContext(OperatorsContext.class,i);\r\n\t\t}\r\n\t\tpublic BinaryContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_binary; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterBinary(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitBinary(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitBinary(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final BinaryContext binary() throws RecognitionException {\r\n\t\tBinaryContext _localctx = new BinaryContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 54, RULE_binary);\r\n\t\ttry {\r\n\t\t\tint _alt;\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(298);\r\n\t\t\tbasicexpressions();\r\n\t\t\tsetState(302); \r\n\t\t\t_errHandler.sync(this);\r\n\t\t\t_alt = 1;\r\n\t\t\tdo {\r\n\t\t\t\tswitch (_alt) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\t{\r\n\t\t\t\t\t{\r\n\t\t\t\t\tsetState(299);\r\n\t\t\t\t\toperators();\r\n\t\t\t\t\tsetState(300);\r\n\t\t\t\t\tbasicexpressions();\r\n\t\t\t\t\t}\r\n\t\t\t\t\t}\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tthrow new NoViableAltException(this);\r\n\t\t\t\t}\r\n\t\t\t\tsetState(304); \r\n\t\t\t\t_errHandler.sync(this);\r\n\t\t\t\t_alt = getInterpreter().adaptivePredict(_input,31,_ctx);\r\n\t\t\t} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class BaseTypeContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode JBoolean() { return getToken(antlrGrammarParser.JBoolean, 0); }\r\n\t\tpublic TerminalNode JNull() { return getToken(antlrGrammarParser.JNull, 0); }\r\n\t\tpublic TerminalNode This() { return getToken(antlrGrammarParser.This, 0); }\r\n\t\tpublic TerminalNode JString() { return getToken(antlrGrammarParser.JString, 0); }\r\n\t\tpublic TerminalNode JCharacter() { return getToken(antlrGrammarParser.JCharacter, 0); }\r\n\t\tpublic TerminalNode JInteger() { return getToken(antlrGrammarParser.JInteger, 0); }\r\n\t\tpublic TerminalNode Super() { return getToken(antlrGrammarParser.Super, 0); }\r\n\t\tpublic BaseTypeContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_baseType; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterBaseType(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitBaseType(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitBaseType(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final BaseTypeContext baseType() throws RecognitionException {\r\n\t\tBaseTypeContext _localctx = new BaseTypeContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 56, RULE_baseType);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(306);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JBoolean) | (1L << JNull) | (1L << Super) | (1L << This) | (1L << JCharacter) | (1L << JInteger) | (1L << JString))) != 0)) ) {\r\n\t\t\t_errHandler.recoverInline(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ( _input.LA(1)==Token.EOF ) matchedEOF = true;\r\n\t\t\t\t_errHandler.reportMatch(this);\r\n\t\t\t\tconsume();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class ObjectTypeContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }\r\n\t\tpublic ObjectTypeContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_objectType; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterObjectType(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitObjectType(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitObjectType(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final ObjectTypeContext objectType() throws RecognitionException {\r\n\t\tObjectTypeContext _localctx = new ObjectTypeContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 58, RULE_objectType);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(308);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Identifier))) != 0)) ) {\r\n\t\t\t_errHandler.recoverInline(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ( _input.LA(1)==Token.EOF ) matchedEOF = true;\r\n\t\t\t\t_errHandler.reportMatch(this);\r\n\t\t\t\tconsume();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static class OperatorsContext extends ParserRuleContext {\r\n\t\tpublic TerminalNode LogicalOperator() { return getToken(antlrGrammarParser.LogicalOperator, 0); }\r\n\t\tpublic TerminalNode Comperator() { return getToken(antlrGrammarParser.Comperator, 0); }\r\n\t\tpublic TerminalNode AddSubOperator() { return getToken(antlrGrammarParser.AddSubOperator, 0); }\r\n\t\tpublic TerminalNode PointOperator() { return getToken(antlrGrammarParser.PointOperator, 0); }\r\n\t\tpublic OperatorsContext(ParserRuleContext parent, int invokingState) {\r\n\t\t\tsuper(parent, invokingState);\r\n\t\t}\r\n\t\t@Override public int getRuleIndex() { return RULE_operators; }\r\n\t\t@Override\r\n\t\tpublic void enterRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).enterOperators(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic void exitRule(ParseTreeListener listener) {\r\n\t\t\tif ( listener instanceof antlrGrammarListener ) ((antlrGrammarListener)listener).exitOperators(this);\r\n\t\t}\r\n\t\t@Override\r\n\t\tpublic <T> T accept(ParseTreeVisitor<? extends T> visitor) {\r\n\t\t\tif ( visitor instanceof antlrGrammarVisitor ) return ((antlrGrammarVisitor<? extends T>)visitor).visitOperators(this);\r\n\t\t\telse return visitor.visitChildren(this);\r\n\t\t}\r\n\t}\r\n\r\n\tpublic final OperatorsContext operators() throws RecognitionException {\r\n\t\tOperatorsContext _localctx = new OperatorsContext(_ctx, getState());\r\n\t\tenterRule(_localctx, 60, RULE_operators);\r\n\t\tint _la;\r\n\t\ttry {\r\n\t\t\tenterOuterAlt(_localctx, 1);\r\n\t\t\t{\r\n\t\t\tsetState(310);\r\n\t\t\t_la = _input.LA(1);\r\n\t\t\tif ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comperator) | (1L << PointOperator) | (1L << AddSubOperator) | (1L << LogicalOperator))) != 0)) ) {\r\n\t\t\t_errHandler.recoverInline(this);\r\n\t\t\t}\r\n\t\t\telse {\r\n\t\t\t\tif ( _input.LA(1)==Token.EOF ) matchedEOF = true;\r\n\t\t\t\t_errHandler.reportMatch(this);\r\n\t\t\t\tconsume();\r\n\t\t\t}\r\n\t\t\t}\r\n\t\t}\r\n\t\tcatch (RecognitionException re) {\r\n\t\t\t_localctx.exception = re;\r\n\t\t\t_errHandler.reportError(this, re);\r\n\t\t\t_errHandler.recover(this, re);\r\n\t\t}\r\n\t\tfinally {\r\n\t\t\texitRule();\r\n\t\t}\r\n\t\treturn _localctx;\r\n\t}\r\n\r\n\tpublic static final String _serializedATN =\r\n\t\t\"\\u0004\\u0001&\\u0139\\u0002\\u0000\\u0007\\u0000\\u0002\\u0001\\u0007\\u0001\\u0002\"+\r\n\t\t\"\\u0002\\u0007\\u0002\\u0002\\u0003\\u0007\\u0003\\u0002\\u0004\\u0007\\u0004\\u0002\"+\r\n\t\t\"\\u0005\\u0007\\u0005\\u0002\\u0006\\u0007\\u0006\\u0002\\u0007\\u0007\\u0007\\u0002\"+\r\n\t\t\"\\b\\u0007\\b\\u0002\\t\\u0007\\t\\u0002\\n\\u0007\\n\\u0002\\u000b\\u0007\\u000b\\u0002\"+\r\n\t\t\"\\f\\u0007\\f\\u0002\\r\\u0007\\r\\u0002\\u000e\\u0007\\u000e\\u0002\\u000f\\u0007\\u000f\"+\r\n\t\t\"\\u0002\\u0010\\u0007\\u0010\\u0002\\u0011\\u0007\\u0011\\u0002\\u0012\\u0007\\u0012\"+\r\n\t\t\"\\u0002\\u0013\\u0007\\u0013\\u0002\\u0014\\u0007\\u0014\\u0002\\u0015\\u0007\\u0015\"+\r\n\t\t\"\\u0002\\u0016\\u0007\\u0016\\u0002\\u0017\\u0007\\u0017\\u0002\\u0018\\u0007\\u0018\"+\r\n\t\t\"\\u0002\\u0019\\u0007\\u0019\\u0002\\u001a\\u0007\\u001a\\u0002\\u001b\\u0007\\u001b\"+\r\n\t\t\"\\u0002\\u001c\\u0007\\u001c\\u0002\\u001d\\u0007\\u001d\\u0002\\u001e\\u0007\\u001e\"+\r\n\t\t\"\\u0001\\u0000\\u0004\\u0000@\\b\\u0000\\u000b\\u0000\\f\\u0000A\\u0001\\u0001\\u0001\"+\r\n\t\t\"\\u0001\\u0001\\u0001\\u0001\\u0001\\u0001\\u0002\\u0003\\u0002I\\b\\u0002\\u0001\"+\r\n\t\t\"\\u0002\\u0001\\u0002\\u0001\\u0002\\u0001\\u0002\\u0001\\u0002\\u0001\\u0002\\u0001\"+\r\n\t\t\"\\u0003\\u0001\\u0003\\u0001\\u0003\\u0001\\u0003\\u0005\\u0003U\\b\\u0003\\n\\u0003\"+\r\n\t\t\"\\f\\u0003X\\t\\u0003\\u0001\\u0003\\u0001\\u0003\\u0001\\u0004\\u0003\\u0004]\\b\\u0004\"+\r\n\t\t\"\\u0001\\u0004\\u0001\\u0004\\u0003\\u0004a\\b\\u0004\\u0001\\u0004\\u0001\\u0004\"+\r\n\t\t\"\\u0001\\u0004\\u0001\\u0004\\u0001\\u0004\\u0001\\u0004\\u0001\\u0005\\u0003\\u0005\"+\r\n\t\t\"j\\b\\u0005\\u0001\\u0005\\u0001\\u0005\\u0001\\u0005\\u0001\\u0005\\u0005\\u0005\"+\r\n\t\t\"p\\b\\u0005\\n\\u0005\\f\\u0005s\\t\\u0005\\u0001\\u0005\\u0001\\u0005\\u0003\\u0005\"+\r\n\t\t\"w\\b\\u0005\\u0001\\u0005\\u0001\\u0005\\u0001\\u0006\\u0001\\u0006\\u0001\\u0006\"+\r\n\t\t\"\\u0001\\u0007\\u0003\\u0007\\u007f\\b\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\"+\r\n\t\t\"\\u0004\\u0007\\u0084\\b\\u0007\\u000b\\u0007\\f\\u0007\\u0085\\u0003\\u0007\\u0088\"+\r\n\t\t\"\\b\\u0007\\u0001\\b\\u0003\\b\\u008b\\b\\b\\u0001\\b\\u0001\\b\\u0001\\b\\u0005\\b\\u0090\"+\r\n\t\t\"\\b\\b\\n\\b\\f\\b\\u0093\\t\\b\\u0001\\b\\u0003\\b\\u0096\\b\\b\\u0001\\t\\u0001\\t\\u0003\"+\r\n\t\t\"\\t\\u009a\\b\\t\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\"+\r\n\t\t\"\\n\\u0001\\n\\u0003\\n\\u00a5\\b\\n\\u0001\\u000b\\u0001\\u000b\\u0001\\u000b\\u0001\"+\r\n\t\t\"\\u000b\\u0001\\u000b\\u0003\\u000b\\u00ac\\b\\u000b\\u0001\\u000b\\u0001\\u000b\\u0004\"+\r\n\t\t\"\\u000b\\u00b0\\b\\u000b\\u000b\\u000b\\f\\u000b\\u00b1\\u0001\\u000b\\u0003\\u000b\"+\r\n\t\t\"\\u00b5\\b\\u000b\\u0001\\f\\u0001\\f\\u0001\\f\\u0003\\f\\u00ba\\b\\f\\u0001\\r\\u0001\"+\r\n\t\t\"\\r\\u0003\\r\\u00be\\b\\r\\u0001\\r\\u0001\\r\\u0001\\r\\u0001\\u000e\\u0001\\u000e\\u0001\"+\r\n\t\t\"\\u000e\\u0001\\u000e\\u0005\\u000e\\u00c7\\b\\u000e\\n\\u000e\\f\\u000e\\u00ca\\t\\u000e\"+\r\n\t\t\"\\u0001\\u000e\\u0001\\u000e\\u0003\\u000e\\u00ce\\b\\u000e\\u0001\\u000f\\u0001\\u000f\"+\r\n\t\t\"\\u0001\\u000f\\u0001\\u000f\\u0001\\u000f\\u0001\\u000f\\u0001\\u0010\\u0003\\u0010\"+\r\n\t\t\"\\u00d7\\b\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\"+\r\n\t\t\"\\u0001\\u0010\\u0005\\u0010\\u00df\\b\\u0010\\n\\u0010\\f\\u0010\\u00e2\\t\\u0010\\u0001\"+\r\n\t\t\"\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0010\\u0001\\u0011\\u0001\"+\r\n\t\t\"\\u0011\\u0001\\u0011\\u0003\\u0011\\u00ec\\b\\u0011\\u0001\\u0012\\u0001\\u0012\\u0001\"+\r\n\t\t\"\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\"+\r\n\t\t\"\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0003\\u0012\\u00fa\\b\\u0012\\u0001\"+\r\n\t\t\"\\u0013\\u0001\\u0013\\u0005\\u0013\\u00fe\\b\\u0013\\n\\u0013\\f\\u0013\\u0101\\t\\u0013\"+\r\n\t\t\"\\u0001\\u0013\\u0001\\u0013\\u0001\\u0014\\u0001\\u0014\\u0005\\u0014\\u0107\\b\\u0014\"+\r\n\t\t\"\\n\\u0014\\f\\u0014\\u010a\\t\\u0014\\u0001\\u0014\\u0003\\u0014\\u010d\\b\\u0014\\u0001\"+\r\n\t\t\"\\u0015\\u0001\\u0015\\u0001\\u0015\\u0001\\u0015\\u0001\\u0015\\u0001\\u0015\\u0001\"+\r\n\t\t\"\\u0016\\u0001\\u0016\\u0001\\u0016\\u0001\\u0016\\u0001\\u0016\\u0001\\u0016\\u0001\"+\r\n\t\t\"\\u0016\\u0001\\u0017\\u0001\\u0017\\u0001\\u0017\\u0001\\u0018\\u0001\\u0018\\u0001\"+\r\n\t\t\"\\u0018\\u0001\\u0018\\u0001\\u0018\\u0001\\u0018\\u0001\\u0019\\u0001\\u0019\\u0001\"+\r\n\t\t\"\\u0019\\u0001\\u001a\\u0001\\u001a\\u0001\\u001a\\u0001\\u001b\\u0001\\u001b\\u0001\"+\r\n\t\t\"\\u001b\\u0001\\u001b\\u0004\\u001b\\u012f\\b\\u001b\\u000b\\u001b\\f\\u001b\\u0130\"+\r\n\t\t\"\\u0001\\u001c\\u0001\\u001c\\u0001\\u001d\\u0001\\u001d\\u0001\\u001e\\u0001\\u001e\"+\r\n\t\t\"\\u0001\\u001e\\u0000\\u0000\\u001f\\u0000\\u0002\\u0004\\u0006\\b\\n\\f\\u000e\\u0010\"+\r\n\t\t\"\\u0012\\u0014\\u0016\\u0018\\u001a\\u001c\\u001e \\\"$&(*,.02468:<\\u0000\\u0004\"+\r\n\t\t\"\\u0001\\u0000\\u0010\\u0012\\u0004\\u0000\\t\\n\\f\\r!\\\"&&\\u0002\\u0000\\u0005\\u0007\"+\r\n\t\t\"  \\u0002\\u0000\\u0013\\u0013\\u0016\\u0018\\u0144\\u0000?\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0002C\\u0001\\u0000\\u0000\\u0000\\u0004H\\u0001\\u0000\\u0000\\u0000\\u0006\"+\r\n\t\t\"P\\u0001\\u0000\\u0000\\u0000\\b\\\\\\u0001\\u0000\\u0000\\u0000\\ni\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\fz\\u0001\\u0000\\u0000\\u0000\\u000e\\u0087\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0010\\u0095\\u0001\\u0000\\u0000\\u0000\\u0012\\u0099\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0014\\u00a4\\u0001\\u0000\\u0000\\u0000\\u0016\\u00b4\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0018\\u00b9\\u0001\\u0000\\u0000\\u0000\\u001a\\u00bd\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u001c\\u00c2\\u0001\\u0000\\u0000\\u0000\\u001e\\u00cf\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\" \\u00d6\\u0001\\u0000\\u0000\\u0000\\\"\\u00eb\\u0001\\u0000\\u0000\\u0000$\\u00f9\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000&\\u00fb\\u0001\\u0000\\u0000\\u0000(\\u0104\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000*\\u010e\\u0001\\u0000\\u0000\\u0000,\\u0114\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\".\\u011b\\u0001\\u0000\\u0000\\u00000\\u011e\\u0001\\u0000\\u0000\\u00002\\u0124\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u00004\\u0127\\u0001\\u0000\\u0000\\u00006\\u012a\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u00008\\u0132\\u0001\\u0000\\u0000\\u0000:\\u0134\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"<\\u0136\\u0001\\u0000\\u0000\\u0000>@\\u0003\\u0002\\u0001\\u0000?>\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000@A\\u0001\\u0000\\u0000\\u0000A?\\u0001\\u0000\\u0000\\u0000AB\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000B\\u0001\\u0001\\u0000\\u0000\\u0000CD\\u0005\\u0001\\u0000\"+\r\n\t\t\"\\u0000DE\\u0005 \\u0000\\u0000EF\\u0003\\u0006\\u0003\\u0000F\\u0003\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000GI\\u0005\\b\\u0000\\u0000HG\\u0001\\u0000\\u0000\\u0000HI\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000IJ\\u0001\\u0000\\u0000\\u0000JK\\u0005 \\u0000\\u0000KL\\u0005\\u0019\"+\r\n\t\t\"\\u0000\\u0000LM\\u0003\\u000e\\u0007\\u0000MN\\u0005\\u001a\\u0000\\u0000NO\\u0003\"+\r\n\t\t\"&\\u0013\\u0000O\\u0005\\u0001\\u0000\\u0000\\u0000PV\\u0005\\u001b\\u0000\\u0000\"+\r\n\t\t\"QU\\u0003\\b\\u0004\\u0000RU\\u0003\\n\\u0005\\u0000SU\\u0003\\u0004\\u0002\\u0000\"+\r\n\t\t\"TQ\\u0001\\u0000\\u0000\\u0000TR\\u0001\\u0000\\u0000\\u0000TS\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000UX\\u0001\\u0000\\u0000\\u0000VT\\u0001\\u0000\\u0000\\u0000VW\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000WY\\u0001\\u0000\\u0000\\u0000XV\\u0001\\u0000\\u0000\\u0000YZ\\u0005\"+\r\n\t\t\"\\u001c\\u0000\\u0000Z\\u0007\\u0001\\u0000\\u0000\\u0000[]\\u0005\\b\\u0000\\u0000\"+\r\n\t\t\"\\\\[\\u0001\\u0000\\u0000\\u0000\\\\]\\u0001\\u0000\\u0000\\u0000]`\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000^a\\u0003:\\u001d\\u0000_a\\u0005\\u000b\\u0000\\u0000`^\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000`_\\u0001\\u0000\\u0000\\u0000ab\\u0001\\u0000\\u0000\\u0000bc\\u0005 \\u0000\"+\r\n\t\t\"\\u0000cd\\u0005\\u0019\\u0000\\u0000de\\u0003\\u000e\\u0007\\u0000ef\\u0005\\u001a\"+\r\n\t\t\"\\u0000\\u0000fg\\u0003&\\u0013\\u0000g\\t\\u0001\\u0000\\u0000\\u0000hj\\u0005\\b\"+\r\n\t\t\"\\u0000\\u0000ih\\u0001\\u0000\\u0000\\u0000ij\\u0001\\u0000\\u0000\\u0000jk\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000kl\\u0003:\\u001d\\u0000lq\\u0005 \\u0000\\u0000mn\\u0005\\u001e\"+\r\n\t\t\"\\u0000\\u0000np\\u0005 \\u0000\\u0000om\\u0001\\u0000\\u0000\\u0000ps\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000qo\\u0001\\u0000\\u0000\\u0000qr\\u0001\\u0000\\u0000\\u0000rv\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000sq\\u0001\\u0000\\u0000\\u0000tu\\u0005\\u0010\\u0000\\u0000\"+\r\n\t\t\"uw\\u0003\\u0012\\t\\u0000vt\\u0001\\u0000\\u0000\\u0000vw\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"wx\\u0001\\u0000\\u0000\\u0000xy\\u0005\\u001f\\u0000\\u0000y\\u000b\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000z{\\u0003:\\u001d\\u0000{|\\u0005 \\u0000\\u0000|\\r\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000}\\u007f\\u0003\\f\\u0006\\u0000~}\\u0001\\u0000\\u0000\\u0000~\\u007f\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u007f\\u0088\\u0001\\u0000\\u0000\\u0000\\u0080\\u0083\"+\r\n\t\t\"\\u0003\\f\\u0006\\u0000\\u0081\\u0082\\u0005\\u001e\\u0000\\u0000\\u0082\\u0084\\u0003\"+\r\n\t\t\"\\f\\u0006\\u0000\\u0083\\u0081\\u0001\\u0000\\u0000\\u0000\\u0084\\u0085\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u0085\\u0083\\u0001\\u0000\\u0000\\u0000\\u0085\\u0086\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u0086\\u0088\\u0001\\u0000\\u0000\\u0000\\u0087~\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0087\\u0080\\u0001\\u0000\\u0000\\u0000\\u0088\\u000f\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0089\\u008b\\u0003\\u0012\\t\\u0000\\u008a\\u0089\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u008a\\u008b\\u0001\\u0000\\u0000\\u0000\\u008b\\u0096\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u008c\\u0091\\u0003\\u0012\\t\\u0000\\u008d\\u008e\\u0005\\u001e\\u0000\\u0000\\u008e\"+\r\n\t\t\"\\u0090\\u0003\\u0012\\t\\u0000\\u008f\\u008d\\u0001\\u0000\\u0000\\u0000\\u0090\\u0093\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0091\\u008f\\u0001\\u0000\\u0000\\u0000\\u0091\\u0092\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0092\\u0096\\u0001\\u0000\\u0000\\u0000\\u0093\\u0091\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0094\\u0096\\u0003\\u0016\\u000b\\u0000\\u0095\\u008a\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0095\\u008c\\u0001\\u0000\\u0000\\u0000\\u0095\\u0094\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0096\\u0011\\u0001\\u0000\\u0000\\u0000\\u0097\\u009a\"+\r\n\t\t\"\\u0003\\u0014\\n\\u0000\\u0098\\u009a\\u00036\\u001b\\u0000\\u0099\\u0097\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0099\\u0098\\u0001\\u0000\\u0000\\u0000\\u009a\\u0013\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u009b\\u00a5\\u00038\\u001c\\u0000\\u009c\\u00a5\\u0003\\u0016\"+\r\n\t\t\"\\u000b\\u0000\\u009d\\u00a5\\u0005 \\u0000\\u0000\\u009e\\u00a5\\u0003\\u0018\\f\"+\r\n\t\t\"\\u0000\\u009f\\u00a5\\u00034\\u001a\\u0000\\u00a0\\u00a1\\u0005\\u0019\\u0000\\u0000\"+\r\n\t\t\"\\u00a1\\u00a2\\u0003\\u0012\\t\\u0000\\u00a2\\u00a3\\u0005\\u001a\\u0000\\u0000\\u00a3\"+\r\n\t\t\"\\u00a5\\u0001\\u0000\\u0000\\u0000\\u00a4\\u009b\\u0001\\u0000\\u0000\\u0000\\u00a4\"+\r\n\t\t\"\\u009c\\u0001\\u0000\\u0000\\u0000\\u00a4\\u009d\\u0001\\u0000\\u0000\\u0000\\u00a4\"+\r\n\t\t\"\\u009e\\u0001\\u0000\\u0000\\u0000\\u00a4\\u009f\\u0001\\u0000\\u0000\\u0000\\u00a4\"+\r\n\t\t\"\\u00a0\\u0001\\u0000\\u0000\\u0000\\u00a5\\u0015\\u0001\\u0000\\u0000\\u0000\\u00a6\"+\r\n\t\t\"\\u00a7\\u0005\\r\\u0000\\u0000\\u00a7\\u00a8\\u0005\\u001d\\u0000\\u0000\\u00a8\\u00b5\"+\r\n\t\t\"\\u0005 \\u0000\\u0000\\u00a9\\u00aa\\u0005\\r\\u0000\\u0000\\u00aa\\u00ac\\u0005\"+\r\n\t\t\"\\u001d\\u0000\\u0000\\u00ab\\u00a9\\u0001\\u0000\\u0000\\u0000\\u00ab\\u00ac\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00ac\\u00af\\u0001\\u0000\\u0000\\u0000\\u00ad\\u00ae\\u0005\"+\r\n\t\t\" \\u0000\\u0000\\u00ae\\u00b0\\u0005\\u001d\\u0000\\u0000\\u00af\\u00ad\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00b0\\u00b1\\u0001\\u0000\\u0000\\u0000\\u00b1\\u00af\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00b1\\u00b2\\u0001\\u0000\\u0000\\u0000\\u00b2\\u00b3\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00b3\\u00b5\\u0005 \\u0000\\u0000\\u00b4\\u00a6\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00b4\\u00ab\\u0001\\u0000\\u0000\\u0000\\u00b5\\u0017\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00b6\\u00ba\\u0003\\u001a\\r\\u0000\\u00b7\\u00ba\\u0003\\u001e\\u000f\\u0000\"+\r\n\t\t\"\\u00b8\\u00ba\\u0003 \\u0010\\u0000\\u00b9\\u00b6\\u0001\\u0000\\u0000\\u0000\\u00b9\"+\r\n\t\t\"\\u00b7\\u0001\\u0000\\u0000\\u0000\\u00b9\\u00b8\\u0001\\u0000\\u0000\\u0000\\u00ba\"+\r\n\t\t\"\\u0019\\u0001\\u0000\\u0000\\u0000\\u00bb\\u00be\\u0003\\u0016\\u000b\\u0000\\u00bc\"+\r\n\t\t\"\\u00be\\u0005 \\u0000\\u0000\\u00bd\\u00bb\\u0001\\u0000\\u0000\\u0000\\u00bd\\u00bc\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u00be\\u00bf\\u0001\\u0000\\u0000\\u0000\\u00bf\\u00c0\"+\r\n\t\t\"\\u0007\\u0000\\u0000\\u0000\\u00c0\\u00c1\\u0003\\u0012\\t\\u0000\\u00c1\\u001b\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00c2\\u00c3\\u0003:\\u001d\\u0000\\u00c3\\u00c8\\u0005 \\u0000\"+\r\n\t\t\"\\u0000\\u00c4\\u00c5\\u0005\\u001e\\u0000\\u0000\\u00c5\\u00c7\\u0005 \\u0000\\u0000\"+\r\n\t\t\"\\u00c6\\u00c4\\u0001\\u0000\\u0000\\u0000\\u00c7\\u00ca\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00c8\\u00c6\\u0001\\u0000\\u0000\\u0000\\u00c8\\u00c9\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00c9\\u00cd\\u0001\\u0000\\u0000\\u0000\\u00ca\\u00c8\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00cb\\u00cc\\u0007\\u0000\\u0000\\u0000\\u00cc\\u00ce\\u0003\\u0012\\t\\u0000\\u00cd\"+\r\n\t\t\"\\u00cb\\u0001\\u0000\\u0000\\u0000\\u00cd\\u00ce\\u0001\\u0000\\u0000\\u0000\\u00ce\"+\r\n\t\t\"\\u001d\\u0001\\u0000\\u0000\\u0000\\u00cf\\u00d0\\u0005\\u0002\\u0000\\u0000\\u00d0\"+\r\n\t\t\"\\u00d1\\u0005 \\u0000\\u0000\\u00d1\\u00d2\\u0005\\u0019\\u0000\\u0000\\u00d2\\u00d3\"+\r\n\t\t\"\\u0003\\u0010\\b\\u0000\\u00d3\\u00d4\\u0005\\u001a\\u0000\\u0000\\u00d4\\u001f\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00d5\\u00d7\\u0003\\\"\\u0011\\u0000\\u00d6\\u00d5\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00d6\\u00d7\\u0001\\u0000\\u0000\\u0000\\u00d7\\u00e0\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00d8\\u00d9\\u0005 \\u0000\\u0000\\u00d9\\u00da\\u0005\\u0019\\u0000\"+\r\n\t\t\"\\u0000\\u00da\\u00db\\u0003\\u0010\\b\\u0000\\u00db\\u00dc\\u0005\\u001a\\u0000\\u0000\"+\r\n\t\t\"\\u00dc\\u00dd\\u0005\\u001d\\u0000\\u0000\\u00dd\\u00df\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00de\\u00d8\\u0001\\u0000\\u0000\\u0000\\u00df\\u00e2\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00e0\\u00de\\u0001\\u0000\\u0000\\u0000\\u00e0\\u00e1\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00e1\\u00e3\\u0001\\u0000\\u0000\\u0000\\u00e2\\u00e0\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00e3\\u00e4\\u0005 \\u0000\\u0000\\u00e4\\u00e5\\u0005\\u0019\\u0000\\u0000\\u00e5\"+\r\n\t\t\"\\u00e6\\u0003\\u0010\\b\\u0000\\u00e6\\u00e7\\u0005\\u001a\\u0000\\u0000\\u00e7!\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u00e8\\u00ec\\u0003\\u0016\\u000b\\u0000\\u00e9\\u00ea\"+\r\n\t\t\"\\u0005 \\u0000\\u0000\\u00ea\\u00ec\\u0005\\u001d\\u0000\\u0000\\u00eb\\u00e8\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00eb\\u00e9\\u0001\\u0000\\u0000\\u0000\\u00ec#\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00ed\\u00fa\\u0003(\\u0014\\u0000\\u00ee\\u00ef\\u0003\\u001c\\u000e\"+\r\n\t\t\"\\u0000\\u00ef\\u00f0\\u0005\\u001f\\u0000\\u0000\\u00f0\\u00fa\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00f1\\u00f2\\u00032\\u0019\\u0000\\u00f2\\u00f3\\u0005\\u001f\\u0000\\u0000\"+\r\n\t\t\"\\u00f3\\u00fa\\u0001\\u0000\\u0000\\u0000\\u00f4\\u00fa\\u00030\\u0018\\u0000\\u00f5\"+\r\n\t\t\"\\u00fa\\u0003&\\u0013\\u0000\\u00f6\\u00f7\\u0003\\u0018\\f\\u0000\\u00f7\\u00f8\"+\r\n\t\t\"\\u0005\\u001f\\u0000\\u0000\\u00f8\\u00fa\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00ed\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00ee\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00f1\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00f4\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00f5\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00f6\\u0001\\u0000\\u0000\\u0000\\u00fa%\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00fb\\u00ff\\u0005\\u001b\\u0000\\u0000\\u00fc\\u00fe\\u0003\"+\r\n\t\t\"$\\u0012\\u0000\\u00fd\\u00fc\\u0001\\u0000\\u0000\\u0000\\u00fe\\u0101\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00ff\\u00fd\\u0001\\u0000\\u0000\\u0000\\u00ff\\u0100\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u0100\\u0102\\u0001\\u0000\\u0000\\u0000\\u0101\\u00ff\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u0102\\u0103\\u0005\\u001c\\u0000\\u0000\\u0103\\'\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0104\\u0108\\u0003*\\u0015\\u0000\\u0105\\u0107\\u0003,\\u0016\\u0000\\u0106\"+\r\n\t\t\"\\u0105\\u0001\\u0000\\u0000\\u0000\\u0107\\u010a\\u0001\\u0000\\u0000\\u0000\\u0108\"+\r\n\t\t\"\\u0106\\u0001\\u0000\\u0000\\u0000\\u0108\\u0109\\u0001\\u0000\\u0000\\u0000\\u0109\"+\r\n\t\t\"\\u010c\\u0001\\u0000\\u0000\\u0000\\u010a\\u0108\\u0001\\u0000\\u0000\\u0000\\u010b\"+\r\n\t\t\"\\u010d\\u0003.\\u0017\\u0000\\u010c\\u010b\\u0001\\u0000\\u0000\\u0000\\u010c\\u010d\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u010d)\\u0001\\u0000\\u0000\\u0000\\u010e\\u010f\\u0005\"+\r\n\t\t\"\\u000e\\u0000\\u0000\\u010f\\u0110\\u0005\\u0019\\u0000\\u0000\\u0110\\u0111\\u0003\"+\r\n\t\t\"\\u0012\\t\\u0000\\u0111\\u0112\\u0005\\u001a\\u0000\\u0000\\u0112\\u0113\\u0003&\"+\r\n\t\t\"\\u0013\\u0000\\u0113+\\u0001\\u0000\\u0000\\u0000\\u0114\\u0115\\u0005\\u000f\\u0000\"+\r\n\t\t\"\\u0000\\u0115\\u0116\\u0005\\u000e\\u0000\\u0000\\u0116\\u0117\\u0005\\u0019\\u0000\"+\r\n\t\t\"\\u0000\\u0117\\u0118\\u0003\\u0012\\t\\u0000\\u0118\\u0119\\u0005\\u001a\\u0000\\u0000\"+\r\n\t\t\"\\u0119\\u011a\\u0003&\\u0013\\u0000\\u011a-\\u0001\\u0000\\u0000\\u0000\\u011b\\u011c\"+\r\n\t\t\"\\u0005\\u000f\\u0000\\u0000\\u011c\\u011d\\u0003&\\u0013\\u0000\\u011d/\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u011e\\u011f\\u0005\\u0003\\u0000\\u0000\\u011f\\u0120\\u0005\\u0019\"+\r\n\t\t\"\\u0000\\u0000\\u0120\\u0121\\u0003\\u0012\\t\\u0000\\u0121\\u0122\\u0005\\u001a\\u0000\"+\r\n\t\t\"\\u0000\\u0122\\u0123\\u0003&\\u0013\\u0000\\u01231\\u0001\\u0000\\u0000\\u0000\\u0124\"+\r\n\t\t\"\\u0125\\u0005\\u0004\\u0000\\u0000\\u0125\\u0126\\u0003\\u0012\\t\\u0000\\u01263\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0127\\u0128\\u0005\\u0014\\u0000\\u0000\\u0128\\u0129\"+\r\n\t\t\"\\u0003\\u0012\\t\\u0000\\u01295\\u0001\\u0000\\u0000\\u0000\\u012a\\u012e\\u0003\"+\r\n\t\t\"\\u0014\\n\\u0000\\u012b\\u012c\\u0003<\\u001e\\u0000\\u012c\\u012d\\u0003\\u0014\"+\r\n\t\t\"\\n\\u0000\\u012d\\u012f\\u0001\\u0000\\u0000\\u0000\\u012e\\u012b\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u012f\\u0130\\u0001\\u0000\\u0000\\u0000\\u0130\\u012e\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0130\\u0131\\u0001\\u0000\\u0000\\u0000\\u01317\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0132\\u0133\\u0007\\u0001\\u0000\\u0000\\u01339\\u0001\\u0000\\u0000\\u0000\\u0134\"+\r\n\t\t\"\\u0135\\u0007\\u0002\\u0000\\u0000\\u0135;\\u0001\\u0000\\u0000\\u0000\\u0136\\u0137\"+\r\n\t\t\"\\u0007\\u0003\\u0000\\u0000\\u0137=\\u0001\\u0000\\u0000\\u0000 AHTV\\\\`iqv~\\u0085\"+\r\n\t\t\"\\u0087\\u008a\\u0091\\u0095\\u0099\\u00a4\\u00ab\\u00b1\\u00b4\\u00b9\\u00bd\\u00c8\"+\r\n\t\t\"\\u00cd\\u00d6\\u00e0\\u00eb\\u00f9\\u00ff\\u0108\\u010c\\u0130\";\r\n\tpublic static final ATN _ATN =\r\n\t\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\r\n\tstatic {\r\n\t\t_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];\r\n\t\tfor (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {\r\n\t\t\t_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammarParser.java b/Parser/src/generated/antlrGrammarParser.java
--- a/Parser/src/generated/antlrGrammarParser.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammarParser.java	(date 1652265657921)
@@ -1,4 +1,4 @@
-// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
+// Generated from C:/Users/Administrator/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
 package generated;
 import org.antlr.v4.runtime.atn.*;
 import org.antlr.v4.runtime.dfa.DFA;
@@ -117,6 +117,7 @@
 	}
 
 	public static class ProgrammContext extends ParserRuleContext {
+		public TerminalNode Identifier() { return getToken(antlrGrammarParser.Identifier, 0); }
 		public List<JClassContext> jClass() {
 			return getRuleContexts(JClassContext.class);
 		}
@@ -149,17 +150,27 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(63); 
+			setState(63);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
-			do {
-				{
+			if (_la==Identifier) {
 				{
 				setState(62);
+				match(Identifier);
+				}
+			}
+
+			setState(66); 
+			_errHandler.sync(this);
+			_la = _input.LA(1);
+			do {
+				{
+				{
+				setState(65);
 				jClass();
 				}
 				}
-				setState(65); 
+				setState(68); 
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 			} while ( _la==T__0 );
@@ -206,11 +217,11 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(67);
+			setState(70);
 			match(T__0);
-			setState(68);
+			setState(71);
 			match(Identifier);
-			setState(69);
+			setState(72);
 			classBody();
 			}
 		}
@@ -262,25 +273,25 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(72);
+			setState(75);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			if (_la==AccessModifier) {
 				{
-				setState(71);
-				match(AccessModifier);
-				}
-			}
-
-			setState(74);
+				setState(74);
+				match(AccessModifier);
+				}
+			}
+
+			setState(77);
 			match(Identifier);
-			setState(75);
+			setState(78);
 			match(LBracket);
-			setState(76);
+			setState(79);
 			nMethodParameters();
-			setState(77);
+			setState(80);
 			match(RBracket);
-			setState(78);
+			setState(81);
 			block();
 			}
 		}
@@ -342,41 +353,41 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(80);
+			setState(83);
 			match(CurlyLBracket);
-			setState(86);
+			setState(89);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << AccessModifier) | (1L << Void) | (1L << Identifier))) != 0)) {
 				{
-				setState(84);
+				setState(87);
 				_errHandler.sync(this);
-				switch ( getInterpreter().adaptivePredict(_input,2,_ctx) ) {
+				switch ( getInterpreter().adaptivePredict(_input,3,_ctx) ) {
 				case 1:
 					{
-					setState(81);
+					setState(84);
 					methodDeclaration();
 					}
 					break;
 				case 2:
 					{
-					setState(82);
+					setState(85);
 					fieldDeclaration();
 					}
 					break;
 				case 3:
 					{
-					setState(83);
+					setState(86);
 					constructor();
 					}
 					break;
 				}
 				}
-				setState(88);
+				setState(91);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 			}
-			setState(89);
+			setState(92);
 			match(CurlyRBracket);
 			}
 		}
@@ -432,17 +443,17 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(92);
+			setState(95);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			if (_la==AccessModifier) {
 				{
-				setState(91);
+				setState(94);
 				match(AccessModifier);
 				}
 			}
 
-			setState(96);
+			setState(99);
 			_errHandler.sync(this);
 			switch (_input.LA(1)) {
 			case T__4:
@@ -450,28 +461,28 @@
 			case T__6:
 			case Identifier:
 				{
-				setState(94);
+				setState(97);
 				objectType();
 				}
 				break;
 			case Void:
 				{
-				setState(95);
+				setState(98);
 				match(Void);
 				}
 				break;
 			default:
 				throw new NoViableAltException(this);
 			}
-			setState(98);
+			setState(101);
 			match(Identifier);
-			setState(99);
+			setState(102);
 			match(LBracket);
-			setState(100);
+			setState(103);
 			nMethodParameters();
-			setState(101);
+			setState(104);
 			match(RBracket);
-			setState(102);
+			setState(105);
 			block();
 			}
 		}
@@ -530,49 +541,49 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(105);
+			setState(108);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			if (_la==AccessModifier) {
 				{
-				setState(104);
-				match(AccessModifier);
-				}
-			}
-
-			setState(107);
+				setState(107);
+				match(AccessModifier);
+				}
+			}
+
+			setState(110);
 			objectType();
-			setState(108);
+			setState(111);
 			match(Identifier);
-			setState(113);
+			setState(116);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			while (_la==Comma) {
 				{
 				{
-				setState(109);
+				setState(112);
 				match(Comma);
-				setState(110);
+				setState(113);
 				match(Identifier);
 				}
 				}
-				setState(115);
+				setState(118);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 			}
-			setState(118);
+			setState(121);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			if (_la==Equal) {
 				{
-				setState(116);
+				setState(119);
 				match(Equal);
-				setState(117);
-				expression();
-				}
-			}
-
-			setState(120);
+				setState(120);
+				expression();
+				}
+			}
+
+			setState(123);
 			match(Semicolon);
 			}
 		}
@@ -617,9 +628,9 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(122);
+			setState(125);
 			objectType();
-			setState(123);
+			setState(126);
 			match(Identifier);
 			}
 		}
@@ -669,18 +680,18 @@
 		enterRule(_localctx, 14, RULE_nMethodParameters);
 		int _la;
 		try {
-			setState(135);
+			setState(138);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,11,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,12,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(126);
+				setState(129);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Identifier))) != 0)) {
 					{
-					setState(125);
+					setState(128);
 					methodParameter();
 					}
 				}
@@ -690,21 +701,21 @@
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(128);
+				setState(131);
 				methodParameter();
-				setState(131); 
+				setState(134); 
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 				do {
 					{
 					{
-					setState(129);
+					setState(132);
 					match(Comma);
-					setState(130);
-					methodParameter();
-					}
-					}
-					setState(133); 
+					setState(133);
+					methodParameter();
+					}
+					}
+					setState(136); 
 					_errHandler.sync(this);
 					_la = _input.LA(1);
 				} while ( _la==Comma );
@@ -761,18 +772,18 @@
 		enterRule(_localctx, 16, RULE_nArguments);
 		int _la;
 		try {
-			setState(149);
+			setState(152);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,14,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(138);
+				setState(141);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << JBoolean) | (1L << JNull) | (1L << Super) | (1L << This) | (1L << NotOperator) | (1L << LBracket) | (1L << Identifier) | (1L << JCharacter) | (1L << JInteger) | (1L << JString))) != 0)) {
 					{
-					setState(137);
+					setState(140);
 					expression();
 					}
 				}
@@ -782,21 +793,21 @@
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(140);
+				setState(143);
 				expression();
-				setState(145);
+				setState(148);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 				while (_la==Comma) {
 					{
 					{
-					setState(141);
+					setState(144);
 					match(Comma);
-					setState(142);
+					setState(145);
 					expression();
 					}
 					}
-					setState(147);
+					setState(150);
 					_errHandler.sync(this);
 					_la = _input.LA(1);
 				}
@@ -805,7 +816,7 @@
 			case 3:
 				enterOuterAlt(_localctx, 3);
 				{
-				setState(148);
+				setState(151);
 				instVar();
 				}
 				break;
@@ -852,20 +863,20 @@
 		ExpressionContext _localctx = new ExpressionContext(_ctx, getState());
 		enterRule(_localctx, 18, RULE_expression);
 		try {
-			setState(153);
+			setState(156);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,15,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(151);
+				setState(154);
 				basicexpressions();
 				}
 				break;
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(152);
+				setState(155);
 				binary();
 				}
 				break;
@@ -924,52 +935,52 @@
 		BasicexpressionsContext _localctx = new BasicexpressionsContext(_ctx, getState());
 		enterRule(_localctx, 20, RULE_basicexpressions);
 		try {
-			setState(164);
+			setState(167);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,16,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,17,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(155);
+				setState(158);
 				baseType();
 				}
 				break;
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(156);
+				setState(159);
 				instVar();
 				}
 				break;
 			case 3:
 				enterOuterAlt(_localctx, 3);
 				{
-				setState(157);
+				setState(160);
 				match(Identifier);
 				}
 				break;
 			case 4:
 				enterOuterAlt(_localctx, 4);
 				{
-				setState(158);
+				setState(161);
 				statementExpressions();
 				}
 				break;
 			case 5:
 				enterOuterAlt(_localctx, 5);
 				{
-				setState(159);
+				setState(162);
 				unary();
 				}
 				break;
 			case 6:
 				enterOuterAlt(_localctx, 6);
 				{
-				setState(160);
+				setState(163);
 				match(LBracket);
-				setState(161);
+				setState(164);
 				expression();
-				setState(162);
+				setState(165);
 				match(RBracket);
 				}
 				break;
@@ -1021,36 +1032,36 @@
 		int _la;
 		try {
 			int _alt;
-			setState(180);
+			setState(183);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,19,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(166);
+				setState(169);
 				match(This);
-				setState(167);
+				setState(170);
 				match(Dot);
-				setState(168);
+				setState(171);
 				match(Identifier);
 				}
 				break;
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(171);
+				setState(174);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 				if (_la==This) {
 					{
-					setState(169);
+					setState(172);
 					match(This);
-					setState(170);
+					setState(173);
 					match(Dot);
 					}
 				}
 
-				setState(175); 
+				setState(178); 
 				_errHandler.sync(this);
 				_alt = 1;
 				do {
@@ -1058,9 +1069,9 @@
 					case 1:
 						{
 						{
-						setState(173);
+						setState(176);
 						match(Identifier);
-						setState(174);
+						setState(177);
 						match(Dot);
 						}
 						}
@@ -1068,11 +1079,11 @@
 					default:
 						throw new NoViableAltException(this);
 					}
-					setState(177); 
+					setState(180); 
 					_errHandler.sync(this);
-					_alt = getInterpreter().adaptivePredict(_input,18,_ctx);
+					_alt = getInterpreter().adaptivePredict(_input,19,_ctx);
 				} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
-				setState(179);
+				setState(182);
 				match(Identifier);
 				}
 				break;
@@ -1122,27 +1133,27 @@
 		StatementExpressionsContext _localctx = new StatementExpressionsContext(_ctx, getState());
 		enterRule(_localctx, 24, RULE_statementExpressions);
 		try {
-			setState(185);
+			setState(188);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,20,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(182);
+				setState(185);
 				assign();
 				}
 				break;
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(183);
+				setState(186);
 				jNew();
 				}
 				break;
 			case 3:
 				enterOuterAlt(_localctx, 3);
 				{
-				setState(184);
+				setState(187);
 				methodCall();
 				}
 				break;
@@ -1196,23 +1207,23 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(189);
+			setState(192);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,21,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,22,_ctx) ) {
 			case 1:
 				{
-				setState(187);
+				setState(190);
 				instVar();
 				}
 				break;
 			case 2:
 				{
-				setState(188);
+				setState(191);
 				match(Identifier);
 				}
 				break;
 			}
-			setState(191);
+			setState(194);
 			_la = _input.LA(1);
 			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << PlusEqual) | (1L << MinusEqual))) != 0)) ) {
 			_errHandler.recoverInline(this);
@@ -1222,7 +1233,7 @@
 				_errHandler.reportMatch(this);
 				consume();
 			}
-			setState(192);
+			setState(195);
 			expression();
 			}
 		}
@@ -1281,32 +1292,32 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(194);
+			setState(197);
 			objectType();
-			setState(195);
+			setState(198);
 			match(Identifier);
-			setState(200);
+			setState(203);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			while (_la==Comma) {
 				{
 				{
-				setState(196);
+				setState(199);
 				match(Comma);
-				setState(197);
+				setState(200);
 				match(Identifier);
 				}
 				}
-				setState(202);
+				setState(205);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 			}
-			setState(205);
+			setState(208);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << PlusEqual) | (1L << MinusEqual))) != 0)) {
 				{
-				setState(203);
+				setState(206);
 				_la = _input.LA(1);
 				if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Equal) | (1L << PlusEqual) | (1L << MinusEqual))) != 0)) ) {
 				_errHandler.recoverInline(this);
@@ -1316,7 +1327,7 @@
 					_errHandler.reportMatch(this);
 					consume();
 				}
-				setState(204);
+				setState(207);
 				expression();
 				}
 			}
@@ -1366,15 +1377,15 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(207);
+			setState(210);
 			match(T__1);
-			setState(208);
+			setState(211);
 			match(Identifier);
-			setState(209);
+			setState(212);
 			match(LBracket);
-			setState(210);
+			setState(213);
 			nArguments();
-			setState(211);
+			setState(214);
 			match(RBracket);
 			}
 		}
@@ -1441,48 +1452,48 @@
 			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(214);
+			setState(217);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,24,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,25,_ctx) ) {
 			case 1:
 				{
-				setState(213);
+				setState(216);
 				methodCallPrefix();
 				}
 				break;
 			}
-			setState(224);
+			setState(227);
 			_errHandler.sync(this);
-			_alt = getInterpreter().adaptivePredict(_input,25,_ctx);
+			_alt = getInterpreter().adaptivePredict(_input,26,_ctx);
 			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
 				if ( _alt==1 ) {
 					{
 					{
-					setState(216);
+					setState(219);
 					match(Identifier);
-					setState(217);
+					setState(220);
 					match(LBracket);
-					setState(218);
+					setState(221);
 					nArguments();
-					setState(219);
+					setState(222);
 					match(RBracket);
-					setState(220);
+					setState(223);
 					match(Dot);
 					}
 					} 
 				}
-				setState(226);
+				setState(229);
 				_errHandler.sync(this);
-				_alt = getInterpreter().adaptivePredict(_input,25,_ctx);
+				_alt = getInterpreter().adaptivePredict(_input,26,_ctx);
 			}
 			{
-			setState(227);
+			setState(230);
 			match(Identifier);
-			setState(228);
+			setState(231);
 			match(LBracket);
-			setState(229);
+			setState(232);
 			nArguments();
-			setState(230);
+			setState(233);
 			match(RBracket);
 			}
 			}
@@ -1529,20 +1540,20 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(235);
+			setState(238);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,26,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
 			case 1:
 				{
-				setState(232);
+				setState(235);
 				instVar();
 				}
 				break;
 			case 2:
 				{
-				setState(233);
+				setState(236);
 				match(Identifier);
-				setState(234);
+				setState(237);
 				match(Dot);
 				}
 				break;
@@ -1603,54 +1614,54 @@
 		StatementContext _localctx = new StatementContext(_ctx, getState());
 		enterRule(_localctx, 36, RULE_statement);
 		try {
-			setState(249);
+			setState(252);
 			_errHandler.sync(this);
-			switch ( getInterpreter().adaptivePredict(_input,27,_ctx) ) {
+			switch ( getInterpreter().adaptivePredict(_input,28,_ctx) ) {
 			case 1:
 				enterOuterAlt(_localctx, 1);
 				{
-				setState(237);
+				setState(240);
 				ifelse();
 				}
 				break;
 			case 2:
 				enterOuterAlt(_localctx, 2);
 				{
-				setState(238);
+				setState(241);
 				localVarDeclaration();
-				setState(239);
+				setState(242);
 				match(Semicolon);
 				}
 				break;
 			case 3:
 				enterOuterAlt(_localctx, 3);
 				{
-				setState(241);
+				setState(244);
 				jReturn();
-				setState(242);
+				setState(245);
 				match(Semicolon);
 				}
 				break;
 			case 4:
 				enterOuterAlt(_localctx, 4);
 				{
-				setState(244);
+				setState(247);
 				jWhile();
 				}
 				break;
 			case 5:
 				enterOuterAlt(_localctx, 5);
 				{
-				setState(245);
+				setState(248);
 				block();
 				}
 				break;
 			case 6:
 				enterOuterAlt(_localctx, 6);
 				{
-				setState(246);
+				setState(249);
 				statementExpressions();
-				setState(247);
+				setState(250);
 				match(Semicolon);
 				}
 				break;
@@ -1702,23 +1713,23 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(251);
+			setState(254);
 			match(CurlyLBracket);
-			setState(255);
+			setState(258);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__1) | (1L << T__2) | (1L << T__3) | (1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << This) | (1L << If) | (1L << CurlyLBracket) | (1L << Identifier))) != 0)) {
 				{
 				{
-				setState(252);
+				setState(255);
 				statement();
 				}
 				}
-				setState(257);
+				setState(260);
 				_errHandler.sync(this);
 				_la = _input.LA(1);
 			}
-			setState(258);
+			setState(261);
 			match(CurlyRBracket);
 			}
 		}
@@ -1773,30 +1784,30 @@
 			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(260);
+			setState(263);
 			jIf();
-			setState(264);
+			setState(267);
 			_errHandler.sync(this);
-			_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
+			_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
 			while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER ) {
 				if ( _alt==1 ) {
 					{
 					{
-					setState(261);
+					setState(264);
 					jElseIf();
 					}
 					} 
 				}
-				setState(266);
+				setState(269);
 				_errHandler.sync(this);
-				_alt = getInterpreter().adaptivePredict(_input,29,_ctx);
+				_alt = getInterpreter().adaptivePredict(_input,30,_ctx);
 			}
-			setState(268);
+			setState(271);
 			_errHandler.sync(this);
 			_la = _input.LA(1);
 			if (_la==Else) {
 				{
-				setState(267);
+				setState(270);
 				jElse();
 				}
 			}
@@ -1849,15 +1860,15 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(270);
+			setState(273);
 			match(If);
-			setState(271);
+			setState(274);
 			match(LBracket);
-			setState(272);
+			setState(275);
 			expression();
-			setState(273);
+			setState(276);
 			match(RBracket);
-			setState(274);
+			setState(277);
 			block();
 			}
 		}
@@ -1908,17 +1919,17 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(276);
+			setState(279);
 			match(Else);
-			setState(277);
+			setState(280);
 			match(If);
-			setState(278);
+			setState(281);
 			match(LBracket);
-			setState(279);
+			setState(282);
 			expression();
-			setState(280);
+			setState(283);
 			match(RBracket);
-			setState(281);
+			setState(284);
 			block();
 			}
 		}
@@ -1963,9 +1974,9 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(283);
+			setState(286);
 			match(Else);
-			setState(284);
+			setState(287);
 			block();
 			}
 		}
@@ -2014,15 +2025,15 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(286);
+			setState(289);
 			match(T__2);
-			setState(287);
+			setState(290);
 			match(LBracket);
-			setState(288);
+			setState(291);
 			expression();
-			setState(289);
+			setState(292);
 			match(RBracket);
-			setState(290);
+			setState(293);
 			block();
 			}
 		}
@@ -2066,9 +2077,9 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(292);
+			setState(295);
 			match(T__3);
-			setState(293);
+			setState(296);
 			expression();
 			}
 		}
@@ -2113,9 +2124,9 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(295);
+			setState(298);
 			match(NotOperator);
-			setState(296);
+			setState(299);
 			expression();
 			}
 		}
@@ -2169,9 +2180,9 @@
 			int _alt;
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(298);
+			setState(301);
 			basicexpressions();
-			setState(302); 
+			setState(305); 
 			_errHandler.sync(this);
 			_alt = 1;
 			do {
@@ -2179,9 +2190,9 @@
 				case 1:
 					{
 					{
-					setState(299);
+					setState(302);
 					operators();
-					setState(300);
+					setState(303);
 					basicexpressions();
 					}
 					}
@@ -2189,9 +2200,9 @@
 				default:
 					throw new NoViableAltException(this);
 				}
-				setState(304); 
+				setState(307); 
 				_errHandler.sync(this);
-				_alt = getInterpreter().adaptivePredict(_input,31,_ctx);
+				_alt = getInterpreter().adaptivePredict(_input,32,_ctx);
 			} while ( _alt!=2 && _alt!=org.antlr.v4.runtime.atn.ATN.INVALID_ALT_NUMBER );
 			}
 		}
@@ -2240,7 +2251,7 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(306);
+			setState(309);
 			_la = _input.LA(1);
 			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << JBoolean) | (1L << JNull) | (1L << Super) | (1L << This) | (1L << JCharacter) | (1L << JInteger) | (1L << JString))) != 0)) ) {
 			_errHandler.recoverInline(this);
@@ -2291,7 +2302,7 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(308);
+			setState(311);
 			_la = _input.LA(1);
 			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << T__4) | (1L << T__5) | (1L << T__6) | (1L << Identifier))) != 0)) ) {
 			_errHandler.recoverInline(this);
@@ -2345,7 +2356,7 @@
 		try {
 			enterOuterAlt(_localctx, 1);
 			{
-			setState(310);
+			setState(313);
 			_la = _input.LA(1);
 			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & ((1L << Comperator) | (1L << PointOperator) | (1L << AddSubOperator) | (1L << LogicalOperator))) != 0)) ) {
 			_errHandler.recoverInline(this);
@@ -2369,7 +2380,7 @@
 	}
 
 	public static final String _serializedATN =
-		"\u0004\u0001&\u0139\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002"+
+		"\u0004\u0001&\u013c\u0002\u0000\u0007\u0000\u0002\u0001\u0007\u0001\u0002"+
 		"\u0002\u0007\u0002\u0002\u0003\u0007\u0003\u0002\u0004\u0007\u0004\u0002"+
 		"\u0005\u0007\u0005\u0002\u0006\u0007\u0006\u0002\u0007\u0007\u0007\u0002"+
 		"\b\u0007\b\u0002\t\u0007\t\u0002\n\u0007\n\u0002\u000b\u0007\u000b\u0002"+
@@ -2379,195 +2390,198 @@
 		"\u0002\u0016\u0007\u0016\u0002\u0017\u0007\u0017\u0002\u0018\u0007\u0018"+
 		"\u0002\u0019\u0007\u0019\u0002\u001a\u0007\u001a\u0002\u001b\u0007\u001b"+
 		"\u0002\u001c\u0007\u001c\u0002\u001d\u0007\u001d\u0002\u001e\u0007\u001e"+
-		"\u0001\u0000\u0004\u0000@\b\u0000\u000b\u0000\f\u0000A\u0001\u0001\u0001"+
-		"\u0001\u0001\u0001\u0001\u0001\u0001\u0002\u0003\u0002I\b\u0002\u0001"+
-		"\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
-		"\u0003\u0001\u0003\u0001\u0003\u0001\u0003\u0005\u0003U\b\u0003\n\u0003"+
-		"\f\u0003X\t\u0003\u0001\u0003\u0001\u0003\u0001\u0004\u0003\u0004]\b\u0004"+
-		"\u0001\u0004\u0001\u0004\u0003\u0004a\b\u0004\u0001\u0004\u0001\u0004"+
-		"\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0005\u0003\u0005"+
-		"j\b\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0001\u0005\u0005\u0005"+
-		"p\b\u0005\n\u0005\f\u0005s\t\u0005\u0001\u0005\u0001\u0005\u0003\u0005"+
-		"w\b\u0005\u0001\u0005\u0001\u0005\u0001\u0006\u0001\u0006\u0001\u0006"+
-		"\u0001\u0007\u0003\u0007\u007f\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007"+
-		"\u0004\u0007\u0084\b\u0007\u000b\u0007\f\u0007\u0085\u0003\u0007\u0088"+
-		"\b\u0007\u0001\b\u0003\b\u008b\b\b\u0001\b\u0001\b\u0001\b\u0005\b\u0090"+
-		"\b\b\n\b\f\b\u0093\t\b\u0001\b\u0003\b\u0096\b\b\u0001\t\u0001\t\u0003"+
-		"\t\u009a\b\t\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001"+
-		"\n\u0001\n\u0003\n\u00a5\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001"+
-		"\u000b\u0001\u000b\u0003\u000b\u00ac\b\u000b\u0001\u000b\u0001\u000b\u0004"+
-		"\u000b\u00b0\b\u000b\u000b\u000b\f\u000b\u00b1\u0001\u000b\u0003\u000b"+
-		"\u00b5\b\u000b\u0001\f\u0001\f\u0001\f\u0003\f\u00ba\b\f\u0001\r\u0001"+
-		"\r\u0003\r\u00be\b\r\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001"+
-		"\u000e\u0001\u000e\u0005\u000e\u00c7\b\u000e\n\u000e\f\u000e\u00ca\t\u000e"+
-		"\u0001\u000e\u0001\u000e\u0003\u000e\u00ce\b\u000e\u0001\u000f\u0001\u000f"+
-		"\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0003\u0010"+
-		"\u00d7\b\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010"+
-		"\u0001\u0010\u0005\u0010\u00df\b\u0010\n\u0010\f\u0010\u00e2\t\u0010\u0001"+
-		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001"+
-		"\u0011\u0001\u0011\u0003\u0011\u00ec\b\u0011\u0001\u0012\u0001\u0012\u0001"+
-		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001"+
-		"\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0003\u0012\u00fa\b\u0012\u0001"+
-		"\u0013\u0001\u0013\u0005\u0013\u00fe\b\u0013\n\u0013\f\u0013\u0101\t\u0013"+
-		"\u0001\u0013\u0001\u0013\u0001\u0014\u0001\u0014\u0005\u0014\u0107\b\u0014"+
-		"\n\u0014\f\u0014\u010a\t\u0014\u0001\u0014\u0003\u0014\u010d\b\u0014\u0001"+
-		"\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001"+
+		"\u0001\u0000\u0003\u0000@\b\u0000\u0001\u0000\u0004\u0000C\b\u0000\u000b"+
+		"\u0000\f\u0000D\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001\u0001"+
+		"\u0002\u0003\u0002L\b\u0002\u0001\u0002\u0001\u0002\u0001\u0002\u0001"+
+		"\u0002\u0001\u0002\u0001\u0002\u0001\u0003\u0001\u0003\u0001\u0003\u0001"+
+		"\u0003\u0005\u0003X\b\u0003\n\u0003\f\u0003[\t\u0003\u0001\u0003\u0001"+
+		"\u0003\u0001\u0004\u0003\u0004`\b\u0004\u0001\u0004\u0001\u0004\u0003"+
+		"\u0004d\b\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001\u0004\u0001"+
+		"\u0004\u0001\u0004\u0001\u0005\u0003\u0005m\b\u0005\u0001\u0005\u0001"+
+		"\u0005\u0001\u0005\u0001\u0005\u0005\u0005s\b\u0005\n\u0005\f\u0005v\t"+
+		"\u0005\u0001\u0005\u0001\u0005\u0003\u0005z\b\u0005\u0001\u0005\u0001"+
+		"\u0005\u0001\u0006\u0001\u0006\u0001\u0006\u0001\u0007\u0003\u0007\u0082"+
+		"\b\u0007\u0001\u0007\u0001\u0007\u0001\u0007\u0004\u0007\u0087\b\u0007"+
+		"\u000b\u0007\f\u0007\u0088\u0003\u0007\u008b\b\u0007\u0001\b\u0003\b\u008e"+
+		"\b\b\u0001\b\u0001\b\u0001\b\u0005\b\u0093\b\b\n\b\f\b\u0096\t\b\u0001"+
+		"\b\u0003\b\u0099\b\b\u0001\t\u0001\t\u0003\t\u009d\b\t\u0001\n\u0001\n"+
+		"\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0001\n\u0003\n\u00a8"+
+		"\b\n\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0001\u000b\u0003"+
+		"\u000b\u00af\b\u000b\u0001\u000b\u0001\u000b\u0004\u000b\u00b3\b\u000b"+
+		"\u000b\u000b\f\u000b\u00b4\u0001\u000b\u0003\u000b\u00b8\b\u000b\u0001"+
+		"\f\u0001\f\u0001\f\u0003\f\u00bd\b\f\u0001\r\u0001\r\u0003\r\u00c1\b\r"+
+		"\u0001\r\u0001\r\u0001\r\u0001\u000e\u0001\u000e\u0001\u000e\u0001\u000e"+
+		"\u0005\u000e\u00ca\b\u000e\n\u000e\f\u000e\u00cd\t\u000e\u0001\u000e\u0001"+
+		"\u000e\u0003\u000e\u00d1\b\u000e\u0001\u000f\u0001\u000f\u0001\u000f\u0001"+
+		"\u000f\u0001\u000f\u0001\u000f\u0001\u0010\u0003\u0010\u00da\b\u0010\u0001"+
+		"\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0010\u0005"+
+		"\u0010\u00e2\b\u0010\n\u0010\f\u0010\u00e5\t\u0010\u0001\u0010\u0001\u0010"+
+		"\u0001\u0010\u0001\u0010\u0001\u0010\u0001\u0011\u0001\u0011\u0001\u0011"+
+		"\u0003\u0011\u00ef\b\u0011\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
+		"\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012\u0001\u0012"+
+		"\u0001\u0012\u0001\u0012\u0003\u0012\u00fd\b\u0012\u0001\u0013\u0001\u0013"+
+		"\u0005\u0013\u0101\b\u0013\n\u0013\f\u0013\u0104\t\u0013\u0001\u0013\u0001"+
+		"\u0013\u0001\u0014\u0001\u0014\u0005\u0014\u010a\b\u0014\n\u0014\f\u0014"+
+		"\u010d\t\u0014\u0001\u0014\u0003\u0014\u0110\b\u0014\u0001\u0015\u0001"+
+		"\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0015\u0001\u0016\u0001"+
 		"\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001\u0016\u0001"+
-		"\u0016\u0001\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001"+
-		"\u0018\u0001\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001"+
-		"\u0019\u0001\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001"+
-		"\u001b\u0001\u001b\u0004\u001b\u012f\b\u001b\u000b\u001b\f\u001b\u0130"+
-		"\u0001\u001c\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e"+
-		"\u0001\u001e\u0000\u0000\u001f\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010"+
-		"\u0012\u0014\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<\u0000\u0004"+
-		"\u0001\u0000\u0010\u0012\u0004\u0000\t\n\f\r!\"&&\u0002\u0000\u0005\u0007"+
-		"  \u0002\u0000\u0013\u0013\u0016\u0018\u0144\u0000?\u0001\u0000\u0000"+
-		"\u0000\u0002C\u0001\u0000\u0000\u0000\u0004H\u0001\u0000\u0000\u0000\u0006"+
-		"P\u0001\u0000\u0000\u0000\b\\\u0001\u0000\u0000\u0000\ni\u0001\u0000\u0000"+
-		"\u0000\fz\u0001\u0000\u0000\u0000\u000e\u0087\u0001\u0000\u0000\u0000"+
-		"\u0010\u0095\u0001\u0000\u0000\u0000\u0012\u0099\u0001\u0000\u0000\u0000"+
-		"\u0014\u00a4\u0001\u0000\u0000\u0000\u0016\u00b4\u0001\u0000\u0000\u0000"+
-		"\u0018\u00b9\u0001\u0000\u0000\u0000\u001a\u00bd\u0001\u0000\u0000\u0000"+
-		"\u001c\u00c2\u0001\u0000\u0000\u0000\u001e\u00cf\u0001\u0000\u0000\u0000"+
-		" \u00d6\u0001\u0000\u0000\u0000\"\u00eb\u0001\u0000\u0000\u0000$\u00f9"+
-		"\u0001\u0000\u0000\u0000&\u00fb\u0001\u0000\u0000\u0000(\u0104\u0001\u0000"+
-		"\u0000\u0000*\u010e\u0001\u0000\u0000\u0000,\u0114\u0001\u0000\u0000\u0000"+
-		".\u011b\u0001\u0000\u0000\u00000\u011e\u0001\u0000\u0000\u00002\u0124"+
-		"\u0001\u0000\u0000\u00004\u0127\u0001\u0000\u0000\u00006\u012a\u0001\u0000"+
-		"\u0000\u00008\u0132\u0001\u0000\u0000\u0000:\u0134\u0001\u0000\u0000\u0000"+
-		"<\u0136\u0001\u0000\u0000\u0000>@\u0003\u0002\u0001\u0000?>\u0001\u0000"+
-		"\u0000\u0000@A\u0001\u0000\u0000\u0000A?\u0001\u0000\u0000\u0000AB\u0001"+
-		"\u0000\u0000\u0000B\u0001\u0001\u0000\u0000\u0000CD\u0005\u0001\u0000"+
-		"\u0000DE\u0005 \u0000\u0000EF\u0003\u0006\u0003\u0000F\u0003\u0001\u0000"+
-		"\u0000\u0000GI\u0005\b\u0000\u0000HG\u0001\u0000\u0000\u0000HI\u0001\u0000"+
-		"\u0000\u0000IJ\u0001\u0000\u0000\u0000JK\u0005 \u0000\u0000KL\u0005\u0019"+
-		"\u0000\u0000LM\u0003\u000e\u0007\u0000MN\u0005\u001a\u0000\u0000NO\u0003"+
-		"&\u0013\u0000O\u0005\u0001\u0000\u0000\u0000PV\u0005\u001b\u0000\u0000"+
-		"QU\u0003\b\u0004\u0000RU\u0003\n\u0005\u0000SU\u0003\u0004\u0002\u0000"+
-		"TQ\u0001\u0000\u0000\u0000TR\u0001\u0000\u0000\u0000TS\u0001\u0000\u0000"+
-		"\u0000UX\u0001\u0000\u0000\u0000VT\u0001\u0000\u0000\u0000VW\u0001\u0000"+
-		"\u0000\u0000WY\u0001\u0000\u0000\u0000XV\u0001\u0000\u0000\u0000YZ\u0005"+
-		"\u001c\u0000\u0000Z\u0007\u0001\u0000\u0000\u0000[]\u0005\b\u0000\u0000"+
-		"\\[\u0001\u0000\u0000\u0000\\]\u0001\u0000\u0000\u0000]`\u0001\u0000\u0000"+
-		"\u0000^a\u0003:\u001d\u0000_a\u0005\u000b\u0000\u0000`^\u0001\u0000\u0000"+
-		"\u0000`_\u0001\u0000\u0000\u0000ab\u0001\u0000\u0000\u0000bc\u0005 \u0000"+
-		"\u0000cd\u0005\u0019\u0000\u0000de\u0003\u000e\u0007\u0000ef\u0005\u001a"+
-		"\u0000\u0000fg\u0003&\u0013\u0000g\t\u0001\u0000\u0000\u0000hj\u0005\b"+
-		"\u0000\u0000ih\u0001\u0000\u0000\u0000ij\u0001\u0000\u0000\u0000jk\u0001"+
-		"\u0000\u0000\u0000kl\u0003:\u001d\u0000lq\u0005 \u0000\u0000mn\u0005\u001e"+
-		"\u0000\u0000np\u0005 \u0000\u0000om\u0001\u0000\u0000\u0000ps\u0001\u0000"+
-		"\u0000\u0000qo\u0001\u0000\u0000\u0000qr\u0001\u0000\u0000\u0000rv\u0001"+
-		"\u0000\u0000\u0000sq\u0001\u0000\u0000\u0000tu\u0005\u0010\u0000\u0000"+
-		"uw\u0003\u0012\t\u0000vt\u0001\u0000\u0000\u0000vw\u0001\u0000\u0000\u0000"+
-		"wx\u0001\u0000\u0000\u0000xy\u0005\u001f\u0000\u0000y\u000b\u0001\u0000"+
-		"\u0000\u0000z{\u0003:\u001d\u0000{|\u0005 \u0000\u0000|\r\u0001\u0000"+
-		"\u0000\u0000}\u007f\u0003\f\u0006\u0000~}\u0001\u0000\u0000\u0000~\u007f"+
-		"\u0001\u0000\u0000\u0000\u007f\u0088\u0001\u0000\u0000\u0000\u0080\u0083"+
-		"\u0003\f\u0006\u0000\u0081\u0082\u0005\u001e\u0000\u0000\u0082\u0084\u0003"+
-		"\f\u0006\u0000\u0083\u0081\u0001\u0000\u0000\u0000\u0084\u0085\u0001\u0000"+
-		"\u0000\u0000\u0085\u0083\u0001\u0000\u0000\u0000\u0085\u0086\u0001\u0000"+
-		"\u0000\u0000\u0086\u0088\u0001\u0000\u0000\u0000\u0087~\u0001\u0000\u0000"+
-		"\u0000\u0087\u0080\u0001\u0000\u0000\u0000\u0088\u000f\u0001\u0000\u0000"+
-		"\u0000\u0089\u008b\u0003\u0012\t\u0000\u008a\u0089\u0001\u0000\u0000\u0000"+
-		"\u008a\u008b\u0001\u0000\u0000\u0000\u008b\u0096\u0001\u0000\u0000\u0000"+
-		"\u008c\u0091\u0003\u0012\t\u0000\u008d\u008e\u0005\u001e\u0000\u0000\u008e"+
-		"\u0090\u0003\u0012\t\u0000\u008f\u008d\u0001\u0000\u0000\u0000\u0090\u0093"+
-		"\u0001\u0000\u0000\u0000\u0091\u008f\u0001\u0000\u0000\u0000\u0091\u0092"+
-		"\u0001\u0000\u0000\u0000\u0092\u0096\u0001\u0000\u0000\u0000\u0093\u0091"+
-		"\u0001\u0000\u0000\u0000\u0094\u0096\u0003\u0016\u000b\u0000\u0095\u008a"+
-		"\u0001\u0000\u0000\u0000\u0095\u008c\u0001\u0000\u0000\u0000\u0095\u0094"+
-		"\u0001\u0000\u0000\u0000\u0096\u0011\u0001\u0000\u0000\u0000\u0097\u009a"+
-		"\u0003\u0014\n\u0000\u0098\u009a\u00036\u001b\u0000\u0099\u0097\u0001"+
-		"\u0000\u0000\u0000\u0099\u0098\u0001\u0000\u0000\u0000\u009a\u0013\u0001"+
-		"\u0000\u0000\u0000\u009b\u00a5\u00038\u001c\u0000\u009c\u00a5\u0003\u0016"+
-		"\u000b\u0000\u009d\u00a5\u0005 \u0000\u0000\u009e\u00a5\u0003\u0018\f"+
-		"\u0000\u009f\u00a5\u00034\u001a\u0000\u00a0\u00a1\u0005\u0019\u0000\u0000"+
-		"\u00a1\u00a2\u0003\u0012\t\u0000\u00a2\u00a3\u0005\u001a\u0000\u0000\u00a3"+
-		"\u00a5\u0001\u0000\u0000\u0000\u00a4\u009b\u0001\u0000\u0000\u0000\u00a4"+
-		"\u009c\u0001\u0000\u0000\u0000\u00a4\u009d\u0001\u0000\u0000\u0000\u00a4"+
-		"\u009e\u0001\u0000\u0000\u0000\u00a4\u009f\u0001\u0000\u0000\u0000\u00a4"+
-		"\u00a0\u0001\u0000\u0000\u0000\u00a5\u0015\u0001\u0000\u0000\u0000\u00a6"+
-		"\u00a7\u0005\r\u0000\u0000\u00a7\u00a8\u0005\u001d\u0000\u0000\u00a8\u00b5"+
-		"\u0005 \u0000\u0000\u00a9\u00aa\u0005\r\u0000\u0000\u00aa\u00ac\u0005"+
-		"\u001d\u0000\u0000\u00ab\u00a9\u0001\u0000\u0000\u0000\u00ab\u00ac\u0001"+
-		"\u0000\u0000\u0000\u00ac\u00af\u0001\u0000\u0000\u0000\u00ad\u00ae\u0005"+
-		" \u0000\u0000\u00ae\u00b0\u0005\u001d\u0000\u0000\u00af\u00ad\u0001\u0000"+
-		"\u0000\u0000\u00b0\u00b1\u0001\u0000\u0000\u0000\u00b1\u00af\u0001\u0000"+
-		"\u0000\u0000\u00b1\u00b2\u0001\u0000\u0000\u0000\u00b2\u00b3\u0001\u0000"+
-		"\u0000\u0000\u00b3\u00b5\u0005 \u0000\u0000\u00b4\u00a6\u0001\u0000\u0000"+
-		"\u0000\u00b4\u00ab\u0001\u0000\u0000\u0000\u00b5\u0017\u0001\u0000\u0000"+
-		"\u0000\u00b6\u00ba\u0003\u001a\r\u0000\u00b7\u00ba\u0003\u001e\u000f\u0000"+
-		"\u00b8\u00ba\u0003 \u0010\u0000\u00b9\u00b6\u0001\u0000\u0000\u0000\u00b9"+
-		"\u00b7\u0001\u0000\u0000\u0000\u00b9\u00b8\u0001\u0000\u0000\u0000\u00ba"+
-		"\u0019\u0001\u0000\u0000\u0000\u00bb\u00be\u0003\u0016\u000b\u0000\u00bc"+
-		"\u00be\u0005 \u0000\u0000\u00bd\u00bb\u0001\u0000\u0000\u0000\u00bd\u00bc"+
-		"\u0001\u0000\u0000\u0000\u00be\u00bf\u0001\u0000\u0000\u0000\u00bf\u00c0"+
-		"\u0007\u0000\u0000\u0000\u00c0\u00c1\u0003\u0012\t\u0000\u00c1\u001b\u0001"+
-		"\u0000\u0000\u0000\u00c2\u00c3\u0003:\u001d\u0000\u00c3\u00c8\u0005 \u0000"+
-		"\u0000\u00c4\u00c5\u0005\u001e\u0000\u0000\u00c5\u00c7\u0005 \u0000\u0000"+
-		"\u00c6\u00c4\u0001\u0000\u0000\u0000\u00c7\u00ca\u0001\u0000\u0000\u0000"+
-		"\u00c8\u00c6\u0001\u0000\u0000\u0000\u00c8\u00c9\u0001\u0000\u0000\u0000"+
-		"\u00c9\u00cd\u0001\u0000\u0000\u0000\u00ca\u00c8\u0001\u0000\u0000\u0000"+
-		"\u00cb\u00cc\u0007\u0000\u0000\u0000\u00cc\u00ce\u0003\u0012\t\u0000\u00cd"+
-		"\u00cb\u0001\u0000\u0000\u0000\u00cd\u00ce\u0001\u0000\u0000\u0000\u00ce"+
-		"\u001d\u0001\u0000\u0000\u0000\u00cf\u00d0\u0005\u0002\u0000\u0000\u00d0"+
-		"\u00d1\u0005 \u0000\u0000\u00d1\u00d2\u0005\u0019\u0000\u0000\u00d2\u00d3"+
-		"\u0003\u0010\b\u0000\u00d3\u00d4\u0005\u001a\u0000\u0000\u00d4\u001f\u0001"+
-		"\u0000\u0000\u0000\u00d5\u00d7\u0003\"\u0011\u0000\u00d6\u00d5\u0001\u0000"+
-		"\u0000\u0000\u00d6\u00d7\u0001\u0000\u0000\u0000\u00d7\u00e0\u0001\u0000"+
-		"\u0000\u0000\u00d8\u00d9\u0005 \u0000\u0000\u00d9\u00da\u0005\u0019\u0000"+
-		"\u0000\u00da\u00db\u0003\u0010\b\u0000\u00db\u00dc\u0005\u001a\u0000\u0000"+
-		"\u00dc\u00dd\u0005\u001d\u0000\u0000\u00dd\u00df\u0001\u0000\u0000\u0000"+
-		"\u00de\u00d8\u0001\u0000\u0000\u0000\u00df\u00e2\u0001\u0000\u0000\u0000"+
-		"\u00e0\u00de\u0001\u0000\u0000\u0000\u00e0\u00e1\u0001\u0000\u0000\u0000"+
-		"\u00e1\u00e3\u0001\u0000\u0000\u0000\u00e2\u00e0\u0001\u0000\u0000\u0000"+
-		"\u00e3\u00e4\u0005 \u0000\u0000\u00e4\u00e5\u0005\u0019\u0000\u0000\u00e5"+
-		"\u00e6\u0003\u0010\b\u0000\u00e6\u00e7\u0005\u001a\u0000\u0000\u00e7!"+
-		"\u0001\u0000\u0000\u0000\u00e8\u00ec\u0003\u0016\u000b\u0000\u00e9\u00ea"+
-		"\u0005 \u0000\u0000\u00ea\u00ec\u0005\u001d\u0000\u0000\u00eb\u00e8\u0001"+
-		"\u0000\u0000\u0000\u00eb\u00e9\u0001\u0000\u0000\u0000\u00ec#\u0001\u0000"+
-		"\u0000\u0000\u00ed\u00fa\u0003(\u0014\u0000\u00ee\u00ef\u0003\u001c\u000e"+
-		"\u0000\u00ef\u00f0\u0005\u001f\u0000\u0000\u00f0\u00fa\u0001\u0000\u0000"+
-		"\u0000\u00f1\u00f2\u00032\u0019\u0000\u00f2\u00f3\u0005\u001f\u0000\u0000"+
-		"\u00f3\u00fa\u0001\u0000\u0000\u0000\u00f4\u00fa\u00030\u0018\u0000\u00f5"+
-		"\u00fa\u0003&\u0013\u0000\u00f6\u00f7\u0003\u0018\f\u0000\u00f7\u00f8"+
-		"\u0005\u001f\u0000\u0000\u00f8\u00fa\u0001\u0000\u0000\u0000\u00f9\u00ed"+
-		"\u0001\u0000\u0000\u0000\u00f9\u00ee\u0001\u0000\u0000\u0000\u00f9\u00f1"+
-		"\u0001\u0000\u0000\u0000\u00f9\u00f4\u0001\u0000\u0000\u0000\u00f9\u00f5"+
-		"\u0001\u0000\u0000\u0000\u00f9\u00f6\u0001\u0000\u0000\u0000\u00fa%\u0001"+
-		"\u0000\u0000\u0000\u00fb\u00ff\u0005\u001b\u0000\u0000\u00fc\u00fe\u0003"+
-		"$\u0012\u0000\u00fd\u00fc\u0001\u0000\u0000\u0000\u00fe\u0101\u0001\u0000"+
-		"\u0000\u0000\u00ff\u00fd\u0001\u0000\u0000\u0000\u00ff\u0100\u0001\u0000"+
-		"\u0000\u0000\u0100\u0102\u0001\u0000\u0000\u0000\u0101\u00ff\u0001\u0000"+
-		"\u0000\u0000\u0102\u0103\u0005\u001c\u0000\u0000\u0103\'\u0001\u0000\u0000"+
-		"\u0000\u0104\u0108\u0003*\u0015\u0000\u0105\u0107\u0003,\u0016\u0000\u0106"+
-		"\u0105\u0001\u0000\u0000\u0000\u0107\u010a\u0001\u0000\u0000\u0000\u0108"+
-		"\u0106\u0001\u0000\u0000\u0000\u0108\u0109\u0001\u0000\u0000\u0000\u0109"+
-		"\u010c\u0001\u0000\u0000\u0000\u010a\u0108\u0001\u0000\u0000\u0000\u010b"+
-		"\u010d\u0003.\u0017\u0000\u010c\u010b\u0001\u0000\u0000\u0000\u010c\u010d"+
-		"\u0001\u0000\u0000\u0000\u010d)\u0001\u0000\u0000\u0000\u010e\u010f\u0005"+
-		"\u000e\u0000\u0000\u010f\u0110\u0005\u0019\u0000\u0000\u0110\u0111\u0003"+
-		"\u0012\t\u0000\u0111\u0112\u0005\u001a\u0000\u0000\u0112\u0113\u0003&"+
-		"\u0013\u0000\u0113+\u0001\u0000\u0000\u0000\u0114\u0115\u0005\u000f\u0000"+
-		"\u0000\u0115\u0116\u0005\u000e\u0000\u0000\u0116\u0117\u0005\u0019\u0000"+
-		"\u0000\u0117\u0118\u0003\u0012\t\u0000\u0118\u0119\u0005\u001a\u0000\u0000"+
-		"\u0119\u011a\u0003&\u0013\u0000\u011a-\u0001\u0000\u0000\u0000\u011b\u011c"+
-		"\u0005\u000f\u0000\u0000\u011c\u011d\u0003&\u0013\u0000\u011d/\u0001\u0000"+
-		"\u0000\u0000\u011e\u011f\u0005\u0003\u0000\u0000\u011f\u0120\u0005\u0019"+
-		"\u0000\u0000\u0120\u0121\u0003\u0012\t\u0000\u0121\u0122\u0005\u001a\u0000"+
-		"\u0000\u0122\u0123\u0003&\u0013\u0000\u01231\u0001\u0000\u0000\u0000\u0124"+
-		"\u0125\u0005\u0004\u0000\u0000\u0125\u0126\u0003\u0012\t\u0000\u01263"+
-		"\u0001\u0000\u0000\u0000\u0127\u0128\u0005\u0014\u0000\u0000\u0128\u0129"+
-		"\u0003\u0012\t\u0000\u01295\u0001\u0000\u0000\u0000\u012a\u012e\u0003"+
-		"\u0014\n\u0000\u012b\u012c\u0003<\u001e\u0000\u012c\u012d\u0003\u0014"+
-		"\n\u0000\u012d\u012f\u0001\u0000\u0000\u0000\u012e\u012b\u0001\u0000\u0000"+
-		"\u0000\u012f\u0130\u0001\u0000\u0000\u0000\u0130\u012e\u0001\u0000\u0000"+
-		"\u0000\u0130\u0131\u0001\u0000\u0000\u0000\u01317\u0001\u0000\u0000\u0000"+
-		"\u0132\u0133\u0007\u0001\u0000\u0000\u01339\u0001\u0000\u0000\u0000\u0134"+
-		"\u0135\u0007\u0002\u0000\u0000\u0135;\u0001\u0000\u0000\u0000\u0136\u0137"+
-		"\u0007\u0003\u0000\u0000\u0137=\u0001\u0000\u0000\u0000 AHTV\\`iqv~\u0085"+
-		"\u0087\u008a\u0091\u0095\u0099\u00a4\u00ab\u00b1\u00b4\u00b9\u00bd\u00c8"+
-		"\u00cd\u00d6\u00e0\u00eb\u00f9\u00ff\u0108\u010c\u0130";
+		"\u0017\u0001\u0017\u0001\u0017\u0001\u0018\u0001\u0018\u0001\u0018\u0001"+
+		"\u0018\u0001\u0018\u0001\u0018\u0001\u0019\u0001\u0019\u0001\u0019\u0001"+
+		"\u001a\u0001\u001a\u0001\u001a\u0001\u001b\u0001\u001b\u0001\u001b\u0001"+
+		"\u001b\u0004\u001b\u0132\b\u001b\u000b\u001b\f\u001b\u0133\u0001\u001c"+
+		"\u0001\u001c\u0001\u001d\u0001\u001d\u0001\u001e\u0001\u001e\u0001\u001e"+
+		"\u0000\u0000\u001f\u0000\u0002\u0004\u0006\b\n\f\u000e\u0010\u0012\u0014"+
+		"\u0016\u0018\u001a\u001c\u001e \"$&(*,.02468:<\u0000\u0004\u0001\u0000"+
+		"\u0010\u0012\u0004\u0000\t\n\f\r!\"&&\u0002\u0000\u0005\u0007  \u0002"+
+		"\u0000\u0013\u0013\u0016\u0018\u0148\u0000?\u0001\u0000\u0000\u0000\u0002"+
+		"F\u0001\u0000\u0000\u0000\u0004K\u0001\u0000\u0000\u0000\u0006S\u0001"+
+		"\u0000\u0000\u0000\b_\u0001\u0000\u0000\u0000\nl\u0001\u0000\u0000\u0000"+
+		"\f}\u0001\u0000\u0000\u0000\u000e\u008a\u0001\u0000\u0000\u0000\u0010"+
+		"\u0098\u0001\u0000\u0000\u0000\u0012\u009c\u0001\u0000\u0000\u0000\u0014"+
+		"\u00a7\u0001\u0000\u0000\u0000\u0016\u00b7\u0001\u0000\u0000\u0000\u0018"+
+		"\u00bc\u0001\u0000\u0000\u0000\u001a\u00c0\u0001\u0000\u0000\u0000\u001c"+
+		"\u00c5\u0001\u0000\u0000\u0000\u001e\u00d2\u0001\u0000\u0000\u0000 \u00d9"+
+		"\u0001\u0000\u0000\u0000\"\u00ee\u0001\u0000\u0000\u0000$\u00fc\u0001"+
+		"\u0000\u0000\u0000&\u00fe\u0001\u0000\u0000\u0000(\u0107\u0001\u0000\u0000"+
+		"\u0000*\u0111\u0001\u0000\u0000\u0000,\u0117\u0001\u0000\u0000\u0000."+
+		"\u011e\u0001\u0000\u0000\u00000\u0121\u0001\u0000\u0000\u00002\u0127\u0001"+
+		"\u0000\u0000\u00004\u012a\u0001\u0000\u0000\u00006\u012d\u0001\u0000\u0000"+
+		"\u00008\u0135\u0001\u0000\u0000\u0000:\u0137\u0001\u0000\u0000\u0000<"+
+		"\u0139\u0001\u0000\u0000\u0000>@\u0005 \u0000\u0000?>\u0001\u0000\u0000"+
+		"\u0000?@\u0001\u0000\u0000\u0000@B\u0001\u0000\u0000\u0000AC\u0003\u0002"+
+		"\u0001\u0000BA\u0001\u0000\u0000\u0000CD\u0001\u0000\u0000\u0000DB\u0001"+
+		"\u0000\u0000\u0000DE\u0001\u0000\u0000\u0000E\u0001\u0001\u0000\u0000"+
+		"\u0000FG\u0005\u0001\u0000\u0000GH\u0005 \u0000\u0000HI\u0003\u0006\u0003"+
+		"\u0000I\u0003\u0001\u0000\u0000\u0000JL\u0005\b\u0000\u0000KJ\u0001\u0000"+
+		"\u0000\u0000KL\u0001\u0000\u0000\u0000LM\u0001\u0000\u0000\u0000MN\u0005"+
+		" \u0000\u0000NO\u0005\u0019\u0000\u0000OP\u0003\u000e\u0007\u0000PQ\u0005"+
+		"\u001a\u0000\u0000QR\u0003&\u0013\u0000R\u0005\u0001\u0000\u0000\u0000"+
+		"SY\u0005\u001b\u0000\u0000TX\u0003\b\u0004\u0000UX\u0003\n\u0005\u0000"+
+		"VX\u0003\u0004\u0002\u0000WT\u0001\u0000\u0000\u0000WU\u0001\u0000\u0000"+
+		"\u0000WV\u0001\u0000\u0000\u0000X[\u0001\u0000\u0000\u0000YW\u0001\u0000"+
+		"\u0000\u0000YZ\u0001\u0000\u0000\u0000Z\\\u0001\u0000\u0000\u0000[Y\u0001"+
+		"\u0000\u0000\u0000\\]\u0005\u001c\u0000\u0000]\u0007\u0001\u0000\u0000"+
+		"\u0000^`\u0005\b\u0000\u0000_^\u0001\u0000\u0000\u0000_`\u0001\u0000\u0000"+
+		"\u0000`c\u0001\u0000\u0000\u0000ad\u0003:\u001d\u0000bd\u0005\u000b\u0000"+
+		"\u0000ca\u0001\u0000\u0000\u0000cb\u0001\u0000\u0000\u0000de\u0001\u0000"+
+		"\u0000\u0000ef\u0005 \u0000\u0000fg\u0005\u0019\u0000\u0000gh\u0003\u000e"+
+		"\u0007\u0000hi\u0005\u001a\u0000\u0000ij\u0003&\u0013\u0000j\t\u0001\u0000"+
+		"\u0000\u0000km\u0005\b\u0000\u0000lk\u0001\u0000\u0000\u0000lm\u0001\u0000"+
+		"\u0000\u0000mn\u0001\u0000\u0000\u0000no\u0003:\u001d\u0000ot\u0005 \u0000"+
+		"\u0000pq\u0005\u001e\u0000\u0000qs\u0005 \u0000\u0000rp\u0001\u0000\u0000"+
+		"\u0000sv\u0001\u0000\u0000\u0000tr\u0001\u0000\u0000\u0000tu\u0001\u0000"+
+		"\u0000\u0000uy\u0001\u0000\u0000\u0000vt\u0001\u0000\u0000\u0000wx\u0005"+
+		"\u0010\u0000\u0000xz\u0003\u0012\t\u0000yw\u0001\u0000\u0000\u0000yz\u0001"+
+		"\u0000\u0000\u0000z{\u0001\u0000\u0000\u0000{|\u0005\u001f\u0000\u0000"+
+		"|\u000b\u0001\u0000\u0000\u0000}~\u0003:\u001d\u0000~\u007f\u0005 \u0000"+
+		"\u0000\u007f\r\u0001\u0000\u0000\u0000\u0080\u0082\u0003\f\u0006\u0000"+
+		"\u0081\u0080\u0001\u0000\u0000\u0000\u0081\u0082\u0001\u0000\u0000\u0000"+
+		"\u0082\u008b\u0001\u0000\u0000\u0000\u0083\u0086\u0003\f\u0006\u0000\u0084"+
+		"\u0085\u0005\u001e\u0000\u0000\u0085\u0087\u0003\f\u0006\u0000\u0086\u0084"+
+		"\u0001\u0000\u0000\u0000\u0087\u0088\u0001\u0000\u0000\u0000\u0088\u0086"+
+		"\u0001\u0000\u0000\u0000\u0088\u0089\u0001\u0000\u0000\u0000\u0089\u008b"+
+		"\u0001\u0000\u0000\u0000\u008a\u0081\u0001\u0000\u0000\u0000\u008a\u0083"+
+		"\u0001\u0000\u0000\u0000\u008b\u000f\u0001\u0000\u0000\u0000\u008c\u008e"+
+		"\u0003\u0012\t\u0000\u008d\u008c\u0001\u0000\u0000\u0000\u008d\u008e\u0001"+
+		"\u0000\u0000\u0000\u008e\u0099\u0001\u0000\u0000\u0000\u008f\u0094\u0003"+
+		"\u0012\t\u0000\u0090\u0091\u0005\u001e\u0000\u0000\u0091\u0093\u0003\u0012"+
+		"\t\u0000\u0092\u0090\u0001\u0000\u0000\u0000\u0093\u0096\u0001\u0000\u0000"+
+		"\u0000\u0094\u0092\u0001\u0000\u0000\u0000\u0094\u0095\u0001\u0000\u0000"+
+		"\u0000\u0095\u0099\u0001\u0000\u0000\u0000\u0096\u0094\u0001\u0000\u0000"+
+		"\u0000\u0097\u0099\u0003\u0016\u000b\u0000\u0098\u008d\u0001\u0000\u0000"+
+		"\u0000\u0098\u008f\u0001\u0000\u0000\u0000\u0098\u0097\u0001\u0000\u0000"+
+		"\u0000\u0099\u0011\u0001\u0000\u0000\u0000\u009a\u009d\u0003\u0014\n\u0000"+
+		"\u009b\u009d\u00036\u001b\u0000\u009c\u009a\u0001\u0000\u0000\u0000\u009c"+
+		"\u009b\u0001\u0000\u0000\u0000\u009d\u0013\u0001\u0000\u0000\u0000\u009e"+
+		"\u00a8\u00038\u001c\u0000\u009f\u00a8\u0003\u0016\u000b\u0000\u00a0\u00a8"+
+		"\u0005 \u0000\u0000\u00a1\u00a8\u0003\u0018\f\u0000\u00a2\u00a8\u0003"+
+		"4\u001a\u0000\u00a3\u00a4\u0005\u0019\u0000\u0000\u00a4\u00a5\u0003\u0012"+
+		"\t\u0000\u00a5\u00a6\u0005\u001a\u0000\u0000\u00a6\u00a8\u0001\u0000\u0000"+
+		"\u0000\u00a7\u009e\u0001\u0000\u0000\u0000\u00a7\u009f\u0001\u0000\u0000"+
+		"\u0000\u00a7\u00a0\u0001\u0000\u0000\u0000\u00a7\u00a1\u0001\u0000\u0000"+
+		"\u0000\u00a7\u00a2\u0001\u0000\u0000\u0000\u00a7\u00a3\u0001\u0000\u0000"+
+		"\u0000\u00a8\u0015\u0001\u0000\u0000\u0000\u00a9\u00aa\u0005\r\u0000\u0000"+
+		"\u00aa\u00ab\u0005\u001d\u0000\u0000\u00ab\u00b8\u0005 \u0000\u0000\u00ac"+
+		"\u00ad\u0005\r\u0000\u0000\u00ad\u00af\u0005\u001d\u0000\u0000\u00ae\u00ac"+
+		"\u0001\u0000\u0000\u0000\u00ae\u00af\u0001\u0000\u0000\u0000\u00af\u00b2"+
+		"\u0001\u0000\u0000\u0000\u00b0\u00b1\u0005 \u0000\u0000\u00b1\u00b3\u0005"+
+		"\u001d\u0000\u0000\u00b2\u00b0\u0001\u0000\u0000\u0000\u00b3\u00b4\u0001"+
+		"\u0000\u0000\u0000\u00b4\u00b2\u0001\u0000\u0000\u0000\u00b4\u00b5\u0001"+
+		"\u0000\u0000\u0000\u00b5\u00b6\u0001\u0000\u0000\u0000\u00b6\u00b8\u0005"+
+		" \u0000\u0000\u00b7\u00a9\u0001\u0000\u0000\u0000\u00b7\u00ae\u0001\u0000"+
+		"\u0000\u0000\u00b8\u0017\u0001\u0000\u0000\u0000\u00b9\u00bd\u0003\u001a"+
+		"\r\u0000\u00ba\u00bd\u0003\u001e\u000f\u0000\u00bb\u00bd\u0003 \u0010"+
+		"\u0000\u00bc\u00b9\u0001\u0000\u0000\u0000\u00bc\u00ba\u0001\u0000\u0000"+
+		"\u0000\u00bc\u00bb\u0001\u0000\u0000\u0000\u00bd\u0019\u0001\u0000\u0000"+
+		"\u0000\u00be\u00c1\u0003\u0016\u000b\u0000\u00bf\u00c1\u0005 \u0000\u0000"+
+		"\u00c0\u00be\u0001\u0000\u0000\u0000\u00c0\u00bf\u0001\u0000\u0000\u0000"+
+		"\u00c1\u00c2\u0001\u0000\u0000\u0000\u00c2\u00c3\u0007\u0000\u0000\u0000"+
+		"\u00c3\u00c4\u0003\u0012\t\u0000\u00c4\u001b\u0001\u0000\u0000\u0000\u00c5"+
+		"\u00c6\u0003:\u001d\u0000\u00c6\u00cb\u0005 \u0000\u0000\u00c7\u00c8\u0005"+
+		"\u001e\u0000\u0000\u00c8\u00ca\u0005 \u0000\u0000\u00c9\u00c7\u0001\u0000"+
+		"\u0000\u0000\u00ca\u00cd\u0001\u0000\u0000\u0000\u00cb\u00c9\u0001\u0000"+
+		"\u0000\u0000\u00cb\u00cc\u0001\u0000\u0000\u0000\u00cc\u00d0\u0001\u0000"+
+		"\u0000\u0000\u00cd\u00cb\u0001\u0000\u0000\u0000\u00ce\u00cf\u0007\u0000"+
+		"\u0000\u0000\u00cf\u00d1\u0003\u0012\t\u0000\u00d0\u00ce\u0001\u0000\u0000"+
+		"\u0000\u00d0\u00d1\u0001\u0000\u0000\u0000\u00d1\u001d\u0001\u0000\u0000"+
+		"\u0000\u00d2\u00d3\u0005\u0002\u0000\u0000\u00d3\u00d4\u0005 \u0000\u0000"+
+		"\u00d4\u00d5\u0005\u0019\u0000\u0000\u00d5\u00d6\u0003\u0010\b\u0000\u00d6"+
+		"\u00d7\u0005\u001a\u0000\u0000\u00d7\u001f\u0001\u0000\u0000\u0000\u00d8"+
+		"\u00da\u0003\"\u0011\u0000\u00d9\u00d8\u0001\u0000\u0000\u0000\u00d9\u00da"+
+		"\u0001\u0000\u0000\u0000\u00da\u00e3\u0001\u0000\u0000\u0000\u00db\u00dc"+
+		"\u0005 \u0000\u0000\u00dc\u00dd\u0005\u0019\u0000\u0000\u00dd\u00de\u0003"+
+		"\u0010\b\u0000\u00de\u00df\u0005\u001a\u0000\u0000\u00df\u00e0\u0005\u001d"+
+		"\u0000\u0000\u00e0\u00e2\u0001\u0000\u0000\u0000\u00e1\u00db\u0001\u0000"+
+		"\u0000\u0000\u00e2\u00e5\u0001\u0000\u0000\u0000\u00e3\u00e1\u0001\u0000"+
+		"\u0000\u0000\u00e3\u00e4\u0001\u0000\u0000\u0000\u00e4\u00e6\u0001\u0000"+
+		"\u0000\u0000\u00e5\u00e3\u0001\u0000\u0000\u0000\u00e6\u00e7\u0005 \u0000"+
+		"\u0000\u00e7\u00e8\u0005\u0019\u0000\u0000\u00e8\u00e9\u0003\u0010\b\u0000"+
+		"\u00e9\u00ea\u0005\u001a\u0000\u0000\u00ea!\u0001\u0000\u0000\u0000\u00eb"+
+		"\u00ef\u0003\u0016\u000b\u0000\u00ec\u00ed\u0005 \u0000\u0000\u00ed\u00ef"+
+		"\u0005\u001d\u0000\u0000\u00ee\u00eb\u0001\u0000\u0000\u0000\u00ee\u00ec"+
+		"\u0001\u0000\u0000\u0000\u00ef#\u0001\u0000\u0000\u0000\u00f0\u00fd\u0003"+
+		"(\u0014\u0000\u00f1\u00f2\u0003\u001c\u000e\u0000\u00f2\u00f3\u0005\u001f"+
+		"\u0000\u0000\u00f3\u00fd\u0001\u0000\u0000\u0000\u00f4\u00f5\u00032\u0019"+
+		"\u0000\u00f5\u00f6\u0005\u001f\u0000\u0000\u00f6\u00fd\u0001\u0000\u0000"+
+		"\u0000\u00f7\u00fd\u00030\u0018\u0000\u00f8\u00fd\u0003&\u0013\u0000\u00f9"+
+		"\u00fa\u0003\u0018\f\u0000\u00fa\u00fb\u0005\u001f\u0000\u0000\u00fb\u00fd"+
+		"\u0001\u0000\u0000\u0000\u00fc\u00f0\u0001\u0000\u0000\u0000\u00fc\u00f1"+
+		"\u0001\u0000\u0000\u0000\u00fc\u00f4\u0001\u0000\u0000\u0000\u00fc\u00f7"+
+		"\u0001\u0000\u0000\u0000\u00fc\u00f8\u0001\u0000\u0000\u0000\u00fc\u00f9"+
+		"\u0001\u0000\u0000\u0000\u00fd%\u0001\u0000\u0000\u0000\u00fe\u0102\u0005"+
+		"\u001b\u0000\u0000\u00ff\u0101\u0003$\u0012\u0000\u0100\u00ff\u0001\u0000"+
+		"\u0000\u0000\u0101\u0104\u0001\u0000\u0000\u0000\u0102\u0100\u0001\u0000"+
+		"\u0000\u0000\u0102\u0103\u0001\u0000\u0000\u0000\u0103\u0105\u0001\u0000"+
+		"\u0000\u0000\u0104\u0102\u0001\u0000\u0000\u0000\u0105\u0106\u0005\u001c"+
+		"\u0000\u0000\u0106\'\u0001\u0000\u0000\u0000\u0107\u010b\u0003*\u0015"+
+		"\u0000\u0108\u010a\u0003,\u0016\u0000\u0109\u0108\u0001\u0000\u0000\u0000"+
+		"\u010a\u010d\u0001\u0000\u0000\u0000\u010b\u0109\u0001\u0000\u0000\u0000"+
+		"\u010b\u010c\u0001\u0000\u0000\u0000\u010c\u010f\u0001\u0000\u0000\u0000"+
+		"\u010d\u010b\u0001\u0000\u0000\u0000\u010e\u0110\u0003.\u0017\u0000\u010f"+
+		"\u010e\u0001\u0000\u0000\u0000\u010f\u0110\u0001\u0000\u0000\u0000\u0110"+
+		")\u0001\u0000\u0000\u0000\u0111\u0112\u0005\u000e\u0000\u0000\u0112\u0113"+
+		"\u0005\u0019\u0000\u0000\u0113\u0114\u0003\u0012\t\u0000\u0114\u0115\u0005"+
+		"\u001a\u0000\u0000\u0115\u0116\u0003&\u0013\u0000\u0116+\u0001\u0000\u0000"+
+		"\u0000\u0117\u0118\u0005\u000f\u0000\u0000\u0118\u0119\u0005\u000e\u0000"+
+		"\u0000\u0119\u011a\u0005\u0019\u0000\u0000\u011a\u011b\u0003\u0012\t\u0000"+
+		"\u011b\u011c\u0005\u001a\u0000\u0000\u011c\u011d\u0003&\u0013\u0000\u011d"+
+		"-\u0001\u0000\u0000\u0000\u011e\u011f\u0005\u000f\u0000\u0000\u011f\u0120"+
+		"\u0003&\u0013\u0000\u0120/\u0001\u0000\u0000\u0000\u0121\u0122\u0005\u0003"+
+		"\u0000\u0000\u0122\u0123\u0005\u0019\u0000\u0000\u0123\u0124\u0003\u0012"+
+		"\t\u0000\u0124\u0125\u0005\u001a\u0000\u0000\u0125\u0126\u0003&\u0013"+
+		"\u0000\u01261\u0001\u0000\u0000\u0000\u0127\u0128\u0005\u0004\u0000\u0000"+
+		"\u0128\u0129\u0003\u0012\t\u0000\u01293\u0001\u0000\u0000\u0000\u012a"+
+		"\u012b\u0005\u0014\u0000\u0000\u012b\u012c\u0003\u0012\t\u0000\u012c5"+
+		"\u0001\u0000\u0000\u0000\u012d\u0131\u0003\u0014\n\u0000\u012e\u012f\u0003"+
+		"<\u001e\u0000\u012f\u0130\u0003\u0014\n\u0000\u0130\u0132\u0001\u0000"+
+		"\u0000\u0000\u0131\u012e\u0001\u0000\u0000\u0000\u0132\u0133\u0001\u0000"+
+		"\u0000\u0000\u0133\u0131\u0001\u0000\u0000\u0000\u0133\u0134\u0001\u0000"+
+		"\u0000\u0000\u01347\u0001\u0000\u0000\u0000\u0135\u0136\u0007\u0001\u0000"+
+		"\u0000\u01369\u0001\u0000\u0000\u0000\u0137\u0138\u0007\u0002\u0000\u0000"+
+		"\u0138;\u0001\u0000\u0000\u0000\u0139\u013a\u0007\u0003\u0000\u0000\u013a"+
+		"=\u0001\u0000\u0000\u0000!?DKWY_clty\u0081\u0088\u008a\u008d\u0094\u0098"+
+		"\u009c\u00a7\u00ae\u00b4\u00b7\u00bc\u00c0\u00cb\u00d0\u00d9\u00e3\u00ee"+
+		"\u00fc\u0102\u010b\u010f\u0133";
 	public static final ATN _ATN =
 		new ATNDeserializer().deserialize(_serializedATN.toCharArray());
 	static {
Index: Parser/src/generated/antlrGrammarBaseListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\\antlrGrammar.g4 by ANTLR 4.10.1\r\npackage generated;\r\n\r\nimport org.antlr.v4.runtime.ParserRuleContext;\r\nimport org.antlr.v4.runtime.tree.ErrorNode;\r\nimport org.antlr.v4.runtime.tree.TerminalNode;\r\n\r\n/**\r\n * This class provides an empty implementation of {@link antlrGrammarListener},\r\n * which can be extended to create a listener which only needs to handle a subset\r\n * of the available methods.\r\n */\r\npublic class antlrGrammarBaseListener implements antlrGrammarListener {\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterProgramm(antlrGrammarParser.ProgrammContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitProgramm(antlrGrammarParser.ProgrammContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJClass(antlrGrammarParser.JClassContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJClass(antlrGrammarParser.JClassContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterConstructor(antlrGrammarParser.ConstructorContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitConstructor(antlrGrammarParser.ConstructorContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterClassBody(antlrGrammarParser.ClassBodyContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitClassBody(antlrGrammarParser.ClassBodyContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterMethodDeclaration(antlrGrammarParser.MethodDeclarationContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitMethodDeclaration(antlrGrammarParser.MethodDeclarationContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterFieldDeclaration(antlrGrammarParser.FieldDeclarationContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitFieldDeclaration(antlrGrammarParser.FieldDeclarationContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterMethodParameter(antlrGrammarParser.MethodParameterContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitMethodParameter(antlrGrammarParser.MethodParameterContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterNMethodParameters(antlrGrammarParser.NMethodParametersContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitNMethodParameters(antlrGrammarParser.NMethodParametersContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterNArguments(antlrGrammarParser.NArgumentsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitNArguments(antlrGrammarParser.NArgumentsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterExpression(antlrGrammarParser.ExpressionContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitExpression(antlrGrammarParser.ExpressionContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterBasicexpressions(antlrGrammarParser.BasicexpressionsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitBasicexpressions(antlrGrammarParser.BasicexpressionsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterInstVar(antlrGrammarParser.InstVarContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitInstVar(antlrGrammarParser.InstVarContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterStatementExpressions(antlrGrammarParser.StatementExpressionsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitStatementExpressions(antlrGrammarParser.StatementExpressionsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterAssign(antlrGrammarParser.AssignContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitAssign(antlrGrammarParser.AssignContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterLocalVarDeclaration(antlrGrammarParser.LocalVarDeclarationContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitLocalVarDeclaration(antlrGrammarParser.LocalVarDeclarationContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJNew(antlrGrammarParser.JNewContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJNew(antlrGrammarParser.JNewContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterMethodCall(antlrGrammarParser.MethodCallContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitMethodCall(antlrGrammarParser.MethodCallContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterMethodCallPrefix(antlrGrammarParser.MethodCallPrefixContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitMethodCallPrefix(antlrGrammarParser.MethodCallPrefixContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterStatement(antlrGrammarParser.StatementContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitStatement(antlrGrammarParser.StatementContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterBlock(antlrGrammarParser.BlockContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitBlock(antlrGrammarParser.BlockContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterIfelse(antlrGrammarParser.IfelseContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitIfelse(antlrGrammarParser.IfelseContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJIf(antlrGrammarParser.JIfContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJIf(antlrGrammarParser.JIfContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJElseIf(antlrGrammarParser.JElseIfContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJElseIf(antlrGrammarParser.JElseIfContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJElse(antlrGrammarParser.JElseContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJElse(antlrGrammarParser.JElseContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJWhile(antlrGrammarParser.JWhileContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJWhile(antlrGrammarParser.JWhileContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterJReturn(antlrGrammarParser.JReturnContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitJReturn(antlrGrammarParser.JReturnContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterUnary(antlrGrammarParser.UnaryContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitUnary(antlrGrammarParser.UnaryContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterBinary(antlrGrammarParser.BinaryContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitBinary(antlrGrammarParser.BinaryContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterBaseType(antlrGrammarParser.BaseTypeContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitBaseType(antlrGrammarParser.BaseTypeContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterObjectType(antlrGrammarParser.ObjectTypeContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitObjectType(antlrGrammarParser.ObjectTypeContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterOperators(antlrGrammarParser.OperatorsContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitOperators(antlrGrammarParser.OperatorsContext ctx) { }\r\n\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void enterEveryRule(ParserRuleContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void exitEveryRule(ParserRuleContext ctx) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void visitTerminal(TerminalNode node) { }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation does nothing.</p>\r\n\t */\r\n\t@Override public void visitErrorNode(ErrorNode node) { }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammarBaseListener.java b/Parser/src/generated/antlrGrammarBaseListener.java
--- a/Parser/src/generated/antlrGrammarBaseListener.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammarBaseListener.java	(date 1652265657926)
@@ -1,4 +1,4 @@
-// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
+// Generated from C:/Users/Administrator/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
 package generated;
 
 import org.antlr.v4.runtime.ParserRuleContext;
Index: Parser/src/generated/antlrGrammar.interp
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>token literal names:\r\nnull\r\n'class'\r\n'new'\r\n'while'\r\n'return'\r\n'int'\r\n'char'\r\n'boolean'\r\nnull\r\nnull\r\n'null'\r\n'void'\r\n'super'\r\n'this'\r\n'if'\r\n'else'\r\n'='\r\n'+='\r\n'-='\r\nnull\r\n'!'\r\nnull\r\nnull\r\nnull\r\nnull\r\n'('\r\n')'\r\n'{'\r\n'}'\r\n'.'\r\n','\r\n';'\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\n\r\ntoken symbolic names:\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nnull\r\nAccessModifier\r\nJBoolean\r\nJNull\r\nVoid\r\nSuper\r\nThis\r\nIf\r\nElse\r\nEqual\r\nPlusEqual\r\nMinusEqual\r\nComperator\r\nNotOperator\r\nOpBeforeOrAfterIdentifier\r\nPointOperator\r\nAddSubOperator\r\nLogicalOperator\r\nLBracket\r\nRBracket\r\nCurlyLBracket\r\nCurlyRBracket\r\nDot\r\nComma\r\nSemicolon\r\nIdentifier\r\nJCharacter\r\nJInteger\r\nWS\r\nComment\r\nLineComment\r\nJString\r\n\r\nrule names:\r\nprogramm\r\njClass\r\nconstructor\r\nclassBody\r\nmethodDeclaration\r\nfieldDeclaration\r\nmethodParameter\r\nnMethodParameters\r\nnArguments\r\nexpression\r\nbasicexpressions\r\ninstVar\r\nstatementExpressions\r\nassign\r\nlocalVarDeclaration\r\njNew\r\nmethodCall\r\nmethodCallPrefix\r\nstatement\r\nblock\r\nifelse\r\njIf\r\njElseIf\r\njElse\r\njWhile\r\njReturn\r\nunary\r\nbinary\r\nbaseType\r\nobjectType\r\noperators\r\n\r\n\r\natn:\r\n[4, 1, 38, 313, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1, 0, 4, 0, 64, 8, 0, 11, 0, 12, 0, 65, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 73, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 85, 8, 3, 10, 3, 12, 3, 88, 9, 3, 1, 3, 1, 3, 1, 4, 3, 4, 93, 8, 4, 1, 4, 1, 4, 3, 4, 97, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 3, 5, 106, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 112, 8, 5, 10, 5, 12, 5, 115, 9, 5, 1, 5, 1, 5, 3, 5, 119, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 3, 7, 127, 8, 7, 1, 7, 1, 7, 1, 7, 4, 7, 132, 8, 7, 11, 7, 12, 7, 133, 3, 7, 136, 8, 7, 1, 8, 3, 8, 139, 8, 8, 1, 8, 1, 8, 1, 8, 5, 8, 144, 8, 8, 10, 8, 12, 8, 147, 9, 8, 1, 8, 3, 8, 150, 8, 8, 1, 9, 1, 9, 3, 9, 154, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 165, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 172, 8, 11, 1, 11, 1, 11, 4, 11, 176, 8, 11, 11, 11, 12, 11, 177, 1, 11, 3, 11, 181, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 186, 8, 12, 1, 13, 1, 13, 3, 13, 190, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 199, 8, 14, 10, 14, 12, 14, 202, 9, 14, 1, 14, 1, 14, 3, 14, 206, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 3, 16, 215, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 223, 8, 16, 10, 16, 12, 16, 226, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 236, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 250, 8, 18, 1, 19, 1, 19, 5, 19, 254, 8, 19, 10, 19, 12, 19, 257, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 263, 8, 20, 10, 20, 12, 20, 266, 9, 20, 1, 20, 3, 20, 269, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 303, 8, 27, 11, 27, 12, 27, 304, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 0, 0, 31, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 4, 1, 0, 16, 18, 4, 0, 9, 10, 12, 13, 33, 34, 38, 38, 2, 0, 5, 7, 32, 32, 2, 0, 19, 19, 22, 24, 324, 0, 63, 1, 0, 0, 0, 2, 67, 1, 0, 0, 0, 4, 72, 1, 0, 0, 0, 6, 80, 1, 0, 0, 0, 8, 92, 1, 0, 0, 0, 10, 105, 1, 0, 0, 0, 12, 122, 1, 0, 0, 0, 14, 135, 1, 0, 0, 0, 16, 149, 1, 0, 0, 0, 18, 153, 1, 0, 0, 0, 20, 164, 1, 0, 0, 0, 22, 180, 1, 0, 0, 0, 24, 185, 1, 0, 0, 0, 26, 189, 1, 0, 0, 0, 28, 194, 1, 0, 0, 0, 30, 207, 1, 0, 0, 0, 32, 214, 1, 0, 0, 0, 34, 235, 1, 0, 0, 0, 36, 249, 1, 0, 0, 0, 38, 251, 1, 0, 0, 0, 40, 260, 1, 0, 0, 0, 42, 270, 1, 0, 0, 0, 44, 276, 1, 0, 0, 0, 46, 283, 1, 0, 0, 0, 48, 286, 1, 0, 0, 0, 50, 292, 1, 0, 0, 0, 52, 295, 1, 0, 0, 0, 54, 298, 1, 0, 0, 0, 56, 306, 1, 0, 0, 0, 58, 308, 1, 0, 0, 0, 60, 310, 1, 0, 0, 0, 62, 64, 3, 2, 1, 0, 63, 62, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 1, 1, 0, 0, 0, 67, 68, 5, 1, 0, 0, 68, 69, 5, 32, 0, 0, 69, 70, 3, 6, 3, 0, 70, 3, 1, 0, 0, 0, 71, 73, 5, 8, 0, 0, 72, 71, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 74, 1, 0, 0, 0, 74, 75, 5, 32, 0, 0, 75, 76, 5, 25, 0, 0, 76, 77, 3, 14, 7, 0, 77, 78, 5, 26, 0, 0, 78, 79, 3, 38, 19, 0, 79, 5, 1, 0, 0, 0, 80, 86, 5, 27, 0, 0, 81, 85, 3, 8, 4, 0, 82, 85, 3, 10, 5, 0, 83, 85, 3, 4, 2, 0, 84, 81, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 84, 83, 1, 0, 0, 0, 85, 88, 1, 0, 0, 0, 86, 84, 1, 0, 0, 0, 86, 87, 1, 0, 0, 0, 87, 89, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0, 89, 90, 5, 28, 0, 0, 90, 7, 1, 0, 0, 0, 91, 93, 5, 8, 0, 0, 92, 91, 1, 0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 96, 1, 0, 0, 0, 94, 97, 3, 58, 29, 0, 95, 97, 5, 11, 0, 0, 96, 94, 1, 0, 0, 0, 96, 95, 1, 0, 0, 0, 97, 98, 1, 0, 0, 0, 98, 99, 5, 32, 0, 0, 99, 100, 5, 25, 0, 0, 100, 101, 3, 14, 7, 0, 101, 102, 5, 26, 0, 0, 102, 103, 3, 38, 19, 0, 103, 9, 1, 0, 0, 0, 104, 106, 5, 8, 0, 0, 105, 104, 1, 0, 0, 0, 105, 106, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 108, 3, 58, 29, 0, 108, 113, 5, 32, 0, 0, 109, 110, 5, 30, 0, 0, 110, 112, 5, 32, 0, 0, 111, 109, 1, 0, 0, 0, 112, 115, 1, 0, 0, 0, 113, 111, 1, 0, 0, 0, 113, 114, 1, 0, 0, 0, 114, 118, 1, 0, 0, 0, 115, 113, 1, 0, 0, 0, 116, 117, 5, 16, 0, 0, 117, 119, 3, 18, 9, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 120, 1, 0, 0, 0, 120, 121, 5, 31, 0, 0, 121, 11, 1, 0, 0, 0, 122, 123, 3, 58, 29, 0, 123, 124, 5, 32, 0, 0, 124, 13, 1, 0, 0, 0, 125, 127, 3, 12, 6, 0, 126, 125, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 136, 1, 0, 0, 0, 128, 131, 3, 12, 6, 0, 129, 130, 5, 30, 0, 0, 130, 132, 3, 12, 6, 0, 131, 129, 1, 0, 0, 0, 132, 133, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 133, 134, 1, 0, 0, 0, 134, 136, 1, 0, 0, 0, 135, 126, 1, 0, 0, 0, 135, 128, 1, 0, 0, 0, 136, 15, 1, 0, 0, 0, 137, 139, 3, 18, 9, 0, 138, 137, 1, 0, 0, 0, 138, 139, 1, 0, 0, 0, 139, 150, 1, 0, 0, 0, 140, 145, 3, 18, 9, 0, 141, 142, 5, 30, 0, 0, 142, 144, 3, 18, 9, 0, 143, 141, 1, 0, 0, 0, 144, 147, 1, 0, 0, 0, 145, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 150, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 148, 150, 3, 22, 11, 0, 149, 138, 1, 0, 0, 0, 149, 140, 1, 0, 0, 0, 149, 148, 1, 0, 0, 0, 150, 17, 1, 0, 0, 0, 151, 154, 3, 20, 10, 0, 152, 154, 3, 54, 27, 0, 153, 151, 1, 0, 0, 0, 153, 152, 1, 0, 0, 0, 154, 19, 1, 0, 0, 0, 155, 165, 3, 56, 28, 0, 156, 165, 3, 22, 11, 0, 157, 165, 5, 32, 0, 0, 158, 165, 3, 24, 12, 0, 159, 165, 3, 52, 26, 0, 160, 161, 5, 25, 0, 0, 161, 162, 3, 18, 9, 0, 162, 163, 5, 26, 0, 0, 163, 165, 1, 0, 0, 0, 164, 155, 1, 0, 0, 0, 164, 156, 1, 0, 0, 0, 164, 157, 1, 0, 0, 0, 164, 158, 1, 0, 0, 0, 164, 159, 1, 0, 0, 0, 164, 160, 1, 0, 0, 0, 165, 21, 1, 0, 0, 0, 166, 167, 5, 13, 0, 0, 167, 168, 5, 29, 0, 0, 168, 181, 5, 32, 0, 0, 169, 170, 5, 13, 0, 0, 170, 172, 5, 29, 0, 0, 171, 169, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 175, 1, 0, 0, 0, 173, 174, 5, 32, 0, 0, 174, 176, 5, 29, 0, 0, 175, 173, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 1, 0, 0, 0, 179, 181, 5, 32, 0, 0, 180, 166, 1, 0, 0, 0, 180, 171, 1, 0, 0, 0, 181, 23, 1, 0, 0, 0, 182, 186, 3, 26, 13, 0, 183, 186, 3, 30, 15, 0, 184, 186, 3, 32, 16, 0, 185, 182, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 184, 1, 0, 0, 0, 186, 25, 1, 0, 0, 0, 187, 190, 3, 22, 11, 0, 188, 190, 5, 32, 0, 0, 189, 187, 1, 0, 0, 0, 189, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191, 192, 7, 0, 0, 0, 192, 193, 3, 18, 9, 0, 193, 27, 1, 0, 0, 0, 194, 195, 3, 58, 29, 0, 195, 200, 5, 32, 0, 0, 196, 197, 5, 30, 0, 0, 197, 199, 5, 32, 0, 0, 198, 196, 1, 0, 0, 0, 199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 205, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 203, 204, 7, 0, 0, 0, 204, 206, 3, 18, 9, 0, 205, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 29, 1, 0, 0, 0, 207, 208, 5, 2, 0, 0, 208, 209, 5, 32, 0, 0, 209, 210, 5, 25, 0, 0, 210, 211, 3, 16, 8, 0, 211, 212, 5, 26, 0, 0, 212, 31, 1, 0, 0, 0, 213, 215, 3, 34, 17, 0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 224, 1, 0, 0, 0, 216, 217, 5, 32, 0, 0, 217, 218, 5, 25, 0, 0, 218, 219, 3, 16, 8, 0, 219, 220, 5, 26, 0, 0, 220, 221, 5, 29, 0, 0, 221, 223, 1, 0, 0, 0, 222, 216, 1, 0, 0, 0, 223, 226, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 227, 228, 5, 32, 0, 0, 228, 229, 5, 25, 0, 0, 229, 230, 3, 16, 8, 0, 230, 231, 5, 26, 0, 0, 231, 33, 1, 0, 0, 0, 232, 236, 3, 22, 11, 0, 233, 234, 5, 32, 0, 0, 234, 236, 5, 29, 0, 0, 235, 232, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 236, 35, 1, 0, 0, 0, 237, 250, 3, 40, 20, 0, 238, 239, 3, 28, 14, 0, 239, 240, 5, 31, 0, 0, 240, 250, 1, 0, 0, 0, 241, 242, 3, 50, 25, 0, 242, 243, 5, 31, 0, 0, 243, 250, 1, 0, 0, 0, 244, 250, 3, 48, 24, 0, 245, 250, 3, 38, 19, 0, 246, 247, 3, 24, 12, 0, 247, 248, 5, 31, 0, 0, 248, 250, 1, 0, 0, 0, 249, 237, 1, 0, 0, 0, 249, 238, 1, 0, 0, 0, 249, 241, 1, 0, 0, 0, 249, 244, 1, 0, 0, 0, 249, 245, 1, 0, 0, 0, 249, 246, 1, 0, 0, 0, 250, 37, 1, 0, 0, 0, 251, 255, 5, 27, 0, 0, 252, 254, 3, 36, 18, 0, 253, 252, 1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 258, 259, 5, 28, 0, 0, 259, 39, 1, 0, 0, 0, 260, 264, 3, 42, 21, 0, 261, 263, 3, 44, 22, 0, 262, 261, 1, 0, 0, 0, 263, 266, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 267, 269, 3, 46, 23, 0, 268, 267, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 41, 1, 0, 0, 0, 270, 271, 5, 14, 0, 0, 271, 272, 5, 25, 0, 0, 272, 273, 3, 18, 9, 0, 273, 274, 5, 26, 0, 0, 274, 275, 3, 38, 19, 0, 275, 43, 1, 0, 0, 0, 276, 277, 5, 15, 0, 0, 277, 278, 5, 14, 0, 0, 278, 279, 5, 25, 0, 0, 279, 280, 3, 18, 9, 0, 280, 281, 5, 26, 0, 0, 281, 282, 3, 38, 19, 0, 282, 45, 1, 0, 0, 0, 283, 284, 5, 15, 0, 0, 284, 285, 3, 38, 19, 0, 285, 47, 1, 0, 0, 0, 286, 287, 5, 3, 0, 0, 287, 288, 5, 25, 0, 0, 288, 289, 3, 18, 9, 0, 289, 290, 5, 26, 0, 0, 290, 291, 3, 38, 19, 0, 291, 49, 1, 0, 0, 0, 292, 293, 5, 4, 0, 0, 293, 294, 3, 18, 9, 0, 294, 51, 1, 0, 0, 0, 295, 296, 5, 20, 0, 0, 296, 297, 3, 18, 9, 0, 297, 53, 1, 0, 0, 0, 298, 302, 3, 20, 10, 0, 299, 300, 3, 60, 30, 0, 300, 301, 3, 20, 10, 0, 301, 303, 1, 0, 0, 0, 302, 299, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 55, 1, 0, 0, 0, 306, 307, 7, 1, 0, 0, 307, 57, 1, 0, 0, 0, 308, 309, 7, 2, 0, 0, 309, 59, 1, 0, 0, 0, 310, 311, 7, 3, 0, 0, 311, 61, 1, 0, 0, 0, 32, 65, 72, 84, 86, 92, 96, 105, 113, 118, 126, 133, 135, 138, 145, 149, 153, 164, 171, 177, 180, 185, 189, 200, 205, 214, 224, 235, 249, 255, 264, 268, 304]
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammar.interp b/Parser/src/generated/antlrGrammar.interp
--- a/Parser/src/generated/antlrGrammar.interp	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammar.interp	(date 1652265657879)
@@ -115,4 +115,4 @@
 
 
 atn:
-[4, 1, 38, 313, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1, 0, 4, 0, 64, 8, 0, 11, 0, 12, 0, 65, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 73, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 85, 8, 3, 10, 3, 12, 3, 88, 9, 3, 1, 3, 1, 3, 1, 4, 3, 4, 93, 8, 4, 1, 4, 1, 4, 3, 4, 97, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 3, 5, 106, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 112, 8, 5, 10, 5, 12, 5, 115, 9, 5, 1, 5, 1, 5, 3, 5, 119, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 3, 7, 127, 8, 7, 1, 7, 1, 7, 1, 7, 4, 7, 132, 8, 7, 11, 7, 12, 7, 133, 3, 7, 136, 8, 7, 1, 8, 3, 8, 139, 8, 8, 1, 8, 1, 8, 1, 8, 5, 8, 144, 8, 8, 10, 8, 12, 8, 147, 9, 8, 1, 8, 3, 8, 150, 8, 8, 1, 9, 1, 9, 3, 9, 154, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 165, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 172, 8, 11, 1, 11, 1, 11, 4, 11, 176, 8, 11, 11, 11, 12, 11, 177, 1, 11, 3, 11, 181, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 186, 8, 12, 1, 13, 1, 13, 3, 13, 190, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 199, 8, 14, 10, 14, 12, 14, 202, 9, 14, 1, 14, 1, 14, 3, 14, 206, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 3, 16, 215, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 223, 8, 16, 10, 16, 12, 16, 226, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 236, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 250, 8, 18, 1, 19, 1, 19, 5, 19, 254, 8, 19, 10, 19, 12, 19, 257, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 263, 8, 20, 10, 20, 12, 20, 266, 9, 20, 1, 20, 3, 20, 269, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 303, 8, 27, 11, 27, 12, 27, 304, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 0, 0, 31, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 4, 1, 0, 16, 18, 4, 0, 9, 10, 12, 13, 33, 34, 38, 38, 2, 0, 5, 7, 32, 32, 2, 0, 19, 19, 22, 24, 324, 0, 63, 1, 0, 0, 0, 2, 67, 1, 0, 0, 0, 4, 72, 1, 0, 0, 0, 6, 80, 1, 0, 0, 0, 8, 92, 1, 0, 0, 0, 10, 105, 1, 0, 0, 0, 12, 122, 1, 0, 0, 0, 14, 135, 1, 0, 0, 0, 16, 149, 1, 0, 0, 0, 18, 153, 1, 0, 0, 0, 20, 164, 1, 0, 0, 0, 22, 180, 1, 0, 0, 0, 24, 185, 1, 0, 0, 0, 26, 189, 1, 0, 0, 0, 28, 194, 1, 0, 0, 0, 30, 207, 1, 0, 0, 0, 32, 214, 1, 0, 0, 0, 34, 235, 1, 0, 0, 0, 36, 249, 1, 0, 0, 0, 38, 251, 1, 0, 0, 0, 40, 260, 1, 0, 0, 0, 42, 270, 1, 0, 0, 0, 44, 276, 1, 0, 0, 0, 46, 283, 1, 0, 0, 0, 48, 286, 1, 0, 0, 0, 50, 292, 1, 0, 0, 0, 52, 295, 1, 0, 0, 0, 54, 298, 1, 0, 0, 0, 56, 306, 1, 0, 0, 0, 58, 308, 1, 0, 0, 0, 60, 310, 1, 0, 0, 0, 62, 64, 3, 2, 1, 0, 63, 62, 1, 0, 0, 0, 64, 65, 1, 0, 0, 0, 65, 63, 1, 0, 0, 0, 65, 66, 1, 0, 0, 0, 66, 1, 1, 0, 0, 0, 67, 68, 5, 1, 0, 0, 68, 69, 5, 32, 0, 0, 69, 70, 3, 6, 3, 0, 70, 3, 1, 0, 0, 0, 71, 73, 5, 8, 0, 0, 72, 71, 1, 0, 0, 0, 72, 73, 1, 0, 0, 0, 73, 74, 1, 0, 0, 0, 74, 75, 5, 32, 0, 0, 75, 76, 5, 25, 0, 0, 76, 77, 3, 14, 7, 0, 77, 78, 5, 26, 0, 0, 78, 79, 3, 38, 19, 0, 79, 5, 1, 0, 0, 0, 80, 86, 5, 27, 0, 0, 81, 85, 3, 8, 4, 0, 82, 85, 3, 10, 5, 0, 83, 85, 3, 4, 2, 0, 84, 81, 1, 0, 0, 0, 84, 82, 1, 0, 0, 0, 84, 83, 1, 0, 0, 0, 85, 88, 1, 0, 0, 0, 86, 84, 1, 0, 0, 0, 86, 87, 1, 0, 0, 0, 87, 89, 1, 0, 0, 0, 88, 86, 1, 0, 0, 0, 89, 90, 5, 28, 0, 0, 90, 7, 1, 0, 0, 0, 91, 93, 5, 8, 0, 0, 92, 91, 1, 0, 0, 0, 92, 93, 1, 0, 0, 0, 93, 96, 1, 0, 0, 0, 94, 97, 3, 58, 29, 0, 95, 97, 5, 11, 0, 0, 96, 94, 1, 0, 0, 0, 96, 95, 1, 0, 0, 0, 97, 98, 1, 0, 0, 0, 98, 99, 5, 32, 0, 0, 99, 100, 5, 25, 0, 0, 100, 101, 3, 14, 7, 0, 101, 102, 5, 26, 0, 0, 102, 103, 3, 38, 19, 0, 103, 9, 1, 0, 0, 0, 104, 106, 5, 8, 0, 0, 105, 104, 1, 0, 0, 0, 105, 106, 1, 0, 0, 0, 106, 107, 1, 0, 0, 0, 107, 108, 3, 58, 29, 0, 108, 113, 5, 32, 0, 0, 109, 110, 5, 30, 0, 0, 110, 112, 5, 32, 0, 0, 111, 109, 1, 0, 0, 0, 112, 115, 1, 0, 0, 0, 113, 111, 1, 0, 0, 0, 113, 114, 1, 0, 0, 0, 114, 118, 1, 0, 0, 0, 115, 113, 1, 0, 0, 0, 116, 117, 5, 16, 0, 0, 117, 119, 3, 18, 9, 0, 118, 116, 1, 0, 0, 0, 118, 119, 1, 0, 0, 0, 119, 120, 1, 0, 0, 0, 120, 121, 5, 31, 0, 0, 121, 11, 1, 0, 0, 0, 122, 123, 3, 58, 29, 0, 123, 124, 5, 32, 0, 0, 124, 13, 1, 0, 0, 0, 125, 127, 3, 12, 6, 0, 126, 125, 1, 0, 0, 0, 126, 127, 1, 0, 0, 0, 127, 136, 1, 0, 0, 0, 128, 131, 3, 12, 6, 0, 129, 130, 5, 30, 0, 0, 130, 132, 3, 12, 6, 0, 131, 129, 1, 0, 0, 0, 132, 133, 1, 0, 0, 0, 133, 131, 1, 0, 0, 0, 133, 134, 1, 0, 0, 0, 134, 136, 1, 0, 0, 0, 135, 126, 1, 0, 0, 0, 135, 128, 1, 0, 0, 0, 136, 15, 1, 0, 0, 0, 137, 139, 3, 18, 9, 0, 138, 137, 1, 0, 0, 0, 138, 139, 1, 0, 0, 0, 139, 150, 1, 0, 0, 0, 140, 145, 3, 18, 9, 0, 141, 142, 5, 30, 0, 0, 142, 144, 3, 18, 9, 0, 143, 141, 1, 0, 0, 0, 144, 147, 1, 0, 0, 0, 145, 143, 1, 0, 0, 0, 145, 146, 1, 0, 0, 0, 146, 150, 1, 0, 0, 0, 147, 145, 1, 0, 0, 0, 148, 150, 3, 22, 11, 0, 149, 138, 1, 0, 0, 0, 149, 140, 1, 0, 0, 0, 149, 148, 1, 0, 0, 0, 150, 17, 1, 0, 0, 0, 151, 154, 3, 20, 10, 0, 152, 154, 3, 54, 27, 0, 153, 151, 1, 0, 0, 0, 153, 152, 1, 0, 0, 0, 154, 19, 1, 0, 0, 0, 155, 165, 3, 56, 28, 0, 156, 165, 3, 22, 11, 0, 157, 165, 5, 32, 0, 0, 158, 165, 3, 24, 12, 0, 159, 165, 3, 52, 26, 0, 160, 161, 5, 25, 0, 0, 161, 162, 3, 18, 9, 0, 162, 163, 5, 26, 0, 0, 163, 165, 1, 0, 0, 0, 164, 155, 1, 0, 0, 0, 164, 156, 1, 0, 0, 0, 164, 157, 1, 0, 0, 0, 164, 158, 1, 0, 0, 0, 164, 159, 1, 0, 0, 0, 164, 160, 1, 0, 0, 0, 165, 21, 1, 0, 0, 0, 166, 167, 5, 13, 0, 0, 167, 168, 5, 29, 0, 0, 168, 181, 5, 32, 0, 0, 169, 170, 5, 13, 0, 0, 170, 172, 5, 29, 0, 0, 171, 169, 1, 0, 0, 0, 171, 172, 1, 0, 0, 0, 172, 175, 1, 0, 0, 0, 173, 174, 5, 32, 0, 0, 174, 176, 5, 29, 0, 0, 175, 173, 1, 0, 0, 0, 176, 177, 1, 0, 0, 0, 177, 175, 1, 0, 0, 0, 177, 178, 1, 0, 0, 0, 178, 179, 1, 0, 0, 0, 179, 181, 5, 32, 0, 0, 180, 166, 1, 0, 0, 0, 180, 171, 1, 0, 0, 0, 181, 23, 1, 0, 0, 0, 182, 186, 3, 26, 13, 0, 183, 186, 3, 30, 15, 0, 184, 186, 3, 32, 16, 0, 185, 182, 1, 0, 0, 0, 185, 183, 1, 0, 0, 0, 185, 184, 1, 0, 0, 0, 186, 25, 1, 0, 0, 0, 187, 190, 3, 22, 11, 0, 188, 190, 5, 32, 0, 0, 189, 187, 1, 0, 0, 0, 189, 188, 1, 0, 0, 0, 190, 191, 1, 0, 0, 0, 191, 192, 7, 0, 0, 0, 192, 193, 3, 18, 9, 0, 193, 27, 1, 0, 0, 0, 194, 195, 3, 58, 29, 0, 195, 200, 5, 32, 0, 0, 196, 197, 5, 30, 0, 0, 197, 199, 5, 32, 0, 0, 198, 196, 1, 0, 0, 0, 199, 202, 1, 0, 0, 0, 200, 198, 1, 0, 0, 0, 200, 201, 1, 0, 0, 0, 201, 205, 1, 0, 0, 0, 202, 200, 1, 0, 0, 0, 203, 204, 7, 0, 0, 0, 204, 206, 3, 18, 9, 0, 205, 203, 1, 0, 0, 0, 205, 206, 1, 0, 0, 0, 206, 29, 1, 0, 0, 0, 207, 208, 5, 2, 0, 0, 208, 209, 5, 32, 0, 0, 209, 210, 5, 25, 0, 0, 210, 211, 3, 16, 8, 0, 211, 212, 5, 26, 0, 0, 212, 31, 1, 0, 0, 0, 213, 215, 3, 34, 17, 0, 214, 213, 1, 0, 0, 0, 214, 215, 1, 0, 0, 0, 215, 224, 1, 0, 0, 0, 216, 217, 5, 32, 0, 0, 217, 218, 5, 25, 0, 0, 218, 219, 3, 16, 8, 0, 219, 220, 5, 26, 0, 0, 220, 221, 5, 29, 0, 0, 221, 223, 1, 0, 0, 0, 222, 216, 1, 0, 0, 0, 223, 226, 1, 0, 0, 0, 224, 222, 1, 0, 0, 0, 224, 225, 1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 224, 1, 0, 0, 0, 227, 228, 5, 32, 0, 0, 228, 229, 5, 25, 0, 0, 229, 230, 3, 16, 8, 0, 230, 231, 5, 26, 0, 0, 231, 33, 1, 0, 0, 0, 232, 236, 3, 22, 11, 0, 233, 234, 5, 32, 0, 0, 234, 236, 5, 29, 0, 0, 235, 232, 1, 0, 0, 0, 235, 233, 1, 0, 0, 0, 236, 35, 1, 0, 0, 0, 237, 250, 3, 40, 20, 0, 238, 239, 3, 28, 14, 0, 239, 240, 5, 31, 0, 0, 240, 250, 1, 0, 0, 0, 241, 242, 3, 50, 25, 0, 242, 243, 5, 31, 0, 0, 243, 250, 1, 0, 0, 0, 244, 250, 3, 48, 24, 0, 245, 250, 3, 38, 19, 0, 246, 247, 3, 24, 12, 0, 247, 248, 5, 31, 0, 0, 248, 250, 1, 0, 0, 0, 249, 237, 1, 0, 0, 0, 249, 238, 1, 0, 0, 0, 249, 241, 1, 0, 0, 0, 249, 244, 1, 0, 0, 0, 249, 245, 1, 0, 0, 0, 249, 246, 1, 0, 0, 0, 250, 37, 1, 0, 0, 0, 251, 255, 5, 27, 0, 0, 252, 254, 3, 36, 18, 0, 253, 252, 1, 0, 0, 0, 254, 257, 1, 0, 0, 0, 255, 253, 1, 0, 0, 0, 255, 256, 1, 0, 0, 0, 256, 258, 1, 0, 0, 0, 257, 255, 1, 0, 0, 0, 258, 259, 5, 28, 0, 0, 259, 39, 1, 0, 0, 0, 260, 264, 3, 42, 21, 0, 261, 263, 3, 44, 22, 0, 262, 261, 1, 0, 0, 0, 263, 266, 1, 0, 0, 0, 264, 262, 1, 0, 0, 0, 264, 265, 1, 0, 0, 0, 265, 268, 1, 0, 0, 0, 266, 264, 1, 0, 0, 0, 267, 269, 3, 46, 23, 0, 268, 267, 1, 0, 0, 0, 268, 269, 1, 0, 0, 0, 269, 41, 1, 0, 0, 0, 270, 271, 5, 14, 0, 0, 271, 272, 5, 25, 0, 0, 272, 273, 3, 18, 9, 0, 273, 274, 5, 26, 0, 0, 274, 275, 3, 38, 19, 0, 275, 43, 1, 0, 0, 0, 276, 277, 5, 15, 0, 0, 277, 278, 5, 14, 0, 0, 278, 279, 5, 25, 0, 0, 279, 280, 3, 18, 9, 0, 280, 281, 5, 26, 0, 0, 281, 282, 3, 38, 19, 0, 282, 45, 1, 0, 0, 0, 283, 284, 5, 15, 0, 0, 284, 285, 3, 38, 19, 0, 285, 47, 1, 0, 0, 0, 286, 287, 5, 3, 0, 0, 287, 288, 5, 25, 0, 0, 288, 289, 3, 18, 9, 0, 289, 290, 5, 26, 0, 0, 290, 291, 3, 38, 19, 0, 291, 49, 1, 0, 0, 0, 292, 293, 5, 4, 0, 0, 293, 294, 3, 18, 9, 0, 294, 51, 1, 0, 0, 0, 295, 296, 5, 20, 0, 0, 296, 297, 3, 18, 9, 0, 297, 53, 1, 0, 0, 0, 298, 302, 3, 20, 10, 0, 299, 300, 3, 60, 30, 0, 300, 301, 3, 20, 10, 0, 301, 303, 1, 0, 0, 0, 302, 299, 1, 0, 0, 0, 303, 304, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 55, 1, 0, 0, 0, 306, 307, 7, 1, 0, 0, 307, 57, 1, 0, 0, 0, 308, 309, 7, 2, 0, 0, 309, 59, 1, 0, 0, 0, 310, 311, 7, 3, 0, 0, 311, 61, 1, 0, 0, 0, 32, 65, 72, 84, 86, 92, 96, 105, 113, 118, 126, 133, 135, 138, 145, 149, 153, 164, 171, 177, 180, 185, 189, 200, 205, 214, 224, 235, 249, 255, 264, 268, 304]
\ No newline at end of file
+[4, 1, 38, 316, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7, 4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7, 10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15, 2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2, 21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26, 7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 1, 0, 3, 0, 64, 8, 0, 1, 0, 4, 0, 67, 8, 0, 11, 0, 12, 0, 68, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 3, 2, 76, 8, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3, 1, 3, 5, 3, 88, 8, 3, 10, 3, 12, 3, 91, 9, 3, 1, 3, 1, 3, 1, 4, 3, 4, 96, 8, 4, 1, 4, 1, 4, 3, 4, 100, 8, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 4, 1, 5, 3, 5, 109, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 5, 5, 115, 8, 5, 10, 5, 12, 5, 118, 9, 5, 1, 5, 1, 5, 3, 5, 122, 8, 5, 1, 5, 1, 5, 1, 6, 1, 6, 1, 6, 1, 7, 3, 7, 130, 8, 7, 1, 7, 1, 7, 1, 7, 4, 7, 135, 8, 7, 11, 7, 12, 7, 136, 3, 7, 139, 8, 7, 1, 8, 3, 8, 142, 8, 8, 1, 8, 1, 8, 1, 8, 5, 8, 147, 8, 8, 10, 8, 12, 8, 150, 9, 8, 1, 8, 3, 8, 153, 8, 8, 1, 9, 1, 9, 3, 9, 157, 8, 9, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 1, 10, 3, 10, 168, 8, 10, 1, 11, 1, 11, 1, 11, 1, 11, 1, 11, 3, 11, 175, 8, 11, 1, 11, 1, 11, 4, 11, 179, 8, 11, 11, 11, 12, 11, 180, 1, 11, 3, 11, 184, 8, 11, 1, 12, 1, 12, 1, 12, 3, 12, 189, 8, 12, 1, 13, 1, 13, 3, 13, 193, 8, 13, 1, 13, 1, 13, 1, 13, 1, 14, 1, 14, 1, 14, 1, 14, 5, 14, 202, 8, 14, 10, 14, 12, 14, 205, 9, 14, 1, 14, 1, 14, 3, 14, 209, 8, 14, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 15, 1, 16, 3, 16, 218, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 226, 8, 16, 10, 16, 12, 16, 229, 9, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 3, 17, 239, 8, 17, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 1, 18, 3, 18, 253, 8, 18, 1, 19, 1, 19, 5, 19, 257, 8, 19, 10, 19, 12, 19, 260, 9, 19, 1, 19, 1, 19, 1, 20, 1, 20, 5, 20, 266, 8, 20, 10, 20, 12, 20, 269, 9, 20, 1, 20, 3, 20, 272, 8, 20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 23, 1, 23, 1, 23, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 25, 1, 25, 1, 25, 1, 26, 1, 26, 1, 26, 1, 27, 1, 27, 1, 27, 1, 27, 4, 27, 306, 8, 27, 11, 27, 12, 27, 307, 1, 28, 1, 28, 1, 29, 1, 29, 1, 30, 1, 30, 1, 30, 0, 0, 31, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60, 0, 4, 1, 0, 16, 18, 4, 0, 9, 10, 12, 13, 33, 34, 38, 38, 2, 0, 5, 7, 32, 32, 2, 0, 19, 19, 22, 24, 328, 0, 63, 1, 0, 0, 0, 2, 70, 1, 0, 0, 0, 4, 75, 1, 0, 0, 0, 6, 83, 1, 0, 0, 0, 8, 95, 1, 0, 0, 0, 10, 108, 1, 0, 0, 0, 12, 125, 1, 0, 0, 0, 14, 138, 1, 0, 0, 0, 16, 152, 1, 0, 0, 0, 18, 156, 1, 0, 0, 0, 20, 167, 1, 0, 0, 0, 22, 183, 1, 0, 0, 0, 24, 188, 1, 0, 0, 0, 26, 192, 1, 0, 0, 0, 28, 197, 1, 0, 0, 0, 30, 210, 1, 0, 0, 0, 32, 217, 1, 0, 0, 0, 34, 238, 1, 0, 0, 0, 36, 252, 1, 0, 0, 0, 38, 254, 1, 0, 0, 0, 40, 263, 1, 0, 0, 0, 42, 273, 1, 0, 0, 0, 44, 279, 1, 0, 0, 0, 46, 286, 1, 0, 0, 0, 48, 289, 1, 0, 0, 0, 50, 295, 1, 0, 0, 0, 52, 298, 1, 0, 0, 0, 54, 301, 1, 0, 0, 0, 56, 309, 1, 0, 0, 0, 58, 311, 1, 0, 0, 0, 60, 313, 1, 0, 0, 0, 62, 64, 5, 32, 0, 0, 63, 62, 1, 0, 0, 0, 63, 64, 1, 0, 0, 0, 64, 66, 1, 0, 0, 0, 65, 67, 3, 2, 1, 0, 66, 65, 1, 0, 0, 0, 67, 68, 1, 0, 0, 0, 68, 66, 1, 0, 0, 0, 68, 69, 1, 0, 0, 0, 69, 1, 1, 0, 0, 0, 70, 71, 5, 1, 0, 0, 71, 72, 5, 32, 0, 0, 72, 73, 3, 6, 3, 0, 73, 3, 1, 0, 0, 0, 74, 76, 5, 8, 0, 0, 75, 74, 1, 0, 0, 0, 75, 76, 1, 0, 0, 0, 76, 77, 1, 0, 0, 0, 77, 78, 5, 32, 0, 0, 78, 79, 5, 25, 0, 0, 79, 80, 3, 14, 7, 0, 80, 81, 5, 26, 0, 0, 81, 82, 3, 38, 19, 0, 82, 5, 1, 0, 0, 0, 83, 89, 5, 27, 0, 0, 84, 88, 3, 8, 4, 0, 85, 88, 3, 10, 5, 0, 86, 88, 3, 4, 2, 0, 87, 84, 1, 0, 0, 0, 87, 85, 1, 0, 0, 0, 87, 86, 1, 0, 0, 0, 88, 91, 1, 0, 0, 0, 89, 87, 1, 0, 0, 0, 89, 90, 1, 0, 0, 0, 90, 92, 1, 0, 0, 0, 91, 89, 1, 0, 0, 0, 92, 93, 5, 28, 0, 0, 93, 7, 1, 0, 0, 0, 94, 96, 5, 8, 0, 0, 95, 94, 1, 0, 0, 0, 95, 96, 1, 0, 0, 0, 96, 99, 1, 0, 0, 0, 97, 100, 3, 58, 29, 0, 98, 100, 5, 11, 0, 0, 99, 97, 1, 0, 0, 0, 99, 98, 1, 0, 0, 0, 100, 101, 1, 0, 0, 0, 101, 102, 5, 32, 0, 0, 102, 103, 5, 25, 0, 0, 103, 104, 3, 14, 7, 0, 104, 105, 5, 26, 0, 0, 105, 106, 3, 38, 19, 0, 106, 9, 1, 0, 0, 0, 107, 109, 5, 8, 0, 0, 108, 107, 1, 0, 0, 0, 108, 109, 1, 0, 0, 0, 109, 110, 1, 0, 0, 0, 110, 111, 3, 58, 29, 0, 111, 116, 5, 32, 0, 0, 112, 113, 5, 30, 0, 0, 113, 115, 5, 32, 0, 0, 114, 112, 1, 0, 0, 0, 115, 118, 1, 0, 0, 0, 116, 114, 1, 0, 0, 0, 116, 117, 1, 0, 0, 0, 117, 121, 1, 0, 0, 0, 118, 116, 1, 0, 0, 0, 119, 120, 5, 16, 0, 0, 120, 122, 3, 18, 9, 0, 121, 119, 1, 0, 0, 0, 121, 122, 1, 0, 0, 0, 122, 123, 1, 0, 0, 0, 123, 124, 5, 31, 0, 0, 124, 11, 1, 0, 0, 0, 125, 126, 3, 58, 29, 0, 126, 127, 5, 32, 0, 0, 127, 13, 1, 0, 0, 0, 128, 130, 3, 12, 6, 0, 129, 128, 1, 0, 0, 0, 129, 130, 1, 0, 0, 0, 130, 139, 1, 0, 0, 0, 131, 134, 3, 12, 6, 0, 132, 133, 5, 30, 0, 0, 133, 135, 3, 12, 6, 0, 134, 132, 1, 0, 0, 0, 135, 136, 1, 0, 0, 0, 136, 134, 1, 0, 0, 0, 136, 137, 1, 0, 0, 0, 137, 139, 1, 0, 0, 0, 138, 129, 1, 0, 0, 0, 138, 131, 1, 0, 0, 0, 139, 15, 1, 0, 0, 0, 140, 142, 3, 18, 9, 0, 141, 140, 1, 0, 0, 0, 141, 142, 1, 0, 0, 0, 142, 153, 1, 0, 0, 0, 143, 148, 3, 18, 9, 0, 144, 145, 5, 30, 0, 0, 145, 147, 3, 18, 9, 0, 146, 144, 1, 0, 0, 0, 147, 150, 1, 0, 0, 0, 148, 146, 1, 0, 0, 0, 148, 149, 1, 0, 0, 0, 149, 153, 1, 0, 0, 0, 150, 148, 1, 0, 0, 0, 151, 153, 3, 22, 11, 0, 152, 141, 1, 0, 0, 0, 152, 143, 1, 0, 0, 0, 152, 151, 1, 0, 0, 0, 153, 17, 1, 0, 0, 0, 154, 157, 3, 20, 10, 0, 155, 157, 3, 54, 27, 0, 156, 154, 1, 0, 0, 0, 156, 155, 1, 0, 0, 0, 157, 19, 1, 0, 0, 0, 158, 168, 3, 56, 28, 0, 159, 168, 3, 22, 11, 0, 160, 168, 5, 32, 0, 0, 161, 168, 3, 24, 12, 0, 162, 168, 3, 52, 26, 0, 163, 164, 5, 25, 0, 0, 164, 165, 3, 18, 9, 0, 165, 166, 5, 26, 0, 0, 166, 168, 1, 0, 0, 0, 167, 158, 1, 0, 0, 0, 167, 159, 1, 0, 0, 0, 167, 160, 1, 0, 0, 0, 167, 161, 1, 0, 0, 0, 167, 162, 1, 0, 0, 0, 167, 163, 1, 0, 0, 0, 168, 21, 1, 0, 0, 0, 169, 170, 5, 13, 0, 0, 170, 171, 5, 29, 0, 0, 171, 184, 5, 32, 0, 0, 172, 173, 5, 13, 0, 0, 173, 175, 5, 29, 0, 0, 174, 172, 1, 0, 0, 0, 174, 175, 1, 0, 0, 0, 175, 178, 1, 0, 0, 0, 176, 177, 5, 32, 0, 0, 177, 179, 5, 29, 0, 0, 178, 176, 1, 0, 0, 0, 179, 180, 1, 0, 0, 0, 180, 178, 1, 0, 0, 0, 180, 181, 1, 0, 0, 0, 181, 182, 1, 0, 0, 0, 182, 184, 5, 32, 0, 0, 183, 169, 1, 0, 0, 0, 183, 174, 1, 0, 0, 0, 184, 23, 1, 0, 0, 0, 185, 189, 3, 26, 13, 0, 186, 189, 3, 30, 15, 0, 187, 189, 3, 32, 16, 0, 188, 185, 1, 0, 0, 0, 188, 186, 1, 0, 0, 0, 188, 187, 1, 0, 0, 0, 189, 25, 1, 0, 0, 0, 190, 193, 3, 22, 11, 0, 191, 193, 5, 32, 0, 0, 192, 190, 1, 0, 0, 0, 192, 191, 1, 0, 0, 0, 193, 194, 1, 0, 0, 0, 194, 195, 7, 0, 0, 0, 195, 196, 3, 18, 9, 0, 196, 27, 1, 0, 0, 0, 197, 198, 3, 58, 29, 0, 198, 203, 5, 32, 0, 0, 199, 200, 5, 30, 0, 0, 200, 202, 5, 32, 0, 0, 201, 199, 1, 0, 0, 0, 202, 205, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 203, 204, 1, 0, 0, 0, 204, 208, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 207, 7, 0, 0, 0, 207, 209, 3, 18, 9, 0, 208, 206, 1, 0, 0, 0, 208, 209, 1, 0, 0, 0, 209, 29, 1, 0, 0, 0, 210, 211, 5, 2, 0, 0, 211, 212, 5, 32, 0, 0, 212, 213, 5, 25, 0, 0, 213, 214, 3, 16, 8, 0, 214, 215, 5, 26, 0, 0, 215, 31, 1, 0, 0, 0, 216, 218, 3, 34, 17, 0, 217, 216, 1, 0, 0, 0, 217, 218, 1, 0, 0, 0, 218, 227, 1, 0, 0, 0, 219, 220, 5, 32, 0, 0, 220, 221, 5, 25, 0, 0, 221, 222, 3, 16, 8, 0, 222, 223, 5, 26, 0, 0, 223, 224, 5, 29, 0, 0, 224, 226, 1, 0, 0, 0, 225, 219, 1, 0, 0, 0, 226, 229, 1, 0, 0, 0, 227, 225, 1, 0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 230, 1, 0, 0, 0, 229, 227, 1, 0, 0, 0, 230, 231, 5, 32, 0, 0, 231, 232, 5, 25, 0, 0, 232, 233, 3, 16, 8, 0, 233, 234, 5, 26, 0, 0, 234, 33, 1, 0, 0, 0, 235, 239, 3, 22, 11, 0, 236, 237, 5, 32, 0, 0, 237, 239, 5, 29, 0, 0, 238, 235, 1, 0, 0, 0, 238, 236, 1, 0, 0, 0, 239, 35, 1, 0, 0, 0, 240, 253, 3, 40, 20, 0, 241, 242, 3, 28, 14, 0, 242, 243, 5, 31, 0, 0, 243, 253, 1, 0, 0, 0, 244, 245, 3, 50, 25, 0, 245, 246, 5, 31, 0, 0, 246, 253, 1, 0, 0, 0, 247, 253, 3, 48, 24, 0, 248, 253, 3, 38, 19, 0, 249, 250, 3, 24, 12, 0, 250, 251, 5, 31, 0, 0, 251, 253, 1, 0, 0, 0, 252, 240, 1, 0, 0, 0, 252, 241, 1, 0, 0, 0, 252, 244, 1, 0, 0, 0, 252, 247, 1, 0, 0, 0, 252, 248, 1, 0, 0, 0, 252, 249, 1, 0, 0, 0, 253, 37, 1, 0, 0, 0, 254, 258, 5, 27, 0, 0, 255, 257, 3, 36, 18, 0, 256, 255, 1, 0, 0, 0, 257, 260, 1, 0, 0, 0, 258, 256, 1, 0, 0, 0, 258, 259, 1, 0, 0, 0, 259, 261, 1, 0, 0, 0, 260, 258, 1, 0, 0, 0, 261, 262, 5, 28, 0, 0, 262, 39, 1, 0, 0, 0, 263, 267, 3, 42, 21, 0, 264, 266, 3, 44, 22, 0, 265, 264, 1, 0, 0, 0, 266, 269, 1, 0, 0, 0, 267, 265, 1, 0, 0, 0, 267, 268, 1, 0, 0, 0, 268, 271, 1, 0, 0, 0, 269, 267, 1, 0, 0, 0, 270, 272, 3, 46, 23, 0, 271, 270, 1, 0, 0, 0, 271, 272, 1, 0, 0, 0, 272, 41, 1, 0, 0, 0, 273, 274, 5, 14, 0, 0, 274, 275, 5, 25, 0, 0, 275, 276, 3, 18, 9, 0, 276, 277, 5, 26, 0, 0, 277, 278, 3, 38, 19, 0, 278, 43, 1, 0, 0, 0, 279, 280, 5, 15, 0, 0, 280, 281, 5, 14, 0, 0, 281, 282, 5, 25, 0, 0, 282, 283, 3, 18, 9, 0, 283, 284, 5, 26, 0, 0, 284, 285, 3, 38, 19, 0, 285, 45, 1, 0, 0, 0, 286, 287, 5, 15, 0, 0, 287, 288, 3, 38, 19, 0, 288, 47, 1, 0, 0, 0, 289, 290, 5, 3, 0, 0, 290, 291, 5, 25, 0, 0, 291, 292, 3, 18, 9, 0, 292, 293, 5, 26, 0, 0, 293, 294, 3, 38, 19, 0, 294, 49, 1, 0, 0, 0, 295, 296, 5, 4, 0, 0, 296, 297, 3, 18, 9, 0, 297, 51, 1, 0, 0, 0, 298, 299, 5, 20, 0, 0, 299, 300, 3, 18, 9, 0, 300, 53, 1, 0, 0, 0, 301, 305, 3, 20, 10, 0, 302, 303, 3, 60, 30, 0, 303, 304, 3, 20, 10, 0, 304, 306, 1, 0, 0, 0, 305, 302, 1, 0, 0, 0, 306, 307, 1, 0, 0, 0, 307, 305, 1, 0, 0, 0, 307, 308, 1, 0, 0, 0, 308, 55, 1, 0, 0, 0, 309, 310, 7, 1, 0, 0, 310, 57, 1, 0, 0, 0, 311, 312, 7, 2, 0, 0, 312, 59, 1, 0, 0, 0, 313, 314, 7, 3, 0, 0, 314, 61, 1, 0, 0, 0, 33, 63, 68, 75, 87, 89, 95, 99, 108, 116, 121, 129, 136, 138, 141, 148, 152, 156, 167, 174, 180, 183, 188, 192, 203, 208, 217, 227, 238, 252, 258, 267, 271, 307]
\ No newline at end of file
Index: Parser/src/generated/antlrGrammarLexer.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\\antlrGrammar.g4 by ANTLR 4.10.1\r\npackage generated;\r\nimport org.antlr.v4.runtime.Lexer;\r\nimport org.antlr.v4.runtime.CharStream;\r\nimport org.antlr.v4.runtime.Token;\r\nimport org.antlr.v4.runtime.TokenStream;\r\nimport org.antlr.v4.runtime.*;\r\nimport org.antlr.v4.runtime.atn.*;\r\nimport org.antlr.v4.runtime.dfa.DFA;\r\nimport org.antlr.v4.runtime.misc.*;\r\n\r\n@SuppressWarnings({\"all\", \"warnings\", \"unchecked\", \"unused\", \"cast\"})\r\npublic class antlrGrammarLexer extends Lexer {\r\n\tstatic { RuntimeMetaData.checkVersion(\"4.10.1\", RuntimeMetaData.VERSION); }\r\n\r\n\tprotected static final DFA[] _decisionToDFA;\r\n\tprotected static final PredictionContextCache _sharedContextCache =\r\n\t\tnew PredictionContextCache();\r\n\tpublic static final int\r\n\t\tT__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, AccessModifier=8, \r\n\t\tJBoolean=9, JNull=10, Void=11, Super=12, This=13, If=14, Else=15, Equal=16, \r\n\t\tPlusEqual=17, MinusEqual=18, Comperator=19, NotOperator=20, OpBeforeOrAfterIdentifier=21, \r\n\t\tPointOperator=22, AddSubOperator=23, LogicalOperator=24, LBracket=25, \r\n\t\tRBracket=26, CurlyLBracket=27, CurlyRBracket=28, Dot=29, Comma=30, Semicolon=31, \r\n\t\tIdentifier=32, JCharacter=33, JInteger=34, WS=35, Comment=36, LineComment=37;\r\n\tpublic static String[] channelNames = {\r\n\t\t\"DEFAULT_TOKEN_CHANNEL\", \"HIDDEN\"\r\n\t};\r\n\r\n\tpublic static String[] modeNames = {\r\n\t\t\"DEFAULT_MODE\"\r\n\t};\r\n\r\n\tprivate static String[] makeRuleNames() {\r\n\t\treturn new String[] {\r\n\t\t\t\"T__0\", \"T__1\", \"T__2\", \"T__3\", \"T__4\", \"T__5\", \"T__6\", \"AccessModifier\", \r\n\t\t\t\"JBoolean\", \"JNull\", \"Void\", \"Super\", \"This\", \"If\", \"Else\", \"Equal\", \r\n\t\t\t\"PlusEqual\", \"MinusEqual\", \"Comperator\", \"NotOperator\", \"OpBeforeOrAfterIdentifier\", \r\n\t\t\t\"PointOperator\", \"AddSubOperator\", \"LogicalOperator\", \"LBracket\", \"RBracket\", \r\n\t\t\t\"CurlyLBracket\", \"CurlyRBracket\", \"Dot\", \"Comma\", \"Semicolon\", \"Identifier\", \r\n\t\t\t\"JCharacter\", \"JInteger\", \"WS\", \"Comment\", \"LineComment\"\r\n\t\t};\r\n\t}\r\n\tpublic static final String[] ruleNames = makeRuleNames();\r\n\r\n\tprivate static String[] makeLiteralNames() {\r\n\t\treturn new String[] {\r\n\t\t\tnull, \"'class'\", \"'new'\", \"'while'\", \"'return'\", \"'int'\", \"'char'\", \"'boolean'\", \r\n\t\t\tnull, null, \"'null'\", \"'void'\", \"'super'\", \"'this'\", \"'if'\", \"'else'\", \r\n\t\t\t\"'='\", \"'+='\", \"'-='\", null, \"'!'\", null, null, null, null, \"'('\", \"')'\", \r\n\t\t\t\"'{'\", \"'}'\", \"'.'\", \"','\", \"';'\"\r\n\t\t};\r\n\t}\r\n\tprivate static final String[] _LITERAL_NAMES = makeLiteralNames();\r\n\tprivate static String[] makeSymbolicNames() {\r\n\t\treturn new String[] {\r\n\t\t\tnull, null, null, null, null, null, null, null, \"AccessModifier\", \"JBoolean\", \r\n\t\t\t\"JNull\", \"Void\", \"Super\", \"This\", \"If\", \"Else\", \"Equal\", \"PlusEqual\", \r\n\t\t\t\"MinusEqual\", \"Comperator\", \"NotOperator\", \"OpBeforeOrAfterIdentifier\", \r\n\t\t\t\"PointOperator\", \"AddSubOperator\", \"LogicalOperator\", \"LBracket\", \"RBracket\", \r\n\t\t\t\"CurlyLBracket\", \"CurlyRBracket\", \"Dot\", \"Comma\", \"Semicolon\", \"Identifier\", \r\n\t\t\t\"JCharacter\", \"JInteger\", \"WS\", \"Comment\", \"LineComment\"\r\n\t\t};\r\n\t}\r\n\tprivate static final String[] _SYMBOLIC_NAMES = makeSymbolicNames();\r\n\tpublic static final Vocabulary VOCABULARY = new VocabularyImpl(_LITERAL_NAMES, _SYMBOLIC_NAMES);\r\n\r\n\t/**\r\n\t * @deprecated Use {@link #VOCABULARY} instead.\r\n\t */\r\n\t@Deprecated\r\n\tpublic static final String[] tokenNames;\r\n\tstatic {\r\n\t\ttokenNames = new String[_SYMBOLIC_NAMES.length];\r\n\t\tfor (int i = 0; i < tokenNames.length; i++) {\r\n\t\t\ttokenNames[i] = VOCABULARY.getLiteralName(i);\r\n\t\t\tif (tokenNames[i] == null) {\r\n\t\t\t\ttokenNames[i] = VOCABULARY.getSymbolicName(i);\r\n\t\t\t}\r\n\r\n\t\t\tif (tokenNames[i] == null) {\r\n\t\t\t\ttokenNames[i] = \"<INVALID>\";\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t@Override\r\n\t@Deprecated\r\n\tpublic String[] getTokenNames() {\r\n\t\treturn tokenNames;\r\n\t}\r\n\r\n\t@Override\r\n\r\n\tpublic Vocabulary getVocabulary() {\r\n\t\treturn VOCABULARY;\r\n\t}\r\n\r\n\r\n\tpublic antlrGrammarLexer(CharStream input) {\r\n\t\tsuper(input);\r\n\t\t_interp = new LexerATNSimulator(this,_ATN,_decisionToDFA,_sharedContextCache);\r\n\t}\r\n\r\n\t@Override\r\n\tpublic String getGrammarFileName() { return \"antlrGrammar.g4\"; }\r\n\r\n\t@Override\r\n\tpublic String[] getRuleNames() { return ruleNames; }\r\n\r\n\t@Override\r\n\tpublic String getSerializedATN() { return _serializedATN; }\r\n\r\n\t@Override\r\n\tpublic String[] getChannelNames() { return channelNames; }\r\n\r\n\t@Override\r\n\tpublic String[] getModeNames() { return modeNames; }\r\n\r\n\t@Override\r\n\tpublic ATN getATN() { return _ATN; }\r\n\r\n\tpublic static final String _serializedATN =\r\n\t\t\"\\u0004\\u0000%\\u0116\\u0006\\uffff\\uffff\\u0002\\u0000\\u0007\\u0000\\u0002\\u0001\"+\r\n\t\t\"\\u0007\\u0001\\u0002\\u0002\\u0007\\u0002\\u0002\\u0003\\u0007\\u0003\\u0002\\u0004\"+\r\n\t\t\"\\u0007\\u0004\\u0002\\u0005\\u0007\\u0005\\u0002\\u0006\\u0007\\u0006\\u0002\\u0007\"+\r\n\t\t\"\\u0007\\u0007\\u0002\\b\\u0007\\b\\u0002\\t\\u0007\\t\\u0002\\n\\u0007\\n\\u0002\\u000b\"+\r\n\t\t\"\\u0007\\u000b\\u0002\\f\\u0007\\f\\u0002\\r\\u0007\\r\\u0002\\u000e\\u0007\\u000e\\u0002\"+\r\n\t\t\"\\u000f\\u0007\\u000f\\u0002\\u0010\\u0007\\u0010\\u0002\\u0011\\u0007\\u0011\\u0002\"+\r\n\t\t\"\\u0012\\u0007\\u0012\\u0002\\u0013\\u0007\\u0013\\u0002\\u0014\\u0007\\u0014\\u0002\"+\r\n\t\t\"\\u0015\\u0007\\u0015\\u0002\\u0016\\u0007\\u0016\\u0002\\u0017\\u0007\\u0017\\u0002\"+\r\n\t\t\"\\u0018\\u0007\\u0018\\u0002\\u0019\\u0007\\u0019\\u0002\\u001a\\u0007\\u001a\\u0002\"+\r\n\t\t\"\\u001b\\u0007\\u001b\\u0002\\u001c\\u0007\\u001c\\u0002\\u001d\\u0007\\u001d\\u0002\"+\r\n\t\t\"\\u001e\\u0007\\u001e\\u0002\\u001f\\u0007\\u001f\\u0002 \\u0007 \\u0002!\\u0007\"+\r\n\t\t\"!\\u0002\\\"\\u0007\\\"\\u0002#\\u0007#\\u0002$\\u0007$\\u0001\\u0000\\u0001\\u0000\"+\r\n\t\t\"\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\\u0000\\u0001\\u0001\\u0001\\u0001\"+\r\n\t\t\"\\u0001\\u0001\\u0001\\u0001\\u0001\\u0002\\u0001\\u0002\\u0001\\u0002\\u0001\\u0002\"+\r\n\t\t\"\\u0001\\u0002\\u0001\\u0002\\u0001\\u0003\\u0001\\u0003\\u0001\\u0003\\u0001\\u0003\"+\r\n\t\t\"\\u0001\\u0003\\u0001\\u0003\\u0001\\u0003\\u0001\\u0004\\u0001\\u0004\\u0001\\u0004\"+\r\n\t\t\"\\u0001\\u0004\\u0001\\u0005\\u0001\\u0005\\u0001\\u0005\\u0001\\u0005\\u0001\\u0005\"+\r\n\t\t\"\\u0001\\u0006\\u0001\\u0006\\u0001\\u0006\\u0001\\u0006\\u0001\\u0006\\u0001\\u0006\"+\r\n\t\t\"\\u0001\\u0006\\u0001\\u0006\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\"+\r\n\t\t\"\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\"+\r\n\t\t\"\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\"+\r\n\t\t\"\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\\u0001\\u0007\"+\r\n\t\t\"\\u0003\\u0007\\u008a\\b\\u0007\\u0001\\b\\u0001\\b\\u0001\\b\\u0001\\b\\u0001\\b\\u0001\"+\r\n\t\t\"\\b\\u0001\\b\\u0001\\b\\u0001\\b\\u0003\\b\\u0095\\b\\b\\u0001\\t\\u0001\\t\\u0001\\t\\u0001\"+\r\n\t\t\"\\t\\u0001\\t\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\n\\u0001\\u000b\\u0001\\u000b\"+\r\n\t\t\"\\u0001\\u000b\\u0001\\u000b\\u0001\\u000b\\u0001\\u000b\\u0001\\f\\u0001\\f\\u0001\"+\r\n\t\t\"\\f\\u0001\\f\\u0001\\f\\u0001\\r\\u0001\\r\\u0001\\r\\u0001\\u000e\\u0001\\u000e\\u0001\"+\r\n\t\t\"\\u000e\\u0001\\u000e\\u0001\\u000e\\u0001\\u000f\\u0001\\u000f\\u0001\\u0010\\u0001\"+\r\n\t\t\"\\u0010\\u0001\\u0010\\u0001\\u0011\\u0001\\u0011\\u0001\\u0011\\u0001\\u0012\\u0001\"+\r\n\t\t\"\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\\u0012\\u0001\"+\r\n\t\t\"\\u0012\\u0001\\u0012\\u0003\\u0012\\u00c5\\b\\u0012\\u0001\\u0013\\u0001\\u0013\\u0001\"+\r\n\t\t\"\\u0014\\u0001\\u0014\\u0001\\u0014\\u0001\\u0014\\u0003\\u0014\\u00cd\\b\\u0014\\u0001\"+\r\n\t\t\"\\u0015\\u0001\\u0015\\u0001\\u0016\\u0001\\u0016\\u0001\\u0017\\u0001\\u0017\\u0001\"+\r\n\t\t\"\\u0017\\u0001\\u0017\\u0003\\u0017\\u00d7\\b\\u0017\\u0001\\u0018\\u0001\\u0018\\u0001\"+\r\n\t\t\"\\u0019\\u0001\\u0019\\u0001\\u001a\\u0001\\u001a\\u0001\\u001b\\u0001\\u001b\\u0001\"+\r\n\t\t\"\\u001c\\u0001\\u001c\\u0001\\u001d\\u0001\\u001d\\u0001\\u001e\\u0001\\u001e\\u0001\"+\r\n\t\t\"\\u001f\\u0001\\u001f\\u0005\\u001f\\u00e9\\b\\u001f\\n\\u001f\\f\\u001f\\u00ec\\t\\u001f\"+\r\n\t\t\"\\u0001 \\u0001 \\u0001 \\u0001 \\u0001!\\u0004!\\u00f3\\b!\\u000b!\\f!\\u00f4\\u0001\"+\r\n\t\t\"\\\"\\u0004\\\"\\u00f8\\b\\\"\\u000b\\\"\\f\\\"\\u00f9\\u0001\\\"\\u0001\\\"\\u0001#\\u0001#\\u0001\"+\r\n\t\t\"#\\u0001#\\u0005#\\u0102\\b#\\n#\\f#\\u0105\\t#\\u0001#\\u0001#\\u0001#\\u0001#\\u0001\"+\r\n\t\t\"#\\u0001$\\u0001$\\u0001$\\u0001$\\u0005$\\u0110\\b$\\n$\\f$\\u0113\\t$\\u0001$\\u0001\"+\r\n\t\t\"$\\u0001\\u0103\\u0000%\\u0001\\u0001\\u0003\\u0002\\u0005\\u0003\\u0007\\u0004\\t\"+\r\n\t\t\"\\u0005\\u000b\\u0006\\r\\u0007\\u000f\\b\\u0011\\t\\u0013\\n\\u0015\\u000b\\u0017\\f\"+\r\n\t\t\"\\u0019\\r\\u001b\\u000e\\u001d\\u000f\\u001f\\u0010!\\u0011#\\u0012%\\u0013\\'\\u0014\"+\r\n\t\t\")\\u0015+\\u0016-\\u0017/\\u00181\\u00193\\u001a5\\u001b7\\u001c9\\u001d;\\u001e\"+\r\n\t\t\"=\\u001f? A!C\\\"E#G$I%\\u0001\\u0000\\b\\u0002\\u0000<<>>\\u0002\\u0000**//\\u0003\"+\r\n\t\t\"\\u0000%%++--\\u0002\\u0000AZaz\\u0003\\u000009AZaz\\u0001\\u000009\\u0003\\u0000\"+\r\n\t\t\"\\t\\n\\r\\r  \\u0002\\u0000\\n\\n\\r\\r\\u0123\\u0000\\u0001\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0003\\u0001\\u0000\\u0000\\u0000\\u0000\\u0005\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0007\\u0001\\u0000\\u0000\\u0000\\u0000\\t\\u0001\\u0000\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u000b\\u0001\\u0000\\u0000\\u0000\\u0000\\r\\u0001\\u0000\\u0000\\u0000\\u0000\\u000f\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0000\\u0011\\u0001\\u0000\\u0000\\u0000\\u0000\\u0013\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0000\\u0015\\u0001\\u0000\\u0000\\u0000\\u0000\\u0017\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0000\\u0019\\u0001\\u0000\\u0000\\u0000\\u0000\\u001b\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0000\\u001d\\u0001\\u0000\\u0000\\u0000\\u0000\\u001f\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u0000!\\u0001\\u0000\\u0000\\u0000\\u0000#\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u0000%\\u0001\\u0000\\u0000\\u0000\\u0000\\'\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0000)\\u0001\\u0000\\u0000\\u0000\\u0000+\\u0001\\u0000\\u0000\\u0000\\u0000\"+\r\n\t\t\"-\\u0001\\u0000\\u0000\\u0000\\u0000/\\u0001\\u0000\\u0000\\u0000\\u00001\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00003\\u0001\\u0000\\u0000\\u0000\\u00005\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00007\\u0001\\u0000\\u0000\\u0000\\u00009\\u0001\\u0000\\u0000\\u0000\\u0000\"+\r\n\t\t\";\\u0001\\u0000\\u0000\\u0000\\u0000=\\u0001\\u0000\\u0000\\u0000\\u0000?\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0000A\\u0001\\u0000\\u0000\\u0000\\u0000C\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u0000E\\u0001\\u0000\\u0000\\u0000\\u0000G\\u0001\\u0000\\u0000\\u0000\\u0000\"+\r\n\t\t\"I\\u0001\\u0000\\u0000\\u0000\\u0001K\\u0001\\u0000\\u0000\\u0000\\u0003Q\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0005U\\u0001\\u0000\\u0000\\u0000\\u0007[\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\tb\\u0001\\u0000\\u0000\\u0000\\u000bf\\u0001\\u0000\\u0000\\u0000\\rk\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u000f\\u0089\\u0001\\u0000\\u0000\\u0000\\u0011\\u0094\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0013\\u0096\\u0001\\u0000\\u0000\\u0000\\u0015\\u009b\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0017\\u00a0\\u0001\\u0000\\u0000\\u0000\\u0019\\u00a6\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u001b\\u00ab\\u0001\\u0000\\u0000\\u0000\\u001d\\u00ae\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u001f\\u00b3\\u0001\\u0000\\u0000\\u0000!\\u00b5\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000#\\u00b8\\u0001\\u0000\\u0000\\u0000%\\u00c4\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\'\\u00c6\\u0001\\u0000\\u0000\\u0000)\\u00cc\\u0001\\u0000\\u0000\\u0000+\\u00ce\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000-\\u00d0\\u0001\\u0000\\u0000\\u0000/\\u00d6\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u00001\\u00d8\\u0001\\u0000\\u0000\\u00003\\u00da\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"5\\u00dc\\u0001\\u0000\\u0000\\u00007\\u00de\\u0001\\u0000\\u0000\\u00009\\u00e0\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000;\\u00e2\\u0001\\u0000\\u0000\\u0000=\\u00e4\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000?\\u00e6\\u0001\\u0000\\u0000\\u0000A\\u00ed\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"C\\u00f2\\u0001\\u0000\\u0000\\u0000E\\u00f7\\u0001\\u0000\\u0000\\u0000G\\u00fd\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000I\\u010b\\u0001\\u0000\\u0000\\u0000KL\\u0005c\\u0000\"+\r\n\t\t\"\\u0000LM\\u0005l\\u0000\\u0000MN\\u0005a\\u0000\\u0000NO\\u0005s\\u0000\\u0000\"+\r\n\t\t\"OP\\u0005s\\u0000\\u0000P\\u0002\\u0001\\u0000\\u0000\\u0000QR\\u0005n\\u0000\\u0000\"+\r\n\t\t\"RS\\u0005e\\u0000\\u0000ST\\u0005w\\u0000\\u0000T\\u0004\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"UV\\u0005w\\u0000\\u0000VW\\u0005h\\u0000\\u0000WX\\u0005i\\u0000\\u0000XY\\u0005\"+\r\n\t\t\"l\\u0000\\u0000YZ\\u0005e\\u0000\\u0000Z\\u0006\\u0001\\u0000\\u0000\\u0000[\\\\\\u0005\"+\r\n\t\t\"r\\u0000\\u0000\\\\]\\u0005e\\u0000\\u0000]^\\u0005t\\u0000\\u0000^_\\u0005u\\u0000\"+\r\n\t\t\"\\u0000_`\\u0005r\\u0000\\u0000`a\\u0005n\\u0000\\u0000a\\b\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000bc\\u0005i\\u0000\\u0000cd\\u0005n\\u0000\\u0000de\\u0005t\\u0000\\u0000\"+\r\n\t\t\"e\\n\\u0001\\u0000\\u0000\\u0000fg\\u0005c\\u0000\\u0000gh\\u0005h\\u0000\\u0000\"+\r\n\t\t\"hi\\u0005a\\u0000\\u0000ij\\u0005r\\u0000\\u0000j\\f\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"kl\\u0005b\\u0000\\u0000lm\\u0005o\\u0000\\u0000mn\\u0005o\\u0000\\u0000no\\u0005\"+\r\n\t\t\"l\\u0000\\u0000op\\u0005e\\u0000\\u0000pq\\u0005a\\u0000\\u0000qr\\u0005n\\u0000\"+\r\n\t\t\"\\u0000r\\u000e\\u0001\\u0000\\u0000\\u0000st\\u0005p\\u0000\\u0000tu\\u0005u\\u0000\"+\r\n\t\t\"\\u0000uv\\u0005b\\u0000\\u0000vw\\u0005l\\u0000\\u0000wx\\u0005i\\u0000\\u0000\"+\r\n\t\t\"x\\u008a\\u0005c\\u0000\\u0000yz\\u0005p\\u0000\\u0000z{\\u0005r\\u0000\\u0000{\"+\r\n\t\t\"|\\u0005o\\u0000\\u0000|}\\u0005t\\u0000\\u0000}~\\u0005e\\u0000\\u0000~\\u007f\"+\r\n\t\t\"\\u0005c\\u0000\\u0000\\u007f\\u0080\\u0005t\\u0000\\u0000\\u0080\\u0081\\u0005e\"+\r\n\t\t\"\\u0000\\u0000\\u0081\\u008a\\u0005d\\u0000\\u0000\\u0082\\u0083\\u0005p\\u0000\\u0000\"+\r\n\t\t\"\\u0083\\u0084\\u0005r\\u0000\\u0000\\u0084\\u0085\\u0005i\\u0000\\u0000\\u0085\\u0086\"+\r\n\t\t\"\\u0005v\\u0000\\u0000\\u0086\\u0087\\u0005a\\u0000\\u0000\\u0087\\u0088\\u0005t\"+\r\n\t\t\"\\u0000\\u0000\\u0088\\u008a\\u0005e\\u0000\\u0000\\u0089s\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u0089y\\u0001\\u0000\\u0000\\u0000\\u0089\\u0082\\u0001\\u0000\\u0000\\u0000\\u008a\"+\r\n\t\t\"\\u0010\\u0001\\u0000\\u0000\\u0000\\u008b\\u008c\\u0005t\\u0000\\u0000\\u008c\\u008d\"+\r\n\t\t\"\\u0005r\\u0000\\u0000\\u008d\\u008e\\u0005u\\u0000\\u0000\\u008e\\u0095\\u0005e\"+\r\n\t\t\"\\u0000\\u0000\\u008f\\u0090\\u0005f\\u0000\\u0000\\u0090\\u0091\\u0005a\\u0000\\u0000\"+\r\n\t\t\"\\u0091\\u0092\\u0005l\\u0000\\u0000\\u0092\\u0093\\u0005s\\u0000\\u0000\\u0093\\u0095\"+\r\n\t\t\"\\u0005e\\u0000\\u0000\\u0094\\u008b\\u0001\\u0000\\u0000\\u0000\\u0094\\u008f\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0095\\u0012\\u0001\\u0000\\u0000\\u0000\\u0096\\u0097\\u0005\"+\r\n\t\t\"n\\u0000\\u0000\\u0097\\u0098\\u0005u\\u0000\\u0000\\u0098\\u0099\\u0005l\\u0000\"+\r\n\t\t\"\\u0000\\u0099\\u009a\\u0005l\\u0000\\u0000\\u009a\\u0014\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u009b\\u009c\\u0005v\\u0000\\u0000\\u009c\\u009d\\u0005o\\u0000\\u0000\\u009d\\u009e\"+\r\n\t\t\"\\u0005i\\u0000\\u0000\\u009e\\u009f\\u0005d\\u0000\\u0000\\u009f\\u0016\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00a0\\u00a1\\u0005s\\u0000\\u0000\\u00a1\\u00a2\\u0005u\\u0000\\u0000\"+\r\n\t\t\"\\u00a2\\u00a3\\u0005p\\u0000\\u0000\\u00a3\\u00a4\\u0005e\\u0000\\u0000\\u00a4\\u00a5\"+\r\n\t\t\"\\u0005r\\u0000\\u0000\\u00a5\\u0018\\u0001\\u0000\\u0000\\u0000\\u00a6\\u00a7\\u0005\"+\r\n\t\t\"t\\u0000\\u0000\\u00a7\\u00a8\\u0005h\\u0000\\u0000\\u00a8\\u00a9\\u0005i\\u0000\"+\r\n\t\t\"\\u0000\\u00a9\\u00aa\\u0005s\\u0000\\u0000\\u00aa\\u001a\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00ab\\u00ac\\u0005i\\u0000\\u0000\\u00ac\\u00ad\\u0005f\\u0000\\u0000\\u00ad\\u001c\"+\r\n\t\t\"\\u0001\\u0000\\u0000\\u0000\\u00ae\\u00af\\u0005e\\u0000\\u0000\\u00af\\u00b0\\u0005\"+\r\n\t\t\"l\\u0000\\u0000\\u00b0\\u00b1\\u0005s\\u0000\\u0000\\u00b1\\u00b2\\u0005e\\u0000\"+\r\n\t\t\"\\u0000\\u00b2\\u001e\\u0001\\u0000\\u0000\\u0000\\u00b3\\u00b4\\u0005=\\u0000\\u0000\"+\r\n\t\t\"\\u00b4 \\u0001\\u0000\\u0000\\u0000\\u00b5\\u00b6\\u0005+\\u0000\\u0000\\u00b6\\u00b7\"+\r\n\t\t\"\\u0005=\\u0000\\u0000\\u00b7\\\"\\u0001\\u0000\\u0000\\u0000\\u00b8\\u00b9\\u0005\"+\r\n\t\t\"-\\u0000\\u0000\\u00b9\\u00ba\\u0005=\\u0000\\u0000\\u00ba$\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00bb\\u00bc\\u0005=\\u0000\\u0000\\u00bc\\u00c5\\u0005=\\u0000\\u0000\\u00bd\"+\r\n\t\t\"\\u00be\\u0005!\\u0000\\u0000\\u00be\\u00c5\\u0005=\\u0000\\u0000\\u00bf\\u00c0\\u0005\"+\r\n\t\t\">\\u0000\\u0000\\u00c0\\u00c5\\u0005=\\u0000\\u0000\\u00c1\\u00c2\\u0005<\\u0000\"+\r\n\t\t\"\\u0000\\u00c2\\u00c5\\u0005=\\u0000\\u0000\\u00c3\\u00c5\\u0007\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00c4\\u00bb\\u0001\\u0000\\u0000\\u0000\\u00c4\\u00bd\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00c4\\u00bf\\u0001\\u0000\\u0000\\u0000\\u00c4\\u00c1\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00c4\\u00c3\\u0001\\u0000\\u0000\\u0000\\u00c5&\\u0001\\u0000\\u0000\\u0000\\u00c6\"+\r\n\t\t\"\\u00c7\\u0005!\\u0000\\u0000\\u00c7(\\u0001\\u0000\\u0000\\u0000\\u00c8\\u00c9\\u0005\"+\r\n\t\t\"+\\u0000\\u0000\\u00c9\\u00cd\\u0005+\\u0000\\u0000\\u00ca\\u00cb\\u0005-\\u0000\"+\r\n\t\t\"\\u0000\\u00cb\\u00cd\\u0005-\\u0000\\u0000\\u00cc\\u00c8\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00cc\\u00ca\\u0001\\u0000\\u0000\\u0000\\u00cd*\\u0001\\u0000\\u0000\\u0000\\u00ce\"+\r\n\t\t\"\\u00cf\\u0007\\u0001\\u0000\\u0000\\u00cf,\\u0001\\u0000\\u0000\\u0000\\u00d0\\u00d1\"+\r\n\t\t\"\\u0007\\u0002\\u0000\\u0000\\u00d1.\\u0001\\u0000\\u0000\\u0000\\u00d2\\u00d3\\u0005\"+\r\n\t\t\"&\\u0000\\u0000\\u00d3\\u00d7\\u0005&\\u0000\\u0000\\u00d4\\u00d5\\u0005|\\u0000\"+\r\n\t\t\"\\u0000\\u00d5\\u00d7\\u0005|\\u0000\\u0000\\u00d6\\u00d2\\u0001\\u0000\\u0000\\u0000\"+\r\n\t\t\"\\u00d6\\u00d4\\u0001\\u0000\\u0000\\u0000\\u00d70\\u0001\\u0000\\u0000\\u0000\\u00d8\"+\r\n\t\t\"\\u00d9\\u0005(\\u0000\\u0000\\u00d92\\u0001\\u0000\\u0000\\u0000\\u00da\\u00db\\u0005\"+\r\n\t\t\")\\u0000\\u0000\\u00db4\\u0001\\u0000\\u0000\\u0000\\u00dc\\u00dd\\u0005{\\u0000\"+\r\n\t\t\"\\u0000\\u00dd6\\u0001\\u0000\\u0000\\u0000\\u00de\\u00df\\u0005}\\u0000\\u0000\\u00df\"+\r\n\t\t\"8\\u0001\\u0000\\u0000\\u0000\\u00e0\\u00e1\\u0005.\\u0000\\u0000\\u00e1:\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u00e2\\u00e3\\u0005,\\u0000\\u0000\\u00e3<\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00e4\\u00e5\\u0005;\\u0000\\u0000\\u00e5>\\u0001\\u0000\\u0000\\u0000\\u00e6\"+\r\n\t\t\"\\u00ea\\u0007\\u0003\\u0000\\u0000\\u00e7\\u00e9\\u0007\\u0004\\u0000\\u0000\\u00e8\"+\r\n\t\t\"\\u00e7\\u0001\\u0000\\u0000\\u0000\\u00e9\\u00ec\\u0001\\u0000\\u0000\\u0000\\u00ea\"+\r\n\t\t\"\\u00e8\\u0001\\u0000\\u0000\\u0000\\u00ea\\u00eb\\u0001\\u0000\\u0000\\u0000\\u00eb\"+\r\n\t\t\"@\\u0001\\u0000\\u0000\\u0000\\u00ec\\u00ea\\u0001\\u0000\\u0000\\u0000\\u00ed\\u00ee\"+\r\n\t\t\"\\u0005\\'\\u0000\\u0000\\u00ee\\u00ef\\u0007\\u0003\\u0000\\u0000\\u00ef\\u00f0\\u0005\"+\r\n\t\t\"\\'\\u0000\\u0000\\u00f0B\\u0001\\u0000\\u0000\\u0000\\u00f1\\u00f3\\u0007\\u0005\"+\r\n\t\t\"\\u0000\\u0000\\u00f2\\u00f1\\u0001\\u0000\\u0000\\u0000\\u00f3\\u00f4\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00f4\\u00f2\\u0001\\u0000\\u0000\\u0000\\u00f4\\u00f5\\u0001\\u0000\"+\r\n\t\t\"\\u0000\\u0000\\u00f5D\\u0001\\u0000\\u0000\\u0000\\u00f6\\u00f8\\u0007\\u0006\\u0000\"+\r\n\t\t\"\\u0000\\u00f7\\u00f6\\u0001\\u0000\\u0000\\u0000\\u00f8\\u00f9\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00f9\\u00f7\\u0001\\u0000\\u0000\\u0000\\u00f9\\u00fa\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u00fa\\u00fb\\u0001\\u0000\\u0000\\u0000\\u00fb\\u00fc\\u0006\\\"\\u0000\\u0000\"+\r\n\t\t\"\\u00fcF\\u0001\\u0000\\u0000\\u0000\\u00fd\\u00fe\\u0005/\\u0000\\u0000\\u00fe\\u00ff\"+\r\n\t\t\"\\u0005*\\u0000\\u0000\\u00ff\\u0103\\u0001\\u0000\\u0000\\u0000\\u0100\\u0102\\t\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0101\\u0100\\u0001\\u0000\\u0000\\u0000\\u0102\\u0105\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0103\\u0104\\u0001\\u0000\\u0000\\u0000\\u0103\\u0101\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0104\\u0106\\u0001\\u0000\\u0000\\u0000\\u0105\\u0103\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0106\\u0107\\u0005*\\u0000\\u0000\\u0107\\u0108\\u0005/\\u0000\"+\r\n\t\t\"\\u0000\\u0108\\u0109\\u0001\\u0000\\u0000\\u0000\\u0109\\u010a\\u0006#\\u0000\\u0000\"+\r\n\t\t\"\\u010aH\\u0001\\u0000\\u0000\\u0000\\u010b\\u010c\\u0005/\\u0000\\u0000\\u010c\\u010d\"+\r\n\t\t\"\\u0005/\\u0000\\u0000\\u010d\\u0111\\u0001\\u0000\\u0000\\u0000\\u010e\\u0110\\b\"+\r\n\t\t\"\\u0007\\u0000\\u0000\\u010f\\u010e\\u0001\\u0000\\u0000\\u0000\\u0110\\u0113\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0111\\u010f\\u0001\\u0000\\u0000\\u0000\\u0111\\u0112\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0112\\u0114\\u0001\\u0000\\u0000\\u0000\\u0113\\u0111\\u0001\"+\r\n\t\t\"\\u0000\\u0000\\u0000\\u0114\\u0115\\u0006$\\u0000\\u0000\\u0115J\\u0001\\u0000\\u0000\"+\r\n\t\t\"\\u0000\\u000b\\u0000\\u0089\\u0094\\u00c4\\u00cc\\u00d6\\u00ea\\u00f4\\u00f9\\u0103\"+\r\n\t\t\"\\u0111\\u0001\\u0006\\u0000\\u0000\";\r\n\tpublic static final ATN _ATN =\r\n\t\tnew ATNDeserializer().deserialize(_serializedATN.toCharArray());\r\n\tstatic {\r\n\t\t_decisionToDFA = new DFA[_ATN.getNumberOfDecisions()];\r\n\t\tfor (int i = 0; i < _ATN.getNumberOfDecisions(); i++) {\r\n\t\t\t_decisionToDFA[i] = new DFA(_ATN.getDecisionState(i), i);\r\n\t\t}\r\n\t}\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammarLexer.java b/Parser/src/generated/antlrGrammarLexer.java
--- a/Parser/src/generated/antlrGrammarLexer.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammarLexer.java	(date 1652265657872)
@@ -1,4 +1,4 @@
-// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
+// Generated from C:/Users/Administrator/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
 package generated;
 import org.antlr.v4.runtime.Lexer;
 import org.antlr.v4.runtime.CharStream;
Index: Parser/src/generated/antlrGrammarListener.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\\antlrGrammar.g4 by ANTLR 4.10.1\r\npackage generated;\r\nimport org.antlr.v4.runtime.tree.ParseTreeListener;\r\n\r\n/**\r\n * This interface defines a complete listener for a parse tree produced by\r\n * {@link antlrGrammarParser}.\r\n */\r\npublic interface antlrGrammarListener extends ParseTreeListener {\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#programm}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterProgramm(antlrGrammarParser.ProgrammContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#programm}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitProgramm(antlrGrammarParser.ProgrammContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jClass}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJClass(antlrGrammarParser.JClassContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jClass}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJClass(antlrGrammarParser.JClassContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#constructor}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterConstructor(antlrGrammarParser.ConstructorContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#constructor}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitConstructor(antlrGrammarParser.ConstructorContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#classBody}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterClassBody(antlrGrammarParser.ClassBodyContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#classBody}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitClassBody(antlrGrammarParser.ClassBodyContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#methodDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterMethodDeclaration(antlrGrammarParser.MethodDeclarationContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#methodDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitMethodDeclaration(antlrGrammarParser.MethodDeclarationContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#fieldDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterFieldDeclaration(antlrGrammarParser.FieldDeclarationContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#fieldDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitFieldDeclaration(antlrGrammarParser.FieldDeclarationContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#methodParameter}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterMethodParameter(antlrGrammarParser.MethodParameterContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#methodParameter}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitMethodParameter(antlrGrammarParser.MethodParameterContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#nMethodParameters}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterNMethodParameters(antlrGrammarParser.NMethodParametersContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#nMethodParameters}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitNMethodParameters(antlrGrammarParser.NMethodParametersContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#nArguments}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterNArguments(antlrGrammarParser.NArgumentsContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#nArguments}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitNArguments(antlrGrammarParser.NArgumentsContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#expression}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterExpression(antlrGrammarParser.ExpressionContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#expression}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitExpression(antlrGrammarParser.ExpressionContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#basicexpressions}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterBasicexpressions(antlrGrammarParser.BasicexpressionsContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#basicexpressions}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitBasicexpressions(antlrGrammarParser.BasicexpressionsContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#instVar}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterInstVar(antlrGrammarParser.InstVarContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#instVar}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitInstVar(antlrGrammarParser.InstVarContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#statementExpressions}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterStatementExpressions(antlrGrammarParser.StatementExpressionsContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#statementExpressions}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitStatementExpressions(antlrGrammarParser.StatementExpressionsContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#assign}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterAssign(antlrGrammarParser.AssignContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#assign}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitAssign(antlrGrammarParser.AssignContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#localVarDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterLocalVarDeclaration(antlrGrammarParser.LocalVarDeclarationContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#localVarDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitLocalVarDeclaration(antlrGrammarParser.LocalVarDeclarationContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jNew}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJNew(antlrGrammarParser.JNewContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jNew}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJNew(antlrGrammarParser.JNewContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#methodCall}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterMethodCall(antlrGrammarParser.MethodCallContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#methodCall}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitMethodCall(antlrGrammarParser.MethodCallContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#methodCallPrefix}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterMethodCallPrefix(antlrGrammarParser.MethodCallPrefixContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#methodCallPrefix}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitMethodCallPrefix(antlrGrammarParser.MethodCallPrefixContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#statement}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterStatement(antlrGrammarParser.StatementContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#statement}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitStatement(antlrGrammarParser.StatementContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#block}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterBlock(antlrGrammarParser.BlockContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#block}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitBlock(antlrGrammarParser.BlockContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#ifelse}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterIfelse(antlrGrammarParser.IfelseContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#ifelse}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitIfelse(antlrGrammarParser.IfelseContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jIf}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJIf(antlrGrammarParser.JIfContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jIf}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJIf(antlrGrammarParser.JIfContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jElseIf}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJElseIf(antlrGrammarParser.JElseIfContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jElseIf}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJElseIf(antlrGrammarParser.JElseIfContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jElse}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJElse(antlrGrammarParser.JElseContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jElse}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJElse(antlrGrammarParser.JElseContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jWhile}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJWhile(antlrGrammarParser.JWhileContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jWhile}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJWhile(antlrGrammarParser.JWhileContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#jReturn}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterJReturn(antlrGrammarParser.JReturnContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#jReturn}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitJReturn(antlrGrammarParser.JReturnContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#unary}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterUnary(antlrGrammarParser.UnaryContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#unary}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitUnary(antlrGrammarParser.UnaryContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#binary}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterBinary(antlrGrammarParser.BinaryContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#binary}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitBinary(antlrGrammarParser.BinaryContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#baseType}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterBaseType(antlrGrammarParser.BaseTypeContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#baseType}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitBaseType(antlrGrammarParser.BaseTypeContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#objectType}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterObjectType(antlrGrammarParser.ObjectTypeContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#objectType}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitObjectType(antlrGrammarParser.ObjectTypeContext ctx);\r\n\t/**\r\n\t * Enter a parse tree produced by {@link antlrGrammarParser#operators}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid enterOperators(antlrGrammarParser.OperatorsContext ctx);\r\n\t/**\r\n\t * Exit a parse tree produced by {@link antlrGrammarParser#operators}.\r\n\t * @param ctx the parse tree\r\n\t */\r\n\tvoid exitOperators(antlrGrammarParser.OperatorsContext ctx);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammarListener.java b/Parser/src/generated/antlrGrammarListener.java
--- a/Parser/src/generated/antlrGrammarListener.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammarListener.java	(date 1652265657924)
@@ -1,4 +1,4 @@
-// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
+// Generated from C:/Users/Administrator/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
 package generated;
 import org.antlr.v4.runtime.tree.ParseTreeListener;
 
Index: out/production/Parser/grammar/antlrGrammar.g4
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>grammar antlrGrammar;\r\n\r\nprogramm: jClass+;\r\njClass: 'class' Identifier classBody;\r\nconstructor: AccessModifier? Identifier LBracket nMethodParameters RBracket block;\r\nclassBody: CurlyLBracket (methodDeclaration|fieldDeclaration|constructor)* CurlyRBracket;\r\nmethodDeclaration: AccessModifier? (objectType|Void) Identifier LBracket nMethodParameters RBracket block;\r\nfieldDeclaration: AccessModifier?  objectType Identifier (Comma Identifier)* (Equal expression)? Semicolon;\r\nmethodParameter: objectType Identifier;\r\nnMethodParameters: (methodParameter)? | methodParameter (Comma methodParameter)+;\r\n\r\nnArguments: expression? | expression (Comma expression)* | instVar;\r\nexpression:  basicexpressions | binary;\r\nbasicexpressions:  baseType | instVar | Identifier | statementExpressions | unary | LBracket expression RBracket ;\r\ninstVar:  This Dot Identifier|(This Dot)? (Identifier Dot)+ Identifier;\r\nstatementExpressions: assign | jNew | methodCall;\r\nassign: (instVar | Identifier) (Equal|PlusEqual|MinusEqual) expression;\r\nlocalVarDeclaration: objectType Identifier (Comma Identifier)* ((Equal|PlusEqual|MinusEqual) expression)?;\r\njNew: 'new' Identifier LBracket nArguments RBracket;\r\nmethodCall: methodCallPrefix? (Identifier LBracket nArguments RBracket Dot)*\r\n(Identifier LBracket nArguments RBracket);\r\nmethodCallPrefix: (instVar|Identifier Dot);\r\nstatement: ifelse | localVarDeclaration Semicolon | jReturn Semicolon | jWhile | block\r\n    | statementExpressions Semicolon;\r\nblock: CurlyLBracket (statement)* CurlyRBracket;\r\nifelse: jIf jElseIf* jElse?;\r\njIf: If LBracket expression RBracket block;\r\njElseIf: Else If LBracket expression RBracket block;\r\njElse: Else block;\r\njWhile: 'while' LBracket expression RBracket block;\r\njReturn: 'return' expression;\r\nunary:  NotOperator expression;\r\nbinary: basicexpressions (operators basicexpressions)+;\r\nbaseType: JBoolean | JNull | This | JString | JCharacter | JInteger | Super; //implicit definition of token JString in parser TODO: Warum? ErÃ¤nzen??\r\nobjectType: 'int'|'char'|'boolean'|Identifier;\r\noperators: LogicalOperator|Comperator|AddSubOperator|PointOperator;\r\n\r\nAccessModifier: 'public' | 'protected' | 'private';\r\nJBoolean: 'true'|'false';\r\nJNull: 'null';\r\nVoid: 'void';\r\nSuper: 'super';\r\nThis: 'this';\r\nIf: 'if';\r\nElse: 'else';\r\nEqual: '=';\r\nPlusEqual: '+=';\r\nMinusEqual: '-=';\r\nComperator: '=='|'!='|'>='|'<='|'>'|'<';\r\nNotOperator: '!';\r\nOpBeforeOrAfterIdentifier: '++'|'--';\r\nPointOperator: '*'|'/';\r\nAddSubOperator: '+'|'-'|'%';\r\nLogicalOperator: '&&'|'||';\r\nLBracket:'(';\r\nRBracket:')';\r\nCurlyLBracket:'{';\r\nCurlyRBracket:'}';\r\nDot: '.';\r\nComma: ',';\r\nSemicolon: ';';\r\nIdentifier: [A-Za-z][A-Za-z0-9]*;\r\nJCharacter: '\\'' [A-Za-z]'\\'';\r\nJInteger: [0-9]+;\r\n\r\nWS: ([ \\t\\r\\n]+) -> skip;\r\nComment: '/*' .*? '*/' -> skip;\r\nLineComment: '//' ~[\\r\\n]* -> skip;
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/out/production/Parser/grammar/antlrGrammar.g4 b/out/production/Parser/grammar/antlrGrammar.g4
--- a/out/production/Parser/grammar/antlrGrammar.g4	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/out/production/Parser/grammar/antlrGrammar.g4	(date 1652265651418)
@@ -1,6 +1,6 @@
 grammar antlrGrammar;
 
-programm: jClass+;
+programm: Identifier? jClass+;
 jClass: 'class' Identifier classBody;
 constructor: AccessModifier? Identifier LBracket nMethodParameters RBracket block;
 classBody: CurlyLBracket (methodDeclaration|fieldDeclaration|constructor)* CurlyRBracket;
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ANTLRGenerationPreferences\">\r\n    <option name=\"perGrammarGenerationSettings\">\r\n      <list>\r\n        <PerGrammarGenerationSettings>\r\n          <option name=\"fileName\" value=\"$PROJECT_DIR$/Parser/src/grammar/antlrGrammar.g4\" />\r\n          <option name=\"autoGen\" value=\"true\" />\r\n          <option name=\"outputDir\" value=\"F:\\User Folder\\Desktop\\JavaCompiler_TINF2020\\Project\\Parser\\src\\\" />\r\n          <option name=\"libDir\" value=\"\" />\r\n          <option name=\"encoding\" value=\"\" />\r\n          <option name=\"pkg\" value=\"generated\" />\r\n          <option name=\"language\" value=\"\" />\r\n          <option name=\"generateVisitor\" value=\"true\" />\r\n        </PerGrammarGenerationSettings>\r\n      </list>\r\n    </option>\r\n  </component>\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_18_PREVIEW\" project-jdk-name=\"openjdk-18\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/out\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/.idea/misc.xml b/.idea/misc.xml
--- a/.idea/misc.xml	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/.idea/misc.xml	(date 1652265334379)
@@ -6,7 +6,7 @@
         <PerGrammarGenerationSettings>
           <option name="fileName" value="$PROJECT_DIR$/Parser/src/grammar/antlrGrammar.g4" />
           <option name="autoGen" value="true" />
-          <option name="outputDir" value="F:\User Folder\Desktop\JavaCompiler_TINF2020\Project\Parser\src\" />
+          <option name="outputDir" value="C:\Users\Administrator\Desktop\JavaCompiler_TINF2020\Project\Parser\src" />
           <option name="libDir" value="" />
           <option name="encoding" value="" />
           <option name="pkg" value="generated" />
@@ -16,7 +16,7 @@
       </list>
     </option>
   </component>
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_18_PREVIEW" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_17" project-jdk-name="openjdk-18" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/out" />
   </component>
 </project>
\ No newline at end of file
Index: Parser/src/generated/antlrGrammarBaseVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\\antlrGrammar.g4 by ANTLR 4.10.1\r\npackage generated;\r\nimport org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;\r\n\r\n/**\r\n * This class provides an empty implementation of {@link antlrGrammarVisitor},\r\n * which can be extended to create a visitor which only needs to handle a subset\r\n * of the available methods.\r\n *\r\n * @param <T> The return type of the visit operation. Use {@link Void} for\r\n * operations with no return type.\r\n */\r\npublic class antlrGrammarBaseVisitor<T> extends AbstractParseTreeVisitor<T> implements antlrGrammarVisitor<T> {\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitProgramm(antlrGrammarParser.ProgrammContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJClass(antlrGrammarParser.JClassContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitConstructor(antlrGrammarParser.ConstructorContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitClassBody(antlrGrammarParser.ClassBodyContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitMethodDeclaration(antlrGrammarParser.MethodDeclarationContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitFieldDeclaration(antlrGrammarParser.FieldDeclarationContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitMethodParameter(antlrGrammarParser.MethodParameterContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitNMethodParameters(antlrGrammarParser.NMethodParametersContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitNArguments(antlrGrammarParser.NArgumentsContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitExpression(antlrGrammarParser.ExpressionContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitBasicexpressions(antlrGrammarParser.BasicexpressionsContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitInstVar(antlrGrammarParser.InstVarContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitStatementExpressions(antlrGrammarParser.StatementExpressionsContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitAssign(antlrGrammarParser.AssignContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitLocalVarDeclaration(antlrGrammarParser.LocalVarDeclarationContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJNew(antlrGrammarParser.JNewContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitMethodCall(antlrGrammarParser.MethodCallContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitMethodCallPrefix(antlrGrammarParser.MethodCallPrefixContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitStatement(antlrGrammarParser.StatementContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitBlock(antlrGrammarParser.BlockContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitIfelse(antlrGrammarParser.IfelseContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJIf(antlrGrammarParser.JIfContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJElseIf(antlrGrammarParser.JElseIfContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJElse(antlrGrammarParser.JElseContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJWhile(antlrGrammarParser.JWhileContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitJReturn(antlrGrammarParser.JReturnContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitUnary(antlrGrammarParser.UnaryContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitBinary(antlrGrammarParser.BinaryContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitBaseType(antlrGrammarParser.BaseTypeContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitObjectType(antlrGrammarParser.ObjectTypeContext ctx) { return visitChildren(ctx); }\r\n\t/**\r\n\t * {@inheritDoc}\r\n\t *\r\n\t * <p>The default implementation returns the result of calling\r\n\t * {@link #visitChildren} on {@code ctx}.</p>\r\n\t */\r\n\t@Override public T visitOperators(antlrGrammarParser.OperatorsContext ctx) { return visitChildren(ctx); }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammarBaseVisitor.java b/Parser/src/generated/antlrGrammarBaseVisitor.java
--- a/Parser/src/generated/antlrGrammarBaseVisitor.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammarBaseVisitor.java	(date 1652265657929)
@@ -1,4 +1,4 @@
-// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
+// Generated from C:/Users/Administrator/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
 package generated;
 import org.antlr.v4.runtime.tree.AbstractParseTreeVisitor;
 
Index: Parser/src/generated/antlrGrammarVisitor.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\\antlrGrammar.g4 by ANTLR 4.10.1\r\npackage generated;\r\nimport org.antlr.v4.runtime.tree.ParseTreeVisitor;\r\n\r\n/**\r\n * This interface defines a complete generic visitor for a parse tree produced\r\n * by {@link antlrGrammarParser}.\r\n *\r\n * @param <T> The return type of the visit operation. Use {@link Void} for\r\n * operations with no return type.\r\n */\r\npublic interface antlrGrammarVisitor<T> extends ParseTreeVisitor<T> {\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#programm}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitProgramm(antlrGrammarParser.ProgrammContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jClass}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJClass(antlrGrammarParser.JClassContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#constructor}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitConstructor(antlrGrammarParser.ConstructorContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#classBody}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitClassBody(antlrGrammarParser.ClassBodyContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#methodDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitMethodDeclaration(antlrGrammarParser.MethodDeclarationContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#fieldDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitFieldDeclaration(antlrGrammarParser.FieldDeclarationContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#methodParameter}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitMethodParameter(antlrGrammarParser.MethodParameterContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#nMethodParameters}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitNMethodParameters(antlrGrammarParser.NMethodParametersContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#nArguments}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitNArguments(antlrGrammarParser.NArgumentsContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#expression}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitExpression(antlrGrammarParser.ExpressionContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#basicexpressions}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitBasicexpressions(antlrGrammarParser.BasicexpressionsContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#instVar}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitInstVar(antlrGrammarParser.InstVarContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#statementExpressions}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitStatementExpressions(antlrGrammarParser.StatementExpressionsContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#assign}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitAssign(antlrGrammarParser.AssignContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#localVarDeclaration}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitLocalVarDeclaration(antlrGrammarParser.LocalVarDeclarationContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jNew}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJNew(antlrGrammarParser.JNewContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#methodCall}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitMethodCall(antlrGrammarParser.MethodCallContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#methodCallPrefix}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitMethodCallPrefix(antlrGrammarParser.MethodCallPrefixContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#statement}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitStatement(antlrGrammarParser.StatementContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#block}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitBlock(antlrGrammarParser.BlockContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#ifelse}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitIfelse(antlrGrammarParser.IfelseContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jIf}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJIf(antlrGrammarParser.JIfContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jElseIf}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJElseIf(antlrGrammarParser.JElseIfContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jElse}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJElse(antlrGrammarParser.JElseContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jWhile}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJWhile(antlrGrammarParser.JWhileContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#jReturn}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitJReturn(antlrGrammarParser.JReturnContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#unary}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitUnary(antlrGrammarParser.UnaryContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#binary}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitBinary(antlrGrammarParser.BinaryContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#baseType}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitBaseType(antlrGrammarParser.BaseTypeContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#objectType}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitObjectType(antlrGrammarParser.ObjectTypeContext ctx);\r\n\t/**\r\n\t * Visit a parse tree produced by {@link antlrGrammarParser#operators}.\r\n\t * @param ctx the parse tree\r\n\t * @return the visitor result\r\n\t */\r\n\tT visitOperators(antlrGrammarParser.OperatorsContext ctx);\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/Parser/src/generated/antlrGrammarVisitor.java b/Parser/src/generated/antlrGrammarVisitor.java
--- a/Parser/src/generated/antlrGrammarVisitor.java	(revision c24d962f7a063a3d0fe1a74f39531ff935a705d5)
+++ b/Parser/src/generated/antlrGrammarVisitor.java	(date 1652265657928)
@@ -1,4 +1,4 @@
-// Generated from F:/User Folder/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
+// Generated from C:/Users/Administrator/Desktop/JavaCompiler_TINF2020/Project/Parser/src/grammar\antlrGrammar.g4 by ANTLR 4.10.1
 package generated;
 import org.antlr.v4.runtime.tree.ParseTreeVisitor;
 
